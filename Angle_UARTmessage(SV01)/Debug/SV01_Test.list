
SV01_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08008c60  08008c60  00018c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c0  080090c0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c8  080090c8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080090d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001d4  080092a4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  080092a4  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aaa6  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d2e  00000000  00000000  0002aced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0002ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006cc  00000000  00000000  0002d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023233  00000000  00000000  0002d9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c35c  00000000  00000000  00050c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6904  00000000  00000000  0005cf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003930  00000000  00000000  00133868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00137198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c48 	.word	0x08008c48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008c48 	.word	0x08008c48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fbe5 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f883 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 f96b 	bl	8001318 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001042:	f000 f93f 	bl	80012c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001046:	f000 f8eb 	bl	8001220 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 800104a:	4835      	ldr	r0, [pc, #212]	; (8001120 <main+0xf0>)
 800104c:	f000 fcb4 	bl	80019b8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8001050:	210a      	movs	r1, #10
 8001052:	4833      	ldr	r0, [pc, #204]	; (8001120 <main+0xf0>)
 8001054:	f000 fdb5 	bl	8001bc2 <HAL_ADC_PollForConversion>
	  ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8001058:	4831      	ldr	r0, [pc, #196]	; (8001120 <main+0xf0>)
 800105a:	f000 fe3d 	bl	8001cd8 <HAL_ADC_GetValue>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <main+0xf4>)
 8001064:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001066:	482e      	ldr	r0, [pc, #184]	; (8001120 <main+0xf0>)
 8001068:	f000 fd78 	bl	8001b5c <HAL_ADC_Stop>

	  voltage = (float)(ADC_VAL * (3.3))/4095;
 800106c:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <main+0xf4>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa77 	bl	8000564 <__aeabi_i2d>
 8001076:	a328      	add	r3, pc, #160	; (adr r3, 8001118 <main+0xe8>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fadc 	bl	8000638 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f7ff fdce 	bl	8000c28 <__aeabi_d2f>
 800108c:	ee06 0a90 	vmov	s13, r0
 8001090:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001128 <main+0xf8>
 8001094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <main+0xfc>)
 800109a:	edc3 7a00 	vstr	s15, [r3]
	  Angle = (voltage*300)/3.3;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <main+0xfc>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001130 <main+0x100>
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	ee17 0a90 	vmov	r0, s15
 80010b0:	f7ff fa6a 	bl	8000588 <__aeabi_f2d>
 80010b4:	a318      	add	r3, pc, #96	; (adr r3, 8001118 <main+0xe8>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fbe7 	bl	800088c <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fdaf 	bl	8000c28 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a19      	ldr	r2, [pc, #100]	; (8001134 <main+0x104>)
 80010ce:	6013      	str	r3, [r2, #0]

	  HAL_Delay(10);
 80010d0:	200a      	movs	r0, #10
 80010d2:	f000 fc09 	bl	80018e8 <HAL_Delay>

	  char str[25];
	  int len = snprintf(str, sizeof(str), "Current Angle : %.2f\r\n", Angle);
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <main+0x104>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa54 	bl	8000588 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4638      	mov	r0, r7
 80010e6:	e9cd 2300 	strd	r2, r3, [sp]
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <main+0x108>)
 80010ec:	2119      	movs	r1, #25
 80010ee:	f004 f8d9 	bl	80052a4 <sniprintf>
 80010f2:	61f8      	str	r0, [r7, #28]

	  HAL_UART_Transmit(&huart2, (uint8_t *)str, len, 100);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	4639      	mov	r1, r7
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	480f      	ldr	r0, [pc, #60]	; (800113c <main+0x10c>)
 80010fe:	f002 f9d2 	bl	80034a6 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)"\n", len, 100);
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	b29a      	uxth	r2, r3
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <main+0x110>)
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <main+0x10c>)
 800110c:	f002 f9cb 	bl	80034a6 <HAL_UART_Transmit>
  {
 8001110:	e79b      	b.n	800104a <main+0x1a>
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	66666666 	.word	0x66666666
 800111c:	400a6666 	.word	0x400a6666
 8001120:	200001f0 	.word	0x200001f0
 8001124:	2000027c 	.word	0x2000027c
 8001128:	457ff000 	.word	0x457ff000
 800112c:	20000280 	.word	0x20000280
 8001130:	43960000 	.word	0x43960000
 8001134:	20000284 	.word	0x20000284
 8001138:	08008c60 	.word	0x08008c60
 800113c:	20000238 	.word	0x20000238
 8001140:	08008c78 	.word	0x08008c78

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2234      	movs	r2, #52	; 0x34
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f004 f93d 	bl	80053d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <SystemClock_Config+0xd4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a29      	ldr	r2, [pc, #164]	; (8001218 <SystemClock_Config+0xd4>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <SystemClock_Config+0xd4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <SystemClock_Config+0xd8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001190:	4a22      	ldr	r2, [pc, #136]	; (800121c <SystemClock_Config+0xd8>)
 8001192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <SystemClock_Config+0xd8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ae:	2302      	movs	r3, #2
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b8:	2308      	movs	r3, #8
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011bc:	23b4      	movs	r3, #180	; 0xb4
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fe7d 	bl	8002ed0 <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011dc:	f000 f912 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e4:	2302      	movs	r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2102      	movs	r1, #2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fb1c 	bl	800283c <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800120a:	f000 f8fb 	bl	8001404 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	; 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001236:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_ADC1_Init+0x98>)
 800124c:	2201      	movs	r2, #1
 800124e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_ADC1_Init+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001260:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <MX_ADC1_Init+0xa0>)
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_ADC1_Init+0x98>)
 800126c:	2201      	movs	r2, #1
 800126e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_ADC1_Init+0x98>)
 800127a:	2201      	movs	r2, #1
 800127c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <MX_ADC1_Init+0x98>)
 8001280:	f000 fb56 	bl	8001930 <HAL_ADC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800128a:	f000 f8bb 	bl	8001404 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800128e:	2301      	movs	r3, #1
 8001290:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001292:	2301      	movs	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_ADC1_Init+0x98>)
 80012a0:	f000 fd28 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012aa:	f000 f8ab 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001f0 	.word	0x200001f0
 80012bc:	40012000 	.word	0x40012000
 80012c0:	0f000001 	.word	0x0f000001

080012c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <MX_USART2_UART_Init+0x50>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_USART2_UART_Init+0x4c>)
 80012fc:	f002 f886 	bl	800340c <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001306:	f000 f87d 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000238 	.word	0x20000238
 8001314:	40004400 	.word	0x40004400

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a29      	ldr	r2, [pc, #164]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_GPIO_Init+0xe0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <MX_GPIO_Init+0xe0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <MX_GPIO_Init+0xe0>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_GPIO_Init+0xe0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2120      	movs	r1, #32
 80013a2:	4816      	ldr	r0, [pc, #88]	; (80013fc <MX_GPIO_Init+0xe4>)
 80013a4:	f001 fa0c 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <MX_GPIO_Init+0xe8>)
 80013c0:	f001 f86a 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013c4:	2320      	movs	r3, #32
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <MX_GPIO_Init+0xe4>)
 80013dc:	f001 f85c 	bl	8002498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2028      	movs	r0, #40	; 0x28
 80013e6:	f000 ff8e 	bl	8002306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ea:	2028      	movs	r0, #40	; 0x28
 80013ec:	f000 ffa7 	bl	800233e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020800 	.word	0x40020800

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_MspInit+0x4c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800144e:	2007      	movs	r0, #7
 8001450:	f000 ff4e 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_ADC_MspInit+0x7c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d127      	bne.n	80014d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_ADC_MspInit+0x80>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_ADC_MspInit+0x80>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_ADC_MspInit+0x80>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_ADC_MspInit+0x80>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_ADC_MspInit+0x80>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_ADC_MspInit+0x80>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014ba:	2302      	movs	r3, #2
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014be:	2303      	movs	r3, #3
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_ADC_MspInit+0x84>)
 80014ce:	f000 ffe3 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40012000 	.word	0x40012000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_UART_MspInit+0x94>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d133      	bne.n	8001572 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_UART_MspInit+0x98>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <HAL_UART_MspInit+0x98>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_UART_MspInit+0x98>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0x98>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_UART_MspInit+0x98>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_UART_MspInit+0x98>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001542:	230c      	movs	r3, #12
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <HAL_UART_MspInit+0x9c>)
 800155e:	f000 ff9b 	bl	8002498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2026      	movs	r0, #38	; 0x26
 8001568:	f000 fecd 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800156c:	2026      	movs	r0, #38	; 0x26
 800156e:	f000 fee6 	bl	800233e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40004400 	.word	0x40004400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f968 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART2_IRQHandler+0x10>)
 80015e2:	f001 fff3 	bl	80035cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000238 	.word	0x20000238

080015f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80015f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015f8:	f001 f8fc 	bl	80027f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_kill>:

int _kill(int pid, int sig)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800161a:	f003 ff2d 	bl	8005478 <__errno>
 800161e:	4603      	mov	r3, r0
 8001620:	2216      	movs	r2, #22
 8001622:	601a      	str	r2, [r3, #0]
  return -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_exit>:

void _exit (int status)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ffe7 	bl	8001610 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001642:	e7fe      	b.n	8001642 <_exit+0x12>

08001644 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e00a      	b.n	800166c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001656:	f3af 8000 	nop.w
 800165a:	4601      	mov	r1, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf0      	blt.n	8001656 <_read+0x12>
  }

  return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e009      	b.n	80016a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf1      	blt.n	8001690 <_write+0x12>
  }
  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_close>:

int _close(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016de:	605a      	str	r2, [r3, #4]
  return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_isatty>:

int _isatty(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f003 fe92 	bl	8005478 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20020000 	.word	0x20020000
 8001780:	00000400 	.word	0x00000400
 8001784:	20000288 	.word	0x20000288
 8001788:	200003e0 	.word	0x200003e0

0800178c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017b6:	490e      	ldr	r1, [pc, #56]	; (80017f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017cc:	4c0b      	ldr	r4, [pc, #44]	; (80017fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017da:	f7ff ffd7 	bl	800178c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017de:	f003 fe51 	bl	8005484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e2:	f7ff fc25 	bl	8001030 <main>
  bx  lr    
 80017e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017f4:	080090d0 	.word	0x080090d0
  ldr r2, =_sbss
 80017f8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017fc:	200003dc 	.word	0x200003dc

08001800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <HAL_Init+0x40>)
 800180e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_Init+0x40>)
 800181a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_Init+0x40>)
 8001826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 fd5f 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fdea 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023c00 	.word	0x40023c00

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fd77 	bl	800235a <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 fd3f 	bl	8002306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	2000028c 	.word	0x2000028c

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000028c 	.word	0x2000028c

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008

08001930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e033      	b.n	80019ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fd86 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d118      	bne.n	80019a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001976:	f023 0302 	bic.w	r3, r3, #2
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fae8 	bl	8001f58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
 800199e:	e001      	b.n	80019a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Start+0x1a>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e0b2      	b.n	8001b38 <HAL_ADC_Start+0x180>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d018      	beq.n	8001a1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019f8:	4b52      	ldr	r3, [pc, #328]	; (8001b44 <HAL_ADC_Start+0x18c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_ADC_Start+0x190>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9a      	lsrs	r2, r3, #18
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d17a      	bne.n	8001b1e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a66:	d106      	bne.n	8001a76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f023 0206 	bic.w	r2, r3, #6
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_ADC_Start+0x194>)
 8001a86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d12a      	bne.n	8001af4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <HAL_ADC_Start+0x198>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d015      	beq.n	8001ad4 <HAL_ADC_Start+0x11c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <HAL_ADC_Start+0x19c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d105      	bne.n	8001abe <HAL_ADC_Start+0x106>
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_ADC_Start+0x194>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00a      	beq.n	8001ad4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <HAL_ADC_Start+0x1a0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d136      	bne.n	8001b36 <HAL_ADC_Start+0x17e>
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_ADC_Start+0x194>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d130      	bne.n	8001b36 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d129      	bne.n	8001b36 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	e020      	b.n	8001b36 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_ADC_Start+0x198>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d11b      	bne.n	8001b36 <HAL_ADC_Start+0x17e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d114      	bne.n	8001b36 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	e00b      	b.n	8001b36 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f043 0210 	orr.w	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f043 0201 	orr.w	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000000 	.word	0x20000000
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	40012300 	.word	0x40012300
 8001b50:	40012000 	.word	0x40012000
 8001b54:	40012100 	.word	0x40012100
 8001b58:	40012200 	.word	0x40012200

08001b5c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Stop+0x16>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e021      	b.n	8001bb6 <HAL_ADC_Stop+0x5a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bde:	d113      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bee:	d10b      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e063      	b.n	8001cd0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c08:	f7ff fe62 	bl	80018d0 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c0e:	e021      	b.n	8001c54 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c16:	d01d      	beq.n	8001c54 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_ADC_PollForConversion+0x6c>
 8001c1e:	f7ff fe57 	bl	80018d0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d212      	bcs.n	8001c54 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d00b      	beq.n	8001c54 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f043 0204 	orr.w	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e03d      	b.n	8001cd0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d1d6      	bne.n	8001c10 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f06f 0212 	mvn.w	r2, #18
 8001c6a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d123      	bne.n	8001cce <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d11f      	bne.n	8001cce <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d111      	bne.n	8001cce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x1c>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e113      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x244>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d925      	bls.n	8001d6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	3b1e      	subs	r3, #30
 8001d36:	2207      	movs	r2, #7
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	400a      	ands	r2, r1
 8001d44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68d9      	ldr	r1, [r3, #12]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	4603      	mov	r3, r0
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4403      	add	r3, r0
 8001d5e:	3b1e      	subs	r3, #30
 8001d60:	409a      	lsls	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	e022      	b.n	8001db2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6919      	ldr	r1, [r3, #16]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	2207      	movs	r2, #7
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6919      	ldr	r1, [r3, #16]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4403      	add	r3, r0
 8001da8:	409a      	lsls	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d824      	bhi.n	8001e04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b05      	subs	r3, #5
 8001dcc:	221f      	movs	r2, #31
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	400a      	ands	r2, r1
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b05      	subs	r3, #5
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
 8001e02:	e04c      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d824      	bhi.n	8001e56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b23      	subs	r3, #35	; 0x23
 8001e1e:	221f      	movs	r2, #31
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43da      	mvns	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b23      	subs	r3, #35	; 0x23
 8001e48:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
 8001e54:	e023      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b41      	subs	r3, #65	; 0x41
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b41      	subs	r3, #65	; 0x41
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_ADC_ConfigChannel+0x250>)
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <HAL_ADC_ConfigChannel+0x254>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d10f      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1d8>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b12      	cmp	r3, #18
 8001eb2:	d10b      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_ADC_ConfigChannel+0x254>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12b      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x23a>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_ADC_ConfigChannel+0x258>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b11      	cmp	r3, #17
 8001ee6:	d122      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_ADC_ConfigChannel+0x258>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_ADC_ConfigChannel+0x25c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_ADC_ConfigChannel+0x260>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9a      	lsrs	r2, r3, #18
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40012300 	.word	0x40012300
 8001f48:	40012000 	.word	0x40012000
 8001f4c:	10000012 	.word	0x10000012
 8001f50:	20000000 	.word	0x20000000
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f60:	4b79      	ldr	r3, [pc, #484]	; (8002148 <ADC_Init+0x1f0>)
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	4a58      	ldr	r2, [pc, #352]	; (800214c <ADC_Init+0x1f4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d022      	beq.n	8002036 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002020:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6899      	ldr	r1, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	e00f      	b.n	8002056 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002054:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0202 	bic.w	r2, r2, #2
 8002064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7e1b      	ldrb	r3, [r3, #24]
 8002070:	005a      	lsls	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01b      	beq.n	80020bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002092:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	3b01      	subs	r3, #1
 80020b0:	035a      	lsls	r2, r3, #13
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	e007      	b.n	80020cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	051a      	lsls	r2, r3, #20
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800210e:	025a      	lsls	r2, r3, #9
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6899      	ldr	r1, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	029a      	lsls	r2, r3, #10
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40012300 	.word	0x40012300
 800214c:	0f000001 	.word	0x0f000001

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	f7ff ff8e 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff29 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff3e 	bl	8002198 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff8e 	bl	8002244 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5d 	bl	80021f0 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff31 	bl	80021b4 <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffa2 	bl	80022ac <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff faa6 	bl	80018d0 <HAL_GetTick>
 8002384:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d008      	beq.n	80023a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e052      	b.n	800244a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0216 	bic.w	r2, r2, #22
 80023b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <HAL_DMA_Abort+0x62>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0208 	bic.w	r2, r2, #8
 80023e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f4:	e013      	b.n	800241e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023f6:	f7ff fa6b 	bl	80018d0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b05      	cmp	r3, #5
 8002402:	d90c      	bls.n	800241e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2203      	movs	r2, #3
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e015      	b.n	800244a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1e4      	bne.n	80023f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	223f      	movs	r2, #63	; 0x3f
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d004      	beq.n	8002470 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e00c      	b.n	800248a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2205      	movs	r2, #5
 8002474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e165      	b.n	8002780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f040 8154 	bne.w	800277a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d005      	beq.n	80024ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d130      	bne.n	800254c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002520:	2201      	movs	r2, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 0201 	and.w	r2, r3, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b03      	cmp	r3, #3
 8002556:	d017      	beq.n	8002588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d123      	bne.n	80025dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	220f      	movs	r2, #15
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	69b9      	ldr	r1, [r7, #24]
 80025d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80ae 	beq.w	800277a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_GPIO_Init+0x300>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a5c      	ldr	r2, [pc, #368]	; (8002798 <HAL_GPIO_Init+0x300>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b5a      	ldr	r3, [pc, #360]	; (8002798 <HAL_GPIO_Init+0x300>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263a:	4a58      	ldr	r2, [pc, #352]	; (800279c <HAL_GPIO_Init+0x304>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x308>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d025      	beq.n	80026b2 <HAL_GPIO_Init+0x21a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x30c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01f      	beq.n	80026ae <HAL_GPIO_Init+0x216>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x310>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x212>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x314>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_GPIO_Init+0x318>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x20a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <HAL_GPIO_Init+0x31c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x206>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a49      	ldr	r2, [pc, #292]	; (80027b8 <HAL_GPIO_Init+0x320>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x202>
 8002696:	2306      	movs	r3, #6
 8002698:	e00c      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 800269a:	2307      	movs	r3, #7
 800269c:	e00a      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 800269e:	2305      	movs	r3, #5
 80026a0:	e008      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026a2:	2304      	movs	r3, #4
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e004      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e002      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026b2:	2300      	movs	r3, #0
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f002 0203 	and.w	r2, r2, #3
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	4093      	lsls	r3, r2
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c4:	4935      	ldr	r1, [pc, #212]	; (800279c <HAL_GPIO_Init+0x304>)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d2:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HAL_GPIO_Init+0x324>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f6:	4a31      	ldr	r2, [pc, #196]	; (80027bc <HAL_GPIO_Init+0x324>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_GPIO_Init+0x324>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002720:	4a26      	ldr	r2, [pc, #152]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002726:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <HAL_GPIO_Init+0x324>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b0f      	cmp	r3, #15
 8002784:	f67f ae96 	bls.w	80024b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40021400 	.word	0x40021400
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f806 	bl	8002824 <HAL_GPIO_EXTI_Callback>
  }
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0cc      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d90c      	bls.n	8002878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b8      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800289a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	494d      	ldr	r1, [pc, #308]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d044      	beq.n	800295c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d119      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e07f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e067      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4934      	ldr	r1, [pc, #208]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800292c:	f7fe ffd0 	bl	80018d0 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7fe ffcc 	bl	80018d0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e04f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d20c      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e032      	b.n	80029ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4916      	ldr	r1, [pc, #88]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029c2:	f000 f855 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	490a      	ldr	r1, [pc, #40]	; (80029fc <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe ff30 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00
 80029f8:	40023800 	.word	0x40023800
 80029fc:	08008c7c 	.word	0x08008c7c
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08008c8c 	.word	0x08008c8c

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffdc 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08008c8c 	.word	0x08008c8c

08002a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a74:	b0ae      	sub	sp, #184	; 0xb8
 8002a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a96:	4bcb      	ldr	r3, [pc, #812]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	f200 8206 	bhi.w	8002eb0 <HAL_RCC_GetSysClockFreq+0x440>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <HAL_RCC_GetSysClockFreq+0x3c>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002ae1 	.word	0x08002ae1
 8002ab0:	08002eb1 	.word	0x08002eb1
 8002ab4:	08002eb1 	.word	0x08002eb1
 8002ab8:	08002eb1 	.word	0x08002eb1
 8002abc:	08002ae9 	.word	0x08002ae9
 8002ac0:	08002eb1 	.word	0x08002eb1
 8002ac4:	08002eb1 	.word	0x08002eb1
 8002ac8:	08002eb1 	.word	0x08002eb1
 8002acc:	08002af1 	.word	0x08002af1
 8002ad0:	08002eb1 	.word	0x08002eb1
 8002ad4:	08002eb1 	.word	0x08002eb1
 8002ad8:	08002eb1 	.word	0x08002eb1
 8002adc:	08002ce1 	.word	0x08002ce1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4bb9      	ldr	r3, [pc, #740]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ae6:	e1e7      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4bb8      	ldr	r3, [pc, #736]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002aee:	e1e3      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af0:	4bb4      	ldr	r3, [pc, #720]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afc:	4bb1      	ldr	r3, [pc, #708]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d071      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b08:	4bae      	ldr	r3, [pc, #696]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b2e:	4622      	mov	r2, r4
 8002b30:	462b      	mov	r3, r5
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	0159      	lsls	r1, r3, #5
 8002b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b40:	0150      	lsls	r0, r2, #5
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4621      	mov	r1, r4
 8002b48:	1a51      	subs	r1, r2, r1
 8002b4a:	6439      	str	r1, [r7, #64]	; 0x40
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b52:	647b      	str	r3, [r7, #68]	; 0x44
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b60:	4649      	mov	r1, r9
 8002b62:	018b      	lsls	r3, r1, #6
 8002b64:	4641      	mov	r1, r8
 8002b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	018a      	lsls	r2, r1, #6
 8002b6e:	4641      	mov	r1, r8
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b74:	4649      	mov	r1, r9
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b88:	4649      	mov	r1, r9
 8002b8a:	00cb      	lsls	r3, r1, #3
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b92:	4641      	mov	r1, r8
 8002b94:	00ca      	lsls	r2, r1, #3
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4622      	mov	r2, r4
 8002b9e:	189b      	adds	r3, r3, r2
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba2:	462b      	mov	r3, r5
 8002ba4:	460a      	mov	r2, r1
 8002ba6:	eb42 0303 	adc.w	r3, r2, r3
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bb8:	4629      	mov	r1, r5
 8002bba:	024b      	lsls	r3, r1, #9
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	024a      	lsls	r2, r1, #9
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bd8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bdc:	f7fe f874 	bl	8000cc8 <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4613      	mov	r3, r2
 8002be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bea:	e067      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bec:	4b75      	ldr	r3, [pc, #468]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bf8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c06:	2300      	movs	r3, #0
 8002c08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c0e:	4622      	mov	r2, r4
 8002c10:	462b      	mov	r3, r5
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	0159      	lsls	r1, r3, #5
 8002c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c20:	0150      	lsls	r0, r2, #5
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4621      	mov	r1, r4
 8002c28:	1a51      	subs	r1, r2, r1
 8002c2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c40:	4649      	mov	r1, r9
 8002c42:	018b      	lsls	r3, r1, #6
 8002c44:	4641      	mov	r1, r8
 8002c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c4a:	4641      	mov	r1, r8
 8002c4c:	018a      	lsls	r2, r1, #6
 8002c4e:	4641      	mov	r1, r8
 8002c50:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c54:	4649      	mov	r1, r9
 8002c56:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c6e:	4692      	mov	sl, r2
 8002c70:	469b      	mov	fp, r3
 8002c72:	4623      	mov	r3, r4
 8002c74:	eb1a 0303 	adds.w	r3, sl, r3
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	028b      	lsls	r3, r1, #10
 8002c92:	4621      	mov	r1, r4
 8002c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c98:	4621      	mov	r1, r4
 8002c9a:	028a      	lsls	r2, r1, #10
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ca8:	677a      	str	r2, [r7, #116]	; 0x74
 8002caa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cae:	f7fe f80b 	bl	8000cc8 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cde:	e0eb      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce0:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d06b      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	2200      	movs	r2, #0
 8002d00:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d14:	4622      	mov	r2, r4
 8002d16:	462b      	mov	r3, r5
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	0159      	lsls	r1, r3, #5
 8002d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d26:	0150      	lsls	r0, r2, #5
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	1a51      	subs	r1, r2, r1
 8002d30:	61b9      	str	r1, [r7, #24]
 8002d32:	4629      	mov	r1, r5
 8002d34:	eb63 0301 	sbc.w	r3, r3, r1
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d46:	4659      	mov	r1, fp
 8002d48:	018b      	lsls	r3, r1, #6
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d50:	4651      	mov	r1, sl
 8002d52:	018a      	lsls	r2, r1, #6
 8002d54:	4651      	mov	r1, sl
 8002d56:	ebb2 0801 	subs.w	r8, r2, r1
 8002d5a:	4659      	mov	r1, fp
 8002d5c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d74:	4690      	mov	r8, r2
 8002d76:	4699      	mov	r9, r3
 8002d78:	4623      	mov	r3, r4
 8002d7a:	eb18 0303 	adds.w	r3, r8, r3
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	462b      	mov	r3, r5
 8002d82:	eb49 0303 	adc.w	r3, r9, r3
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d94:	4629      	mov	r1, r5
 8002d96:	024b      	lsls	r3, r1, #9
 8002d98:	4621      	mov	r1, r4
 8002d9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d9e:	4621      	mov	r1, r4
 8002da0:	024a      	lsls	r2, r1, #9
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002daa:	2200      	movs	r2, #0
 8002dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002db0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002db4:	f7fd ff88 	bl	8000cc8 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dc2:	e065      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x420>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4611      	mov	r1, r2
 8002ddc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
 8002de2:	2300      	movs	r3, #0
 8002de4:	657b      	str	r3, [r7, #84]	; 0x54
 8002de6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002dea:	4642      	mov	r2, r8
 8002dec:	464b      	mov	r3, r9
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4641      	mov	r1, r8
 8002e04:	1a51      	subs	r1, r2, r1
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	4649      	mov	r1, r9
 8002e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	018b      	lsls	r3, r1, #6
 8002e20:	4651      	mov	r1, sl
 8002e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e26:	4651      	mov	r1, sl
 8002e28:	018a      	lsls	r2, r1, #6
 8002e2a:	4651      	mov	r1, sl
 8002e2c:	1a54      	subs	r4, r2, r1
 8002e2e:	4659      	mov	r1, fp
 8002e30:	eb63 0501 	sbc.w	r5, r3, r1
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	00eb      	lsls	r3, r5, #3
 8002e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e42:	00e2      	lsls	r2, r4, #3
 8002e44:	4614      	mov	r4, r2
 8002e46:	461d      	mov	r5, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	18e3      	adds	r3, r4, r3
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	464b      	mov	r3, r9
 8002e50:	eb45 0303 	adc.w	r3, r5, r3
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e62:	4629      	mov	r1, r5
 8002e64:	028b      	lsls	r3, r1, #10
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	028a      	lsls	r2, r1, #10
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e78:	2200      	movs	r2, #0
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e7c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e82:	f7fd ff21 	bl	8000cc8 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0f1b      	lsrs	r3, r3, #28
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eae:	e003      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	37b8      	adds	r7, #184	; 0xb8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400

08002ed0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e28d      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8083 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ef0:	4b94      	ldr	r3, [pc, #592]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d019      	beq.n	8002f30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002efc:	4b91      	ldr	r3, [pc, #580]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f08:	4b8e      	ldr	r3, [pc, #568]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f14:	d00c      	beq.n	8002f30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d112      	bne.n	8002f48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b88      	ldr	r3, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	4b84      	ldr	r3, [pc, #528]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d05b      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x124>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d157      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e25a      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x90>
 8002f52:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7b      	ldr	r2, [pc, #492]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0xcc>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0xb4>
 8002f6a:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a75      	ldr	r2, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a72      	ldr	r2, [pc, #456]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0xcc>
 8002f84:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6e      	ldr	r2, [pc, #440]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6b      	ldr	r2, [pc, #428]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fc94 	bl	80018d0 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fac:	f7fe fc90 	bl	80018d0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e21f      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0xdc>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fc80 	bl	80018d0 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe fc7c 	bl	80018d0 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e20b      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x104>
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d06f      	beq.n	80030e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003002:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b00      	cmp	r3, #0
 800300c:	d017      	beq.n	800303e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800300e:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003016:	2b08      	cmp	r3, #8
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800301a:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d11c      	bne.n	800306c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b44      	ldr	r3, [pc, #272]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x186>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1d3      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4937      	ldr	r1, [pc, #220]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	e03a      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003074:	4b34      	ldr	r3, [pc, #208]	; (8003148 <HAL_RCC_OscConfig+0x278>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe fc29 	bl	80018d0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe fc25 	bl	80018d0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1b4      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4925      	ldr	r1, [pc, #148]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
 80030b4:	e015      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_RCC_OscConfig+0x278>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe fc08 	bl	80018d0 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c4:	f7fe fc04 	bl	80018d0 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e193      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d036      	beq.n	800315c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_RCC_OscConfig+0x27c>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe fbe8 	bl	80018d0 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003104:	f7fe fbe4 	bl	80018d0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e173      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x234>
 8003122:	e01b      	b.n	800315c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_OscConfig+0x27c>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fe fbd1 	bl	80018d0 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	e00e      	b.n	8003150 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003132:	f7fe fbcd 	bl	80018d0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d907      	bls.n	8003150 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e15c      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
 8003144:	40023800 	.word	0x40023800
 8003148:	42470000 	.word	0x42470000
 800314c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	4b8a      	ldr	r3, [pc, #552]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ea      	bne.n	8003132 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8097 	beq.w	8003298 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4b83      	ldr	r3, [pc, #524]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b7f      	ldr	r3, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a7e      	ldr	r2, [pc, #504]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b7c      	ldr	r3, [pc, #496]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b79      	ldr	r3, [pc, #484]	; (8003380 <HAL_RCC_OscConfig+0x4b0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d118      	bne.n	80031d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a6:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0x4b0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a75      	ldr	r2, [pc, #468]	; (8003380 <HAL_RCC_OscConfig+0x4b0>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b2:	f7fe fb8d 	bl	80018d0 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fe fb89 	bl	80018d0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e118      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <HAL_RCC_OscConfig+0x4b0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x31e>
 80031e0:	4b66      	ldr	r3, [pc, #408]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a65      	ldr	r2, [pc, #404]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6713      	str	r3, [r2, #112]	; 0x70
 80031ec:	e01c      	b.n	8003228 <HAL_RCC_OscConfig+0x358>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x340>
 80031f6:	4b61      	ldr	r3, [pc, #388]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a60      	ldr	r2, [pc, #384]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	4b5e      	ldr	r3, [pc, #376]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a5d      	ldr	r2, [pc, #372]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0x358>
 8003210:	4b5a      	ldr	r3, [pc, #360]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a59      	ldr	r2, [pc, #356]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	4b57      	ldr	r3, [pc, #348]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a56      	ldr	r2, [pc, #344]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003222:	f023 0304 	bic.w	r3, r3, #4
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe fb4e 	bl	80018d0 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe fb4a 	bl	80018d0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0d7      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	4b4b      	ldr	r3, [pc, #300]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ee      	beq.n	8003238 <HAL_RCC_OscConfig+0x368>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7fe fb38 	bl	80018d0 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003262:	e00a      	b.n	800327a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fe fb34 	bl	80018d0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0c1      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327a:	4b40      	ldr	r3, [pc, #256]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ee      	bne.n	8003264 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328c:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	4a3a      	ldr	r2, [pc, #232]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003296:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80ad 	beq.w	80033fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d060      	beq.n	8003370 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d145      	bne.n	8003342 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_RCC_OscConfig+0x4b4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fb08 	bl	80018d0 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe fb04 	bl	80018d0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e093      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	019b      	lsls	r3, r3, #6
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	071b      	lsls	r3, r3, #28
 800330e:	491b      	ldr	r1, [pc, #108]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x4b4>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe fad9 	bl	80018d0 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003322:	f7fe fad5 	bl	80018d0 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e064      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x452>
 8003340:	e05c      	b.n	80033fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_RCC_OscConfig+0x4b4>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe fac2 	bl	80018d0 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fabe 	bl	80018d0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e04d      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_OscConfig+0x4ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x480>
 800336e:	e045      	b.n	80033fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e040      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
 800337c:	40023800 	.word	0x40023800
 8003380:	40007000 	.word	0x40007000
 8003384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003388:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <HAL_RCC_OscConfig+0x538>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d030      	beq.n	80033f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d129      	bne.n	80033f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d122      	bne.n	80033f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b8:	4013      	ands	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d119      	bne.n	80033f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	3b01      	subs	r3, #1
 80033d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d10f      	bne.n	80033f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d107      	bne.n	80033f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800

0800340c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e03f      	b.n	800349e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe f858 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fd7b 	bl	8003f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	; 0x28
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d17c      	bne.n	80035c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_Transmit+0x2c>
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e075      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Transmit+0x3e>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e06e      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2221      	movs	r2, #33	; 0x21
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fa:	f7fe f9e9 	bl	80018d0 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003514:	d108      	bne.n	8003528 <HAL_UART_Transmit+0x82>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e003      	b.n	8003530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003538:	e02a      	b.n	8003590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 faf9 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e036      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3302      	adds	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e007      	b.n	8003582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1cf      	bne.n	800353a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fac9 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e006      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b0ba      	sub	sp, #232	; 0xe8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800360a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_UART_IRQHandler+0x66>
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fbd3 	bl	8003dd6 <UART_Receive_IT>
      return;
 8003630:	e256      	b.n	8003ae0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80de 	beq.w	80037f8 <HAL_UART_IRQHandler+0x22c>
 800363c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800364c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80d1 	beq.w	80037f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_UART_IRQHandler+0xae>
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_UART_IRQHandler+0xd2>
 8003686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f043 0202 	orr.w	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_UART_IRQHandler+0xf6>
 80036aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d011      	beq.n	80036f2 <HAL_UART_IRQHandler+0x126>
 80036ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f043 0208 	orr.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 81ed 	beq.w	8003ad6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_UART_IRQHandler+0x14e>
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fb5e 	bl	8003dd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <HAL_UART_IRQHandler+0x17a>
 800373e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d04f      	beq.n	80037e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa66 	bl	8003c18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d141      	bne.n	80037de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3314      	adds	r3, #20
 8003782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003786:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800378a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800379e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1d9      	bne.n	800375a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	4a7d      	ldr	r2, [pc, #500]	; (80039a8 <HAL_UART_IRQHandler+0x3dc>)
 80037b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe fe49 	bl	8002452 <HAL_DMA_Abort_IT>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037d0:	4610      	mov	r0, r2
 80037d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	e00e      	b.n	80037f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f99a 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e00a      	b.n	80037f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f996 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e006      	b.n	80037f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f992 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037f2:	e170      	b.n	8003ad6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	bf00      	nop
    return;
 80037f6:	e16e      	b.n	8003ad6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	f040 814a 	bne.w	8003a96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8143 	beq.w	8003a96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 813c 	beq.w	8003a96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	f040 80b4 	bne.w	80039ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003850:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8140 	beq.w	8003ada <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800385e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003862:	429a      	cmp	r2, r3
 8003864:	f080 8139 	bcs.w	8003ada <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800386e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387a:	f000 8088 	beq.w	800398e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	330c      	adds	r3, #12
 80038a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1d9      	bne.n	800387e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3314      	adds	r3, #20
 80038d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3314      	adds	r3, #20
 80038ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e1      	bne.n	80038ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800391c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3314      	adds	r3, #20
 8003926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800392a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800392c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e3      	bne.n	8003906 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800395c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395e:	f023 0310 	bic.w	r3, r3, #16
 8003962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003970:	65ba      	str	r2, [r7, #88]	; 0x58
 8003972:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003976:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800397e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e3      	bne.n	800394c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fcf2 	bl	8002372 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003996:	b29b      	uxth	r3, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	b29b      	uxth	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8c0 	bl	8003b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039a4:	e099      	b.n	8003ada <HAL_UART_IRQHandler+0x50e>
 80039a6:	bf00      	nop
 80039a8:	08003cdf 	.word	0x08003cdf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 808b 	beq.w	8003ade <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80039c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8086 	beq.w	8003ade <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039f6:	647a      	str	r2, [r7, #68]	; 0x44
 80039f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e3      	bne.n	80039d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3314      	adds	r3, #20
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	623b      	str	r3, [r7, #32]
   return(result);
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3314      	adds	r3, #20
 8003a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e3      	bne.n	8003a0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0310 	bic.w	r3, r3, #16
 8003a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a74:	61fa      	str	r2, [r7, #28]
 8003a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	617b      	str	r3, [r7, #20]
   return(result);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e3      	bne.n	8003a50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f848 	bl	8003b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a94:	e023      	b.n	8003ade <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x4ea>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f929 	bl	8003d06 <UART_Transmit_IT>
    return;
 8003ab4:	e014      	b.n	8003ae0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x514>
 8003ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f969 	bl	8003da6 <UART_EndTransmit_IT>
    return;
 8003ad4:	e004      	b.n	8003ae0 <HAL_UART_IRQHandler+0x514>
    return;
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <HAL_UART_IRQHandler+0x514>
      return;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <HAL_UART_IRQHandler+0x514>
      return;
 8003ade:	bf00      	nop
  }
}
 8003ae0:	37e8      	adds	r7, #232	; 0xe8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop

08003ae8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b090      	sub	sp, #64	; 0x40
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4c:	e050      	b.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d04c      	beq.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5c:	f7fd feb8 	bl	80018d0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d241      	bcs.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b8c:	637a      	str	r2, [r7, #52]	; 0x34
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3314      	adds	r3, #20
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 0301 	bic.w	r3, r3, #1
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3314      	adds	r3, #20
 8003bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc0:	623a      	str	r2, [r7, #32]
 8003bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	69f9      	ldr	r1, [r7, #28]
 8003bc6:	6a3a      	ldr	r2, [r7, #32]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e5      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e00f      	b.n	8003c10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d09f      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3740      	adds	r7, #64	; 0x40
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b095      	sub	sp, #84	; 0x54
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c40:	643a      	str	r2, [r7, #64]	; 0x40
 8003c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d119      	bne.n	8003cc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	330c      	adds	r3, #12
 8003c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f023 0310 	bic.w	r3, r3, #16
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb0:	61ba      	str	r2, [r7, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6979      	ldr	r1, [r7, #20]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e5      	bne.n	8003c90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cd2:	bf00      	nop
 8003cd4:	3754      	adds	r7, #84	; 0x54
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff ff09 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b21      	cmp	r3, #33	; 0x21
 8003d18:	d13e      	bne.n	8003d98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	d114      	bne.n	8003d4e <UART_Transmit_IT+0x48>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d110      	bne.n	8003d4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	621a      	str	r2, [r3, #32]
 8003d4c:	e008      	b.n	8003d60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	1c59      	adds	r1, r3, #1
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6211      	str	r1, [r2, #32]
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10f      	bne.n	8003d94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fe8e 	bl	8003ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b08c      	sub	sp, #48	; 0x30
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b22      	cmp	r3, #34	; 0x22
 8003de8:	f040 80ab 	bne.w	8003f42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d117      	bne.n	8003e26 <UART_Receive_IT+0x50>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d113      	bne.n	8003e26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28
 8003e24:	e026      	b.n	8003e74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d007      	beq.n	8003e4a <UART_Receive_IT+0x74>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <UART_Receive_IT+0x82>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	e008      	b.n	8003e6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4619      	mov	r1, r3
 8003e82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d15a      	bne.n	8003f3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0220 	bic.w	r2, r2, #32
 8003e96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d135      	bne.n	8003f34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f023 0310 	bic.w	r3, r3, #16
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eee:	623a      	str	r2, [r7, #32]
 8003ef0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	69f9      	ldr	r1, [r7, #28]
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e5      	bne.n	8003ece <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d10a      	bne.n	8003f26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fdf9 	bl	8003b24 <HAL_UARTEx_RxEventCallback>
 8003f32:	e002      	b.n	8003f3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fde1 	bl	8003afc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e002      	b.n	8003f44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3730      	adds	r7, #48	; 0x30
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b0c0      	sub	sp, #256	; 0x100
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	68d9      	ldr	r1, [r3, #12]
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	ea40 0301 	orr.w	r3, r0, r1
 8003f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fa4:	f021 010c 	bic.w	r1, r1, #12
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	6999      	ldr	r1, [r3, #24]
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	ea40 0301 	orr.w	r3, r0, r1
 8003fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b8f      	ldr	r3, [pc, #572]	; (8004218 <UART_SetConfig+0x2cc>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d005      	beq.n	8003fec <UART_SetConfig+0xa0>
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b8d      	ldr	r3, [pc, #564]	; (800421c <UART_SetConfig+0x2d0>)
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d104      	bne.n	8003ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fec:	f7fe fd2c 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ff4:	e003      	b.n	8003ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ff6:	f7fe fd13 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8003ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004008:	f040 810c 	bne.w	8004224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800400c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004010:	2200      	movs	r2, #0
 8004012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004016:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800401a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800401e:	4622      	mov	r2, r4
 8004020:	462b      	mov	r3, r5
 8004022:	1891      	adds	r1, r2, r2
 8004024:	65b9      	str	r1, [r7, #88]	; 0x58
 8004026:	415b      	adcs	r3, r3
 8004028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800402a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800402e:	4621      	mov	r1, r4
 8004030:	eb12 0801 	adds.w	r8, r2, r1
 8004034:	4629      	mov	r1, r5
 8004036:	eb43 0901 	adc.w	r9, r3, r1
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800404a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800404e:	4690      	mov	r8, r2
 8004050:	4699      	mov	r9, r3
 8004052:	4623      	mov	r3, r4
 8004054:	eb18 0303 	adds.w	r3, r8, r3
 8004058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800405c:	462b      	mov	r3, r5
 800405e:	eb49 0303 	adc.w	r3, r9, r3
 8004062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004072:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800407a:	460b      	mov	r3, r1
 800407c:	18db      	adds	r3, r3, r3
 800407e:	653b      	str	r3, [r7, #80]	; 0x50
 8004080:	4613      	mov	r3, r2
 8004082:	eb42 0303 	adc.w	r3, r2, r3
 8004086:	657b      	str	r3, [r7, #84]	; 0x54
 8004088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800408c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004090:	f7fc fe1a 	bl	8000cc8 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b61      	ldr	r3, [pc, #388]	; (8004220 <UART_SetConfig+0x2d4>)
 800409a:	fba3 2302 	umull	r2, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	011c      	lsls	r4, r3, #4
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80040bc:	415b      	adcs	r3, r3
 80040be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040c4:	4641      	mov	r1, r8
 80040c6:	eb12 0a01 	adds.w	sl, r2, r1
 80040ca:	4649      	mov	r1, r9
 80040cc:	eb43 0b01 	adc.w	fp, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e4:	4692      	mov	sl, r2
 80040e6:	469b      	mov	fp, r3
 80040e8:	4643      	mov	r3, r8
 80040ea:	eb1a 0303 	adds.w	r3, sl, r3
 80040ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040f2:	464b      	mov	r3, r9
 80040f4:	eb4b 0303 	adc.w	r3, fp, r3
 80040f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004108:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800410c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004110:	460b      	mov	r3, r1
 8004112:	18db      	adds	r3, r3, r3
 8004114:	643b      	str	r3, [r7, #64]	; 0x40
 8004116:	4613      	mov	r3, r2
 8004118:	eb42 0303 	adc.w	r3, r2, r3
 800411c:	647b      	str	r3, [r7, #68]	; 0x44
 800411e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004126:	f7fc fdcf 	bl	8000cc8 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4611      	mov	r1, r2
 8004130:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <UART_SetConfig+0x2d4>)
 8004132:	fba3 2301 	umull	r2, r3, r3, r1
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2264      	movs	r2, #100	; 0x64
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	1acb      	subs	r3, r1, r3
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004146:	4b36      	ldr	r3, [pc, #216]	; (8004220 <UART_SetConfig+0x2d4>)
 8004148:	fba3 2302 	umull	r2, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004154:	441c      	add	r4, r3
 8004156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004160:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	1891      	adds	r1, r2, r2
 800416e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004170:	415b      	adcs	r3, r3
 8004172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004178:	4641      	mov	r1, r8
 800417a:	1851      	adds	r1, r2, r1
 800417c:	6339      	str	r1, [r7, #48]	; 0x30
 800417e:	4649      	mov	r1, r9
 8004180:	414b      	adcs	r3, r1
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004190:	4659      	mov	r1, fp
 8004192:	00cb      	lsls	r3, r1, #3
 8004194:	4651      	mov	r1, sl
 8004196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419a:	4651      	mov	r1, sl
 800419c:	00ca      	lsls	r2, r1, #3
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	4642      	mov	r2, r8
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041ac:	464b      	mov	r3, r9
 80041ae:	460a      	mov	r2, r1
 80041b0:	eb42 0303 	adc.w	r3, r2, r3
 80041b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041cc:	460b      	mov	r3, r1
 80041ce:	18db      	adds	r3, r3, r3
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d2:	4613      	mov	r3, r2
 80041d4:	eb42 0303 	adc.w	r3, r2, r3
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041e2:	f7fc fd71 	bl	8000cc8 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <UART_SetConfig+0x2d4>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	; 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a08      	ldr	r2, [pc, #32]	; (8004220 <UART_SetConfig+0x2d4>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 0207 	and.w	r2, r3, #7
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4422      	add	r2, r4
 8004212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004214:	e106      	b.n	8004424 <UART_SetConfig+0x4d8>
 8004216:	bf00      	nop
 8004218:	40011000 	.word	0x40011000
 800421c:	40011400 	.word	0x40011400
 8004220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004228:	2200      	movs	r2, #0
 800422a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800422e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004236:	4642      	mov	r2, r8
 8004238:	464b      	mov	r3, r9
 800423a:	1891      	adds	r1, r2, r2
 800423c:	6239      	str	r1, [r7, #32]
 800423e:	415b      	adcs	r3, r3
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
 8004242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004246:	4641      	mov	r1, r8
 8004248:	1854      	adds	r4, r2, r1
 800424a:	4649      	mov	r1, r9
 800424c:	eb43 0501 	adc.w	r5, r3, r1
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	00eb      	lsls	r3, r5, #3
 800425a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425e:	00e2      	lsls	r2, r4, #3
 8004260:	4614      	mov	r4, r2
 8004262:	461d      	mov	r5, r3
 8004264:	4643      	mov	r3, r8
 8004266:	18e3      	adds	r3, r4, r3
 8004268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800426c:	464b      	mov	r3, r9
 800426e:	eb45 0303 	adc.w	r3, r5, r3
 8004272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004282:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004292:	4629      	mov	r1, r5
 8004294:	008b      	lsls	r3, r1, #2
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429c:	4621      	mov	r1, r4
 800429e:	008a      	lsls	r2, r1, #2
 80042a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042a4:	f7fc fd10 	bl	8000cc8 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4b60      	ldr	r3, [pc, #384]	; (8004430 <UART_SetConfig+0x4e4>)
 80042ae:	fba3 2302 	umull	r2, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	011c      	lsls	r4, r3, #4
 80042b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	1891      	adds	r1, r2, r2
 80042ce:	61b9      	str	r1, [r7, #24]
 80042d0:	415b      	adcs	r3, r3
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d8:	4641      	mov	r1, r8
 80042da:	1851      	adds	r1, r2, r1
 80042dc:	6139      	str	r1, [r7, #16]
 80042de:	4649      	mov	r1, r9
 80042e0:	414b      	adcs	r3, r1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f0:	4659      	mov	r1, fp
 80042f2:	00cb      	lsls	r3, r1, #3
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fa:	4651      	mov	r1, sl
 80042fc:	00ca      	lsls	r2, r1, #3
 80042fe:	4610      	mov	r0, r2
 8004300:	4619      	mov	r1, r3
 8004302:	4603      	mov	r3, r0
 8004304:	4642      	mov	r2, r8
 8004306:	189b      	adds	r3, r3, r2
 8004308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800430c:	464b      	mov	r3, r9
 800430e:	460a      	mov	r2, r1
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	67bb      	str	r3, [r7, #120]	; 0x78
 8004322:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004330:	4649      	mov	r1, r9
 8004332:	008b      	lsls	r3, r1, #2
 8004334:	4641      	mov	r1, r8
 8004336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433a:	4641      	mov	r1, r8
 800433c:	008a      	lsls	r2, r1, #2
 800433e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004342:	f7fc fcc1 	bl	8000cc8 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4611      	mov	r1, r2
 800434c:	4b38      	ldr	r3, [pc, #224]	; (8004430 <UART_SetConfig+0x4e4>)
 800434e:	fba3 2301 	umull	r2, r3, r3, r1
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2264      	movs	r2, #100	; 0x64
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	1acb      	subs	r3, r1, r3
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	3332      	adds	r3, #50	; 0x32
 8004360:	4a33      	ldr	r2, [pc, #204]	; (8004430 <UART_SetConfig+0x4e4>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436c:	441c      	add	r4, r3
 800436e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004372:	2200      	movs	r2, #0
 8004374:	673b      	str	r3, [r7, #112]	; 0x70
 8004376:	677a      	str	r2, [r7, #116]	; 0x74
 8004378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800437c:	4642      	mov	r2, r8
 800437e:	464b      	mov	r3, r9
 8004380:	1891      	adds	r1, r2, r2
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	415b      	adcs	r3, r3
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438c:	4641      	mov	r1, r8
 800438e:	1851      	adds	r1, r2, r1
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	4649      	mov	r1, r9
 8004394:	414b      	adcs	r3, r1
 8004396:	607b      	str	r3, [r7, #4]
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043a4:	4659      	mov	r1, fp
 80043a6:	00cb      	lsls	r3, r1, #3
 80043a8:	4651      	mov	r1, sl
 80043aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ae:	4651      	mov	r1, sl
 80043b0:	00ca      	lsls	r2, r1, #3
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	4642      	mov	r2, r8
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043be:	464b      	mov	r3, r9
 80043c0:	460a      	mov	r2, r1
 80043c2:	eb42 0303 	adc.w	r3, r2, r3
 80043c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	663b      	str	r3, [r7, #96]	; 0x60
 80043d2:	667a      	str	r2, [r7, #100]	; 0x64
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043e0:	4649      	mov	r1, r9
 80043e2:	008b      	lsls	r3, r1, #2
 80043e4:	4641      	mov	r1, r8
 80043e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ea:	4641      	mov	r1, r8
 80043ec:	008a      	lsls	r2, r1, #2
 80043ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043f2:	f7fc fc69 	bl	8000cc8 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <UART_SetConfig+0x4e4>)
 80043fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2164      	movs	r1, #100	; 0x64
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	3332      	adds	r3, #50	; 0x32
 800440e:	4a08      	ldr	r2, [pc, #32]	; (8004430 <UART_SetConfig+0x4e4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 020f 	and.w	r2, r3, #15
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4422      	add	r2, r4
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800442a:	46bd      	mov	sp, r7
 800442c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004430:	51eb851f 	.word	0x51eb851f

08004434 <__cvt>:
 8004434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	ec55 4b10 	vmov	r4, r5, d0
 800443c:	2d00      	cmp	r5, #0
 800443e:	460e      	mov	r6, r1
 8004440:	4619      	mov	r1, r3
 8004442:	462b      	mov	r3, r5
 8004444:	bfbb      	ittet	lt
 8004446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800444a:	461d      	movlt	r5, r3
 800444c:	2300      	movge	r3, #0
 800444e:	232d      	movlt	r3, #45	; 0x2d
 8004450:	700b      	strb	r3, [r1, #0]
 8004452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004458:	4691      	mov	r9, r2
 800445a:	f023 0820 	bic.w	r8, r3, #32
 800445e:	bfbc      	itt	lt
 8004460:	4622      	movlt	r2, r4
 8004462:	4614      	movlt	r4, r2
 8004464:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004468:	d005      	beq.n	8004476 <__cvt+0x42>
 800446a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800446e:	d100      	bne.n	8004472 <__cvt+0x3e>
 8004470:	3601      	adds	r6, #1
 8004472:	2102      	movs	r1, #2
 8004474:	e000      	b.n	8004478 <__cvt+0x44>
 8004476:	2103      	movs	r1, #3
 8004478:	ab03      	add	r3, sp, #12
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	ab02      	add	r3, sp, #8
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	ec45 4b10 	vmov	d0, r4, r5
 8004484:	4653      	mov	r3, sl
 8004486:	4632      	mov	r2, r6
 8004488:	f001 f8b2 	bl	80055f0 <_dtoa_r>
 800448c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004490:	4607      	mov	r7, r0
 8004492:	d102      	bne.n	800449a <__cvt+0x66>
 8004494:	f019 0f01 	tst.w	r9, #1
 8004498:	d022      	beq.n	80044e0 <__cvt+0xac>
 800449a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800449e:	eb07 0906 	add.w	r9, r7, r6
 80044a2:	d110      	bne.n	80044c6 <__cvt+0x92>
 80044a4:	783b      	ldrb	r3, [r7, #0]
 80044a6:	2b30      	cmp	r3, #48	; 0x30
 80044a8:	d10a      	bne.n	80044c0 <__cvt+0x8c>
 80044aa:	2200      	movs	r2, #0
 80044ac:	2300      	movs	r3, #0
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	f7fc fb29 	bl	8000b08 <__aeabi_dcmpeq>
 80044b6:	b918      	cbnz	r0, 80044c0 <__cvt+0x8c>
 80044b8:	f1c6 0601 	rsb	r6, r6, #1
 80044bc:	f8ca 6000 	str.w	r6, [sl]
 80044c0:	f8da 3000 	ldr.w	r3, [sl]
 80044c4:	4499      	add	r9, r3
 80044c6:	2200      	movs	r2, #0
 80044c8:	2300      	movs	r3, #0
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fc fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 80044d2:	b108      	cbz	r0, 80044d8 <__cvt+0xa4>
 80044d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80044d8:	2230      	movs	r2, #48	; 0x30
 80044da:	9b03      	ldr	r3, [sp, #12]
 80044dc:	454b      	cmp	r3, r9
 80044de:	d307      	bcc.n	80044f0 <__cvt+0xbc>
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044e4:	1bdb      	subs	r3, r3, r7
 80044e6:	4638      	mov	r0, r7
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	b004      	add	sp, #16
 80044ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	9103      	str	r1, [sp, #12]
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e7f0      	b.n	80044da <__cvt+0xa6>

080044f8 <__exponent>:
 80044f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044fa:	4603      	mov	r3, r0
 80044fc:	2900      	cmp	r1, #0
 80044fe:	bfb8      	it	lt
 8004500:	4249      	neglt	r1, r1
 8004502:	f803 2b02 	strb.w	r2, [r3], #2
 8004506:	bfb4      	ite	lt
 8004508:	222d      	movlt	r2, #45	; 0x2d
 800450a:	222b      	movge	r2, #43	; 0x2b
 800450c:	2909      	cmp	r1, #9
 800450e:	7042      	strb	r2, [r0, #1]
 8004510:	dd2a      	ble.n	8004568 <__exponent+0x70>
 8004512:	f10d 0207 	add.w	r2, sp, #7
 8004516:	4617      	mov	r7, r2
 8004518:	260a      	movs	r6, #10
 800451a:	4694      	mov	ip, r2
 800451c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004520:	fb06 1415 	mls	r4, r6, r5, r1
 8004524:	3430      	adds	r4, #48	; 0x30
 8004526:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800452a:	460c      	mov	r4, r1
 800452c:	2c63      	cmp	r4, #99	; 0x63
 800452e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004532:	4629      	mov	r1, r5
 8004534:	dcf1      	bgt.n	800451a <__exponent+0x22>
 8004536:	3130      	adds	r1, #48	; 0x30
 8004538:	f1ac 0402 	sub.w	r4, ip, #2
 800453c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004540:	1c41      	adds	r1, r0, #1
 8004542:	4622      	mov	r2, r4
 8004544:	42ba      	cmp	r2, r7
 8004546:	d30a      	bcc.n	800455e <__exponent+0x66>
 8004548:	f10d 0209 	add.w	r2, sp, #9
 800454c:	eba2 020c 	sub.w	r2, r2, ip
 8004550:	42bc      	cmp	r4, r7
 8004552:	bf88      	it	hi
 8004554:	2200      	movhi	r2, #0
 8004556:	4413      	add	r3, r2
 8004558:	1a18      	subs	r0, r3, r0
 800455a:	b003      	add	sp, #12
 800455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004562:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004566:	e7ed      	b.n	8004544 <__exponent+0x4c>
 8004568:	2330      	movs	r3, #48	; 0x30
 800456a:	3130      	adds	r1, #48	; 0x30
 800456c:	7083      	strb	r3, [r0, #2]
 800456e:	70c1      	strb	r1, [r0, #3]
 8004570:	1d03      	adds	r3, r0, #4
 8004572:	e7f1      	b.n	8004558 <__exponent+0x60>

08004574 <_printf_float>:
 8004574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004578:	ed2d 8b02 	vpush	{d8}
 800457c:	b08d      	sub	sp, #52	; 0x34
 800457e:	460c      	mov	r4, r1
 8004580:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004584:	4616      	mov	r6, r2
 8004586:	461f      	mov	r7, r3
 8004588:	4605      	mov	r5, r0
 800458a:	f000 ff2b 	bl	80053e4 <_localeconv_r>
 800458e:	f8d0 a000 	ldr.w	sl, [r0]
 8004592:	4650      	mov	r0, sl
 8004594:	f7fb fe8c 	bl	80002b0 <strlen>
 8004598:	2300      	movs	r3, #0
 800459a:	930a      	str	r3, [sp, #40]	; 0x28
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	9305      	str	r3, [sp, #20]
 80045a0:	f8d8 3000 	ldr.w	r3, [r8]
 80045a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80045a8:	3307      	adds	r3, #7
 80045aa:	f023 0307 	bic.w	r3, r3, #7
 80045ae:	f103 0208 	add.w	r2, r3, #8
 80045b2:	f8c8 2000 	str.w	r2, [r8]
 80045b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045be:	9307      	str	r3, [sp, #28]
 80045c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80045c4:	ee08 0a10 	vmov	s16, r0
 80045c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80045cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d0:	4b9e      	ldr	r3, [pc, #632]	; (800484c <_printf_float+0x2d8>)
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295
 80045d6:	f7fc fac9 	bl	8000b6c <__aeabi_dcmpun>
 80045da:	bb88      	cbnz	r0, 8004640 <_printf_float+0xcc>
 80045dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045e0:	4b9a      	ldr	r3, [pc, #616]	; (800484c <_printf_float+0x2d8>)
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295
 80045e6:	f7fc faa3 	bl	8000b30 <__aeabi_dcmple>
 80045ea:	bb48      	cbnz	r0, 8004640 <_printf_float+0xcc>
 80045ec:	2200      	movs	r2, #0
 80045ee:	2300      	movs	r3, #0
 80045f0:	4640      	mov	r0, r8
 80045f2:	4649      	mov	r1, r9
 80045f4:	f7fc fa92 	bl	8000b1c <__aeabi_dcmplt>
 80045f8:	b110      	cbz	r0, 8004600 <_printf_float+0x8c>
 80045fa:	232d      	movs	r3, #45	; 0x2d
 80045fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004600:	4a93      	ldr	r2, [pc, #588]	; (8004850 <_printf_float+0x2dc>)
 8004602:	4b94      	ldr	r3, [pc, #592]	; (8004854 <_printf_float+0x2e0>)
 8004604:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004608:	bf94      	ite	ls
 800460a:	4690      	movls	r8, r2
 800460c:	4698      	movhi	r8, r3
 800460e:	2303      	movs	r3, #3
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	9b05      	ldr	r3, [sp, #20]
 8004614:	f023 0304 	bic.w	r3, r3, #4
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	f04f 0900 	mov.w	r9, #0
 800461e:	9700      	str	r7, [sp, #0]
 8004620:	4633      	mov	r3, r6
 8004622:	aa0b      	add	r2, sp, #44	; 0x2c
 8004624:	4621      	mov	r1, r4
 8004626:	4628      	mov	r0, r5
 8004628:	f000 f9da 	bl	80049e0 <_printf_common>
 800462c:	3001      	adds	r0, #1
 800462e:	f040 8090 	bne.w	8004752 <_printf_float+0x1de>
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
 8004636:	b00d      	add	sp, #52	; 0x34
 8004638:	ecbd 8b02 	vpop	{d8}
 800463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	4640      	mov	r0, r8
 8004646:	4649      	mov	r1, r9
 8004648:	f7fc fa90 	bl	8000b6c <__aeabi_dcmpun>
 800464c:	b140      	cbz	r0, 8004660 <_printf_float+0xec>
 800464e:	464b      	mov	r3, r9
 8004650:	2b00      	cmp	r3, #0
 8004652:	bfbc      	itt	lt
 8004654:	232d      	movlt	r3, #45	; 0x2d
 8004656:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800465a:	4a7f      	ldr	r2, [pc, #508]	; (8004858 <_printf_float+0x2e4>)
 800465c:	4b7f      	ldr	r3, [pc, #508]	; (800485c <_printf_float+0x2e8>)
 800465e:	e7d1      	b.n	8004604 <_printf_float+0x90>
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004666:	9206      	str	r2, [sp, #24]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	d13f      	bne.n	80046ec <_printf_float+0x178>
 800466c:	2306      	movs	r3, #6
 800466e:	6063      	str	r3, [r4, #4]
 8004670:	9b05      	ldr	r3, [sp, #20]
 8004672:	6861      	ldr	r1, [r4, #4]
 8004674:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004678:	2300      	movs	r3, #0
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	ab0a      	add	r3, sp, #40	; 0x28
 800467e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004682:	ab09      	add	r3, sp, #36	; 0x24
 8004684:	ec49 8b10 	vmov	d0, r8, r9
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	6022      	str	r2, [r4, #0]
 800468c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004690:	4628      	mov	r0, r5
 8004692:	f7ff fecf 	bl	8004434 <__cvt>
 8004696:	9b06      	ldr	r3, [sp, #24]
 8004698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800469a:	2b47      	cmp	r3, #71	; 0x47
 800469c:	4680      	mov	r8, r0
 800469e:	d108      	bne.n	80046b2 <_printf_float+0x13e>
 80046a0:	1cc8      	adds	r0, r1, #3
 80046a2:	db02      	blt.n	80046aa <_printf_float+0x136>
 80046a4:	6863      	ldr	r3, [r4, #4]
 80046a6:	4299      	cmp	r1, r3
 80046a8:	dd41      	ble.n	800472e <_printf_float+0x1ba>
 80046aa:	f1ab 0302 	sub.w	r3, fp, #2
 80046ae:	fa5f fb83 	uxtb.w	fp, r3
 80046b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80046b6:	d820      	bhi.n	80046fa <_printf_float+0x186>
 80046b8:	3901      	subs	r1, #1
 80046ba:	465a      	mov	r2, fp
 80046bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046c0:	9109      	str	r1, [sp, #36]	; 0x24
 80046c2:	f7ff ff19 	bl	80044f8 <__exponent>
 80046c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046c8:	1813      	adds	r3, r2, r0
 80046ca:	2a01      	cmp	r2, #1
 80046cc:	4681      	mov	r9, r0
 80046ce:	6123      	str	r3, [r4, #16]
 80046d0:	dc02      	bgt.n	80046d8 <_printf_float+0x164>
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	07d2      	lsls	r2, r2, #31
 80046d6:	d501      	bpl.n	80046dc <_printf_float+0x168>
 80046d8:	3301      	adds	r3, #1
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d09c      	beq.n	800461e <_printf_float+0xaa>
 80046e4:	232d      	movs	r3, #45	; 0x2d
 80046e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ea:	e798      	b.n	800461e <_printf_float+0xaa>
 80046ec:	9a06      	ldr	r2, [sp, #24]
 80046ee:	2a47      	cmp	r2, #71	; 0x47
 80046f0:	d1be      	bne.n	8004670 <_printf_float+0xfc>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1bc      	bne.n	8004670 <_printf_float+0xfc>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e7b9      	b.n	800466e <_printf_float+0xfa>
 80046fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80046fe:	d118      	bne.n	8004732 <_printf_float+0x1be>
 8004700:	2900      	cmp	r1, #0
 8004702:	6863      	ldr	r3, [r4, #4]
 8004704:	dd0b      	ble.n	800471e <_printf_float+0x1aa>
 8004706:	6121      	str	r1, [r4, #16]
 8004708:	b913      	cbnz	r3, 8004710 <_printf_float+0x19c>
 800470a:	6822      	ldr	r2, [r4, #0]
 800470c:	07d0      	lsls	r0, r2, #31
 800470e:	d502      	bpl.n	8004716 <_printf_float+0x1a2>
 8004710:	3301      	adds	r3, #1
 8004712:	440b      	add	r3, r1
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	65a1      	str	r1, [r4, #88]	; 0x58
 8004718:	f04f 0900 	mov.w	r9, #0
 800471c:	e7de      	b.n	80046dc <_printf_float+0x168>
 800471e:	b913      	cbnz	r3, 8004726 <_printf_float+0x1b2>
 8004720:	6822      	ldr	r2, [r4, #0]
 8004722:	07d2      	lsls	r2, r2, #31
 8004724:	d501      	bpl.n	800472a <_printf_float+0x1b6>
 8004726:	3302      	adds	r3, #2
 8004728:	e7f4      	b.n	8004714 <_printf_float+0x1a0>
 800472a:	2301      	movs	r3, #1
 800472c:	e7f2      	b.n	8004714 <_printf_float+0x1a0>
 800472e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004734:	4299      	cmp	r1, r3
 8004736:	db05      	blt.n	8004744 <_printf_float+0x1d0>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	6121      	str	r1, [r4, #16]
 800473c:	07d8      	lsls	r0, r3, #31
 800473e:	d5ea      	bpl.n	8004716 <_printf_float+0x1a2>
 8004740:	1c4b      	adds	r3, r1, #1
 8004742:	e7e7      	b.n	8004714 <_printf_float+0x1a0>
 8004744:	2900      	cmp	r1, #0
 8004746:	bfd4      	ite	le
 8004748:	f1c1 0202 	rsble	r2, r1, #2
 800474c:	2201      	movgt	r2, #1
 800474e:	4413      	add	r3, r2
 8004750:	e7e0      	b.n	8004714 <_printf_float+0x1a0>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	055a      	lsls	r2, r3, #21
 8004756:	d407      	bmi.n	8004768 <_printf_float+0x1f4>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	4642      	mov	r2, r8
 800475c:	4631      	mov	r1, r6
 800475e:	4628      	mov	r0, r5
 8004760:	47b8      	blx	r7
 8004762:	3001      	adds	r0, #1
 8004764:	d12c      	bne.n	80047c0 <_printf_float+0x24c>
 8004766:	e764      	b.n	8004632 <_printf_float+0xbe>
 8004768:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800476c:	f240 80e0 	bls.w	8004930 <_printf_float+0x3bc>
 8004770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004774:	2200      	movs	r2, #0
 8004776:	2300      	movs	r3, #0
 8004778:	f7fc f9c6 	bl	8000b08 <__aeabi_dcmpeq>
 800477c:	2800      	cmp	r0, #0
 800477e:	d034      	beq.n	80047ea <_printf_float+0x276>
 8004780:	4a37      	ldr	r2, [pc, #220]	; (8004860 <_printf_float+0x2ec>)
 8004782:	2301      	movs	r3, #1
 8004784:	4631      	mov	r1, r6
 8004786:	4628      	mov	r0, r5
 8004788:	47b8      	blx	r7
 800478a:	3001      	adds	r0, #1
 800478c:	f43f af51 	beq.w	8004632 <_printf_float+0xbe>
 8004790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004794:	429a      	cmp	r2, r3
 8004796:	db02      	blt.n	800479e <_printf_float+0x22a>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	07d8      	lsls	r0, r3, #31
 800479c:	d510      	bpl.n	80047c0 <_printf_float+0x24c>
 800479e:	ee18 3a10 	vmov	r3, s16
 80047a2:	4652      	mov	r2, sl
 80047a4:	4631      	mov	r1, r6
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b8      	blx	r7
 80047aa:	3001      	adds	r0, #1
 80047ac:	f43f af41 	beq.w	8004632 <_printf_float+0xbe>
 80047b0:	f04f 0800 	mov.w	r8, #0
 80047b4:	f104 091a 	add.w	r9, r4, #26
 80047b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	4543      	cmp	r3, r8
 80047be:	dc09      	bgt.n	80047d4 <_printf_float+0x260>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	079b      	lsls	r3, r3, #30
 80047c4:	f100 8107 	bmi.w	80049d6 <_printf_float+0x462>
 80047c8:	68e0      	ldr	r0, [r4, #12]
 80047ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047cc:	4298      	cmp	r0, r3
 80047ce:	bfb8      	it	lt
 80047d0:	4618      	movlt	r0, r3
 80047d2:	e730      	b.n	8004636 <_printf_float+0xc2>
 80047d4:	2301      	movs	r3, #1
 80047d6:	464a      	mov	r2, r9
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f af27 	beq.w	8004632 <_printf_float+0xbe>
 80047e4:	f108 0801 	add.w	r8, r8, #1
 80047e8:	e7e6      	b.n	80047b8 <_printf_float+0x244>
 80047ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	dc39      	bgt.n	8004864 <_printf_float+0x2f0>
 80047f0:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <_printf_float+0x2ec>)
 80047f2:	2301      	movs	r3, #1
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	f43f af19 	beq.w	8004632 <_printf_float+0xbe>
 8004800:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004804:	4313      	orrs	r3, r2
 8004806:	d102      	bne.n	800480e <_printf_float+0x29a>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	07d9      	lsls	r1, r3, #31
 800480c:	d5d8      	bpl.n	80047c0 <_printf_float+0x24c>
 800480e:	ee18 3a10 	vmov	r3, s16
 8004812:	4652      	mov	r2, sl
 8004814:	4631      	mov	r1, r6
 8004816:	4628      	mov	r0, r5
 8004818:	47b8      	blx	r7
 800481a:	3001      	adds	r0, #1
 800481c:	f43f af09 	beq.w	8004632 <_printf_float+0xbe>
 8004820:	f04f 0900 	mov.w	r9, #0
 8004824:	f104 0a1a 	add.w	sl, r4, #26
 8004828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482a:	425b      	negs	r3, r3
 800482c:	454b      	cmp	r3, r9
 800482e:	dc01      	bgt.n	8004834 <_printf_float+0x2c0>
 8004830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004832:	e792      	b.n	800475a <_printf_float+0x1e6>
 8004834:	2301      	movs	r3, #1
 8004836:	4652      	mov	r2, sl
 8004838:	4631      	mov	r1, r6
 800483a:	4628      	mov	r0, r5
 800483c:	47b8      	blx	r7
 800483e:	3001      	adds	r0, #1
 8004840:	f43f aef7 	beq.w	8004632 <_printf_float+0xbe>
 8004844:	f109 0901 	add.w	r9, r9, #1
 8004848:	e7ee      	b.n	8004828 <_printf_float+0x2b4>
 800484a:	bf00      	nop
 800484c:	7fefffff 	.word	0x7fefffff
 8004850:	08008c94 	.word	0x08008c94
 8004854:	08008c98 	.word	0x08008c98
 8004858:	08008c9c 	.word	0x08008c9c
 800485c:	08008ca0 	.word	0x08008ca0
 8004860:	08008ca4 	.word	0x08008ca4
 8004864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004868:	429a      	cmp	r2, r3
 800486a:	bfa8      	it	ge
 800486c:	461a      	movge	r2, r3
 800486e:	2a00      	cmp	r2, #0
 8004870:	4691      	mov	r9, r2
 8004872:	dc37      	bgt.n	80048e4 <_printf_float+0x370>
 8004874:	f04f 0b00 	mov.w	fp, #0
 8004878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800487c:	f104 021a 	add.w	r2, r4, #26
 8004880:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004882:	9305      	str	r3, [sp, #20]
 8004884:	eba3 0309 	sub.w	r3, r3, r9
 8004888:	455b      	cmp	r3, fp
 800488a:	dc33      	bgt.n	80048f4 <_printf_float+0x380>
 800488c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004890:	429a      	cmp	r2, r3
 8004892:	db3b      	blt.n	800490c <_printf_float+0x398>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	07da      	lsls	r2, r3, #31
 8004898:	d438      	bmi.n	800490c <_printf_float+0x398>
 800489a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800489e:	eba2 0903 	sub.w	r9, r2, r3
 80048a2:	9b05      	ldr	r3, [sp, #20]
 80048a4:	1ad2      	subs	r2, r2, r3
 80048a6:	4591      	cmp	r9, r2
 80048a8:	bfa8      	it	ge
 80048aa:	4691      	movge	r9, r2
 80048ac:	f1b9 0f00 	cmp.w	r9, #0
 80048b0:	dc35      	bgt.n	800491e <_printf_float+0x3aa>
 80048b2:	f04f 0800 	mov.w	r8, #0
 80048b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048ba:	f104 0a1a 	add.w	sl, r4, #26
 80048be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	eba3 0309 	sub.w	r3, r3, r9
 80048c8:	4543      	cmp	r3, r8
 80048ca:	f77f af79 	ble.w	80047c0 <_printf_float+0x24c>
 80048ce:	2301      	movs	r3, #1
 80048d0:	4652      	mov	r2, sl
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	f43f aeaa 	beq.w	8004632 <_printf_float+0xbe>
 80048de:	f108 0801 	add.w	r8, r8, #1
 80048e2:	e7ec      	b.n	80048be <_printf_float+0x34a>
 80048e4:	4613      	mov	r3, r2
 80048e6:	4631      	mov	r1, r6
 80048e8:	4642      	mov	r2, r8
 80048ea:	4628      	mov	r0, r5
 80048ec:	47b8      	blx	r7
 80048ee:	3001      	adds	r0, #1
 80048f0:	d1c0      	bne.n	8004874 <_printf_float+0x300>
 80048f2:	e69e      	b.n	8004632 <_printf_float+0xbe>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	9205      	str	r2, [sp, #20]
 80048fc:	47b8      	blx	r7
 80048fe:	3001      	adds	r0, #1
 8004900:	f43f ae97 	beq.w	8004632 <_printf_float+0xbe>
 8004904:	9a05      	ldr	r2, [sp, #20]
 8004906:	f10b 0b01 	add.w	fp, fp, #1
 800490a:	e7b9      	b.n	8004880 <_printf_float+0x30c>
 800490c:	ee18 3a10 	vmov	r3, s16
 8004910:	4652      	mov	r2, sl
 8004912:	4631      	mov	r1, r6
 8004914:	4628      	mov	r0, r5
 8004916:	47b8      	blx	r7
 8004918:	3001      	adds	r0, #1
 800491a:	d1be      	bne.n	800489a <_printf_float+0x326>
 800491c:	e689      	b.n	8004632 <_printf_float+0xbe>
 800491e:	9a05      	ldr	r2, [sp, #20]
 8004920:	464b      	mov	r3, r9
 8004922:	4442      	add	r2, r8
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	d1c1      	bne.n	80048b2 <_printf_float+0x33e>
 800492e:	e680      	b.n	8004632 <_printf_float+0xbe>
 8004930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004932:	2a01      	cmp	r2, #1
 8004934:	dc01      	bgt.n	800493a <_printf_float+0x3c6>
 8004936:	07db      	lsls	r3, r3, #31
 8004938:	d53a      	bpl.n	80049b0 <_printf_float+0x43c>
 800493a:	2301      	movs	r3, #1
 800493c:	4642      	mov	r2, r8
 800493e:	4631      	mov	r1, r6
 8004940:	4628      	mov	r0, r5
 8004942:	47b8      	blx	r7
 8004944:	3001      	adds	r0, #1
 8004946:	f43f ae74 	beq.w	8004632 <_printf_float+0xbe>
 800494a:	ee18 3a10 	vmov	r3, s16
 800494e:	4652      	mov	r2, sl
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f ae6b 	beq.w	8004632 <_printf_float+0xbe>
 800495c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004960:	2200      	movs	r2, #0
 8004962:	2300      	movs	r3, #0
 8004964:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004968:	f7fc f8ce 	bl	8000b08 <__aeabi_dcmpeq>
 800496c:	b9d8      	cbnz	r0, 80049a6 <_printf_float+0x432>
 800496e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004972:	f108 0201 	add.w	r2, r8, #1
 8004976:	4631      	mov	r1, r6
 8004978:	4628      	mov	r0, r5
 800497a:	47b8      	blx	r7
 800497c:	3001      	adds	r0, #1
 800497e:	d10e      	bne.n	800499e <_printf_float+0x42a>
 8004980:	e657      	b.n	8004632 <_printf_float+0xbe>
 8004982:	2301      	movs	r3, #1
 8004984:	4652      	mov	r2, sl
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	47b8      	blx	r7
 800498c:	3001      	adds	r0, #1
 800498e:	f43f ae50 	beq.w	8004632 <_printf_float+0xbe>
 8004992:	f108 0801 	add.w	r8, r8, #1
 8004996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004998:	3b01      	subs	r3, #1
 800499a:	4543      	cmp	r3, r8
 800499c:	dcf1      	bgt.n	8004982 <_printf_float+0x40e>
 800499e:	464b      	mov	r3, r9
 80049a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049a4:	e6da      	b.n	800475c <_printf_float+0x1e8>
 80049a6:	f04f 0800 	mov.w	r8, #0
 80049aa:	f104 0a1a 	add.w	sl, r4, #26
 80049ae:	e7f2      	b.n	8004996 <_printf_float+0x422>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4642      	mov	r2, r8
 80049b4:	e7df      	b.n	8004976 <_printf_float+0x402>
 80049b6:	2301      	movs	r3, #1
 80049b8:	464a      	mov	r2, r9
 80049ba:	4631      	mov	r1, r6
 80049bc:	4628      	mov	r0, r5
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	f43f ae36 	beq.w	8004632 <_printf_float+0xbe>
 80049c6:	f108 0801 	add.w	r8, r8, #1
 80049ca:	68e3      	ldr	r3, [r4, #12]
 80049cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049ce:	1a5b      	subs	r3, r3, r1
 80049d0:	4543      	cmp	r3, r8
 80049d2:	dcf0      	bgt.n	80049b6 <_printf_float+0x442>
 80049d4:	e6f8      	b.n	80047c8 <_printf_float+0x254>
 80049d6:	f04f 0800 	mov.w	r8, #0
 80049da:	f104 0919 	add.w	r9, r4, #25
 80049de:	e7f4      	b.n	80049ca <_printf_float+0x456>

080049e0 <_printf_common>:
 80049e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e4:	4616      	mov	r6, r2
 80049e6:	4699      	mov	r9, r3
 80049e8:	688a      	ldr	r2, [r1, #8]
 80049ea:	690b      	ldr	r3, [r1, #16]
 80049ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049f0:	4293      	cmp	r3, r2
 80049f2:	bfb8      	it	lt
 80049f4:	4613      	movlt	r3, r2
 80049f6:	6033      	str	r3, [r6, #0]
 80049f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049fc:	4607      	mov	r7, r0
 80049fe:	460c      	mov	r4, r1
 8004a00:	b10a      	cbz	r2, 8004a06 <_printf_common+0x26>
 8004a02:	3301      	adds	r3, #1
 8004a04:	6033      	str	r3, [r6, #0]
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	0699      	lsls	r1, r3, #26
 8004a0a:	bf42      	ittt	mi
 8004a0c:	6833      	ldrmi	r3, [r6, #0]
 8004a0e:	3302      	addmi	r3, #2
 8004a10:	6033      	strmi	r3, [r6, #0]
 8004a12:	6825      	ldr	r5, [r4, #0]
 8004a14:	f015 0506 	ands.w	r5, r5, #6
 8004a18:	d106      	bne.n	8004a28 <_printf_common+0x48>
 8004a1a:	f104 0a19 	add.w	sl, r4, #25
 8004a1e:	68e3      	ldr	r3, [r4, #12]
 8004a20:	6832      	ldr	r2, [r6, #0]
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	42ab      	cmp	r3, r5
 8004a26:	dc26      	bgt.n	8004a76 <_printf_common+0x96>
 8004a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a2c:	1e13      	subs	r3, r2, #0
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	bf18      	it	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	0692      	lsls	r2, r2, #26
 8004a36:	d42b      	bmi.n	8004a90 <_printf_common+0xb0>
 8004a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	4638      	mov	r0, r7
 8004a40:	47c0      	blx	r8
 8004a42:	3001      	adds	r0, #1
 8004a44:	d01e      	beq.n	8004a84 <_printf_common+0xa4>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	6922      	ldr	r2, [r4, #16]
 8004a4a:	f003 0306 	and.w	r3, r3, #6
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	bf02      	ittt	eq
 8004a52:	68e5      	ldreq	r5, [r4, #12]
 8004a54:	6833      	ldreq	r3, [r6, #0]
 8004a56:	1aed      	subeq	r5, r5, r3
 8004a58:	68a3      	ldr	r3, [r4, #8]
 8004a5a:	bf0c      	ite	eq
 8004a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a60:	2500      	movne	r5, #0
 8004a62:	4293      	cmp	r3, r2
 8004a64:	bfc4      	itt	gt
 8004a66:	1a9b      	subgt	r3, r3, r2
 8004a68:	18ed      	addgt	r5, r5, r3
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	341a      	adds	r4, #26
 8004a6e:	42b5      	cmp	r5, r6
 8004a70:	d11a      	bne.n	8004aa8 <_printf_common+0xc8>
 8004a72:	2000      	movs	r0, #0
 8004a74:	e008      	b.n	8004a88 <_printf_common+0xa8>
 8004a76:	2301      	movs	r3, #1
 8004a78:	4652      	mov	r2, sl
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	47c0      	blx	r8
 8004a80:	3001      	adds	r0, #1
 8004a82:	d103      	bne.n	8004a8c <_printf_common+0xac>
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8c:	3501      	adds	r5, #1
 8004a8e:	e7c6      	b.n	8004a1e <_printf_common+0x3e>
 8004a90:	18e1      	adds	r1, r4, r3
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	2030      	movs	r0, #48	; 0x30
 8004a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a9a:	4422      	add	r2, r4
 8004a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	e7c7      	b.n	8004a38 <_printf_common+0x58>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4622      	mov	r2, r4
 8004aac:	4649      	mov	r1, r9
 8004aae:	4638      	mov	r0, r7
 8004ab0:	47c0      	blx	r8
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d0e6      	beq.n	8004a84 <_printf_common+0xa4>
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7d9      	b.n	8004a6e <_printf_common+0x8e>
	...

08004abc <_printf_i>:
 8004abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	7e0f      	ldrb	r7, [r1, #24]
 8004ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ac4:	2f78      	cmp	r7, #120	; 0x78
 8004ac6:	4691      	mov	r9, r2
 8004ac8:	4680      	mov	r8, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	469a      	mov	sl, r3
 8004ace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ad2:	d807      	bhi.n	8004ae4 <_printf_i+0x28>
 8004ad4:	2f62      	cmp	r7, #98	; 0x62
 8004ad6:	d80a      	bhi.n	8004aee <_printf_i+0x32>
 8004ad8:	2f00      	cmp	r7, #0
 8004ada:	f000 80d4 	beq.w	8004c86 <_printf_i+0x1ca>
 8004ade:	2f58      	cmp	r7, #88	; 0x58
 8004ae0:	f000 80c0 	beq.w	8004c64 <_printf_i+0x1a8>
 8004ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004aec:	e03a      	b.n	8004b64 <_printf_i+0xa8>
 8004aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004af2:	2b15      	cmp	r3, #21
 8004af4:	d8f6      	bhi.n	8004ae4 <_printf_i+0x28>
 8004af6:	a101      	add	r1, pc, #4	; (adr r1, 8004afc <_printf_i+0x40>)
 8004af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004afc:	08004b55 	.word	0x08004b55
 8004b00:	08004b69 	.word	0x08004b69
 8004b04:	08004ae5 	.word	0x08004ae5
 8004b08:	08004ae5 	.word	0x08004ae5
 8004b0c:	08004ae5 	.word	0x08004ae5
 8004b10:	08004ae5 	.word	0x08004ae5
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004ae5 	.word	0x08004ae5
 8004b1c:	08004ae5 	.word	0x08004ae5
 8004b20:	08004ae5 	.word	0x08004ae5
 8004b24:	08004ae5 	.word	0x08004ae5
 8004b28:	08004c6d 	.word	0x08004c6d
 8004b2c:	08004b95 	.word	0x08004b95
 8004b30:	08004c27 	.word	0x08004c27
 8004b34:	08004ae5 	.word	0x08004ae5
 8004b38:	08004ae5 	.word	0x08004ae5
 8004b3c:	08004c8f 	.word	0x08004c8f
 8004b40:	08004ae5 	.word	0x08004ae5
 8004b44:	08004b95 	.word	0x08004b95
 8004b48:	08004ae5 	.word	0x08004ae5
 8004b4c:	08004ae5 	.word	0x08004ae5
 8004b50:	08004c2f 	.word	0x08004c2f
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	602a      	str	r2, [r5, #0]
 8004b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b64:	2301      	movs	r3, #1
 8004b66:	e09f      	b.n	8004ca8 <_printf_i+0x1ec>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	0607      	lsls	r7, r0, #24
 8004b6e:	f103 0104 	add.w	r1, r3, #4
 8004b72:	6029      	str	r1, [r5, #0]
 8004b74:	d501      	bpl.n	8004b7a <_printf_i+0xbe>
 8004b76:	681e      	ldr	r6, [r3, #0]
 8004b78:	e003      	b.n	8004b82 <_printf_i+0xc6>
 8004b7a:	0646      	lsls	r6, r0, #25
 8004b7c:	d5fb      	bpl.n	8004b76 <_printf_i+0xba>
 8004b7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	da03      	bge.n	8004b8e <_printf_i+0xd2>
 8004b86:	232d      	movs	r3, #45	; 0x2d
 8004b88:	4276      	negs	r6, r6
 8004b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b8e:	485a      	ldr	r0, [pc, #360]	; (8004cf8 <_printf_i+0x23c>)
 8004b90:	230a      	movs	r3, #10
 8004b92:	e012      	b.n	8004bba <_printf_i+0xfe>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	1d19      	adds	r1, r3, #4
 8004b9a:	6029      	str	r1, [r5, #0]
 8004b9c:	0605      	lsls	r5, r0, #24
 8004b9e:	d501      	bpl.n	8004ba4 <_printf_i+0xe8>
 8004ba0:	681e      	ldr	r6, [r3, #0]
 8004ba2:	e002      	b.n	8004baa <_printf_i+0xee>
 8004ba4:	0641      	lsls	r1, r0, #25
 8004ba6:	d5fb      	bpl.n	8004ba0 <_printf_i+0xe4>
 8004ba8:	881e      	ldrh	r6, [r3, #0]
 8004baa:	4853      	ldr	r0, [pc, #332]	; (8004cf8 <_printf_i+0x23c>)
 8004bac:	2f6f      	cmp	r7, #111	; 0x6f
 8004bae:	bf0c      	ite	eq
 8004bb0:	2308      	moveq	r3, #8
 8004bb2:	230a      	movne	r3, #10
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bba:	6865      	ldr	r5, [r4, #4]
 8004bbc:	60a5      	str	r5, [r4, #8]
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	bfa2      	ittt	ge
 8004bc2:	6821      	ldrge	r1, [r4, #0]
 8004bc4:	f021 0104 	bicge.w	r1, r1, #4
 8004bc8:	6021      	strge	r1, [r4, #0]
 8004bca:	b90e      	cbnz	r6, 8004bd0 <_printf_i+0x114>
 8004bcc:	2d00      	cmp	r5, #0
 8004bce:	d04b      	beq.n	8004c68 <_printf_i+0x1ac>
 8004bd0:	4615      	mov	r5, r2
 8004bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8004bda:	5dc7      	ldrb	r7, [r0, r7]
 8004bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004be0:	4637      	mov	r7, r6
 8004be2:	42bb      	cmp	r3, r7
 8004be4:	460e      	mov	r6, r1
 8004be6:	d9f4      	bls.n	8004bd2 <_printf_i+0x116>
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d10b      	bne.n	8004c04 <_printf_i+0x148>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	07de      	lsls	r6, r3, #31
 8004bf0:	d508      	bpl.n	8004c04 <_printf_i+0x148>
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	6861      	ldr	r1, [r4, #4]
 8004bf6:	4299      	cmp	r1, r3
 8004bf8:	bfde      	ittt	le
 8004bfa:	2330      	movle	r3, #48	; 0x30
 8004bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c04:	1b52      	subs	r2, r2, r5
 8004c06:	6122      	str	r2, [r4, #16]
 8004c08:	f8cd a000 	str.w	sl, [sp]
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	aa03      	add	r2, sp, #12
 8004c10:	4621      	mov	r1, r4
 8004c12:	4640      	mov	r0, r8
 8004c14:	f7ff fee4 	bl	80049e0 <_printf_common>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d14a      	bne.n	8004cb2 <_printf_i+0x1f6>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	b004      	add	sp, #16
 8004c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	4833      	ldr	r0, [pc, #204]	; (8004cfc <_printf_i+0x240>)
 8004c30:	2778      	movs	r7, #120	; 0x78
 8004c32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	6829      	ldr	r1, [r5, #0]
 8004c3a:	061f      	lsls	r7, r3, #24
 8004c3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c40:	d402      	bmi.n	8004c48 <_printf_i+0x18c>
 8004c42:	065f      	lsls	r7, r3, #25
 8004c44:	bf48      	it	mi
 8004c46:	b2b6      	uxthmi	r6, r6
 8004c48:	07df      	lsls	r7, r3, #31
 8004c4a:	bf48      	it	mi
 8004c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c50:	6029      	str	r1, [r5, #0]
 8004c52:	bf48      	it	mi
 8004c54:	6023      	strmi	r3, [r4, #0]
 8004c56:	b91e      	cbnz	r6, 8004c60 <_printf_i+0x1a4>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	f023 0320 	bic.w	r3, r3, #32
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	2310      	movs	r3, #16
 8004c62:	e7a7      	b.n	8004bb4 <_printf_i+0xf8>
 8004c64:	4824      	ldr	r0, [pc, #144]	; (8004cf8 <_printf_i+0x23c>)
 8004c66:	e7e4      	b.n	8004c32 <_printf_i+0x176>
 8004c68:	4615      	mov	r5, r2
 8004c6a:	e7bd      	b.n	8004be8 <_printf_i+0x12c>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	6826      	ldr	r6, [r4, #0]
 8004c70:	6961      	ldr	r1, [r4, #20]
 8004c72:	1d18      	adds	r0, r3, #4
 8004c74:	6028      	str	r0, [r5, #0]
 8004c76:	0635      	lsls	r5, r6, #24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	d501      	bpl.n	8004c80 <_printf_i+0x1c4>
 8004c7c:	6019      	str	r1, [r3, #0]
 8004c7e:	e002      	b.n	8004c86 <_printf_i+0x1ca>
 8004c80:	0670      	lsls	r0, r6, #25
 8004c82:	d5fb      	bpl.n	8004c7c <_printf_i+0x1c0>
 8004c84:	8019      	strh	r1, [r3, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	4615      	mov	r5, r2
 8004c8c:	e7bc      	b.n	8004c08 <_printf_i+0x14c>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	602a      	str	r2, [r5, #0]
 8004c94:	681d      	ldr	r5, [r3, #0]
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7fb fab8 	bl	8000210 <memchr>
 8004ca0:	b108      	cbz	r0, 8004ca6 <_printf_i+0x1ea>
 8004ca2:	1b40      	subs	r0, r0, r5
 8004ca4:	6060      	str	r0, [r4, #4]
 8004ca6:	6863      	ldr	r3, [r4, #4]
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	2300      	movs	r3, #0
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb0:	e7aa      	b.n	8004c08 <_printf_i+0x14c>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	47d0      	blx	sl
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d0ad      	beq.n	8004c1c <_printf_i+0x160>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	079b      	lsls	r3, r3, #30
 8004cc4:	d413      	bmi.n	8004cee <_printf_i+0x232>
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	bfb8      	it	lt
 8004cce:	4618      	movlt	r0, r3
 8004cd0:	e7a6      	b.n	8004c20 <_printf_i+0x164>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	47d0      	blx	sl
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d09d      	beq.n	8004c1c <_printf_i+0x160>
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	68e3      	ldr	r3, [r4, #12]
 8004ce4:	9903      	ldr	r1, [sp, #12]
 8004ce6:	1a5b      	subs	r3, r3, r1
 8004ce8:	42ab      	cmp	r3, r5
 8004cea:	dcf2      	bgt.n	8004cd2 <_printf_i+0x216>
 8004cec:	e7eb      	b.n	8004cc6 <_printf_i+0x20a>
 8004cee:	2500      	movs	r5, #0
 8004cf0:	f104 0619 	add.w	r6, r4, #25
 8004cf4:	e7f5      	b.n	8004ce2 <_printf_i+0x226>
 8004cf6:	bf00      	nop
 8004cf8:	08008ca6 	.word	0x08008ca6
 8004cfc:	08008cb7 	.word	0x08008cb7

08004d00 <_scanf_float>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	b087      	sub	sp, #28
 8004d06:	4617      	mov	r7, r2
 8004d08:	9303      	str	r3, [sp, #12]
 8004d0a:	688b      	ldr	r3, [r1, #8]
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d12:	bf83      	ittte	hi
 8004d14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004d18:	195b      	addhi	r3, r3, r5
 8004d1a:	9302      	strhi	r3, [sp, #8]
 8004d1c:	2300      	movls	r3, #0
 8004d1e:	bf86      	itte	hi
 8004d20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d24:	608b      	strhi	r3, [r1, #8]
 8004d26:	9302      	strls	r3, [sp, #8]
 8004d28:	680b      	ldr	r3, [r1, #0]
 8004d2a:	468b      	mov	fp, r1
 8004d2c:	2500      	movs	r5, #0
 8004d2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d32:	f84b 3b1c 	str.w	r3, [fp], #28
 8004d36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d3a:	4680      	mov	r8, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	465e      	mov	r6, fp
 8004d40:	46aa      	mov	sl, r5
 8004d42:	46a9      	mov	r9, r5
 8004d44:	9501      	str	r5, [sp, #4]
 8004d46:	68a2      	ldr	r2, [r4, #8]
 8004d48:	b152      	cbz	r2, 8004d60 <_scanf_float+0x60>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b4e      	cmp	r3, #78	; 0x4e
 8004d50:	d864      	bhi.n	8004e1c <_scanf_float+0x11c>
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d83c      	bhi.n	8004dd0 <_scanf_float+0xd0>
 8004d56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004d5a:	b2c8      	uxtb	r0, r1
 8004d5c:	280e      	cmp	r0, #14
 8004d5e:	d93a      	bls.n	8004dd6 <_scanf_float+0xd6>
 8004d60:	f1b9 0f00 	cmp.w	r9, #0
 8004d64:	d003      	beq.n	8004d6e <_scanf_float+0x6e>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d72:	f1ba 0f01 	cmp.w	sl, #1
 8004d76:	f200 8113 	bhi.w	8004fa0 <_scanf_float+0x2a0>
 8004d7a:	455e      	cmp	r6, fp
 8004d7c:	f200 8105 	bhi.w	8004f8a <_scanf_float+0x28a>
 8004d80:	2501      	movs	r5, #1
 8004d82:	4628      	mov	r0, r5
 8004d84:	b007      	add	sp, #28
 8004d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004d8e:	2a0d      	cmp	r2, #13
 8004d90:	d8e6      	bhi.n	8004d60 <_scanf_float+0x60>
 8004d92:	a101      	add	r1, pc, #4	; (adr r1, 8004d98 <_scanf_float+0x98>)
 8004d94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d98:	08004ed7 	.word	0x08004ed7
 8004d9c:	08004d61 	.word	0x08004d61
 8004da0:	08004d61 	.word	0x08004d61
 8004da4:	08004d61 	.word	0x08004d61
 8004da8:	08004f37 	.word	0x08004f37
 8004dac:	08004f0f 	.word	0x08004f0f
 8004db0:	08004d61 	.word	0x08004d61
 8004db4:	08004d61 	.word	0x08004d61
 8004db8:	08004ee5 	.word	0x08004ee5
 8004dbc:	08004d61 	.word	0x08004d61
 8004dc0:	08004d61 	.word	0x08004d61
 8004dc4:	08004d61 	.word	0x08004d61
 8004dc8:	08004d61 	.word	0x08004d61
 8004dcc:	08004e9d 	.word	0x08004e9d
 8004dd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004dd4:	e7db      	b.n	8004d8e <_scanf_float+0x8e>
 8004dd6:	290e      	cmp	r1, #14
 8004dd8:	d8c2      	bhi.n	8004d60 <_scanf_float+0x60>
 8004dda:	a001      	add	r0, pc, #4	; (adr r0, 8004de0 <_scanf_float+0xe0>)
 8004ddc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004de0:	08004e8f 	.word	0x08004e8f
 8004de4:	08004d61 	.word	0x08004d61
 8004de8:	08004e8f 	.word	0x08004e8f
 8004dec:	08004f23 	.word	0x08004f23
 8004df0:	08004d61 	.word	0x08004d61
 8004df4:	08004e3d 	.word	0x08004e3d
 8004df8:	08004e79 	.word	0x08004e79
 8004dfc:	08004e79 	.word	0x08004e79
 8004e00:	08004e79 	.word	0x08004e79
 8004e04:	08004e79 	.word	0x08004e79
 8004e08:	08004e79 	.word	0x08004e79
 8004e0c:	08004e79 	.word	0x08004e79
 8004e10:	08004e79 	.word	0x08004e79
 8004e14:	08004e79 	.word	0x08004e79
 8004e18:	08004e79 	.word	0x08004e79
 8004e1c:	2b6e      	cmp	r3, #110	; 0x6e
 8004e1e:	d809      	bhi.n	8004e34 <_scanf_float+0x134>
 8004e20:	2b60      	cmp	r3, #96	; 0x60
 8004e22:	d8b2      	bhi.n	8004d8a <_scanf_float+0x8a>
 8004e24:	2b54      	cmp	r3, #84	; 0x54
 8004e26:	d077      	beq.n	8004f18 <_scanf_float+0x218>
 8004e28:	2b59      	cmp	r3, #89	; 0x59
 8004e2a:	d199      	bne.n	8004d60 <_scanf_float+0x60>
 8004e2c:	2d07      	cmp	r5, #7
 8004e2e:	d197      	bne.n	8004d60 <_scanf_float+0x60>
 8004e30:	2508      	movs	r5, #8
 8004e32:	e029      	b.n	8004e88 <_scanf_float+0x188>
 8004e34:	2b74      	cmp	r3, #116	; 0x74
 8004e36:	d06f      	beq.n	8004f18 <_scanf_float+0x218>
 8004e38:	2b79      	cmp	r3, #121	; 0x79
 8004e3a:	e7f6      	b.n	8004e2a <_scanf_float+0x12a>
 8004e3c:	6821      	ldr	r1, [r4, #0]
 8004e3e:	05c8      	lsls	r0, r1, #23
 8004e40:	d51a      	bpl.n	8004e78 <_scanf_float+0x178>
 8004e42:	9b02      	ldr	r3, [sp, #8]
 8004e44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e48:	6021      	str	r1, [r4, #0]
 8004e4a:	f109 0901 	add.w	r9, r9, #1
 8004e4e:	b11b      	cbz	r3, 8004e58 <_scanf_float+0x158>
 8004e50:	3b01      	subs	r3, #1
 8004e52:	3201      	adds	r2, #1
 8004e54:	9302      	str	r3, [sp, #8]
 8004e56:	60a2      	str	r2, [r4, #8]
 8004e58:	68a3      	ldr	r3, [r4, #8]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	60a3      	str	r3, [r4, #8]
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	3301      	adds	r3, #1
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	f340 8084 	ble.w	8004f78 <_scanf_float+0x278>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	e766      	b.n	8004d46 <_scanf_float+0x46>
 8004e78:	eb1a 0f05 	cmn.w	sl, r5
 8004e7c:	f47f af70 	bne.w	8004d60 <_scanf_float+0x60>
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004e86:	6022      	str	r2, [r4, #0]
 8004e88:	f806 3b01 	strb.w	r3, [r6], #1
 8004e8c:	e7e4      	b.n	8004e58 <_scanf_float+0x158>
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	0610      	lsls	r0, r2, #24
 8004e92:	f57f af65 	bpl.w	8004d60 <_scanf_float+0x60>
 8004e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9a:	e7f4      	b.n	8004e86 <_scanf_float+0x186>
 8004e9c:	f1ba 0f00 	cmp.w	sl, #0
 8004ea0:	d10e      	bne.n	8004ec0 <_scanf_float+0x1c0>
 8004ea2:	f1b9 0f00 	cmp.w	r9, #0
 8004ea6:	d10e      	bne.n	8004ec6 <_scanf_float+0x1c6>
 8004ea8:	6822      	ldr	r2, [r4, #0]
 8004eaa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004eae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004eb2:	d108      	bne.n	8004ec6 <_scanf_float+0x1c6>
 8004eb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004eb8:	6022      	str	r2, [r4, #0]
 8004eba:	f04f 0a01 	mov.w	sl, #1
 8004ebe:	e7e3      	b.n	8004e88 <_scanf_float+0x188>
 8004ec0:	f1ba 0f02 	cmp.w	sl, #2
 8004ec4:	d055      	beq.n	8004f72 <_scanf_float+0x272>
 8004ec6:	2d01      	cmp	r5, #1
 8004ec8:	d002      	beq.n	8004ed0 <_scanf_float+0x1d0>
 8004eca:	2d04      	cmp	r5, #4
 8004ecc:	f47f af48 	bne.w	8004d60 <_scanf_float+0x60>
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	b2ed      	uxtb	r5, r5
 8004ed4:	e7d8      	b.n	8004e88 <_scanf_float+0x188>
 8004ed6:	f1ba 0f01 	cmp.w	sl, #1
 8004eda:	f47f af41 	bne.w	8004d60 <_scanf_float+0x60>
 8004ede:	f04f 0a02 	mov.w	sl, #2
 8004ee2:	e7d1      	b.n	8004e88 <_scanf_float+0x188>
 8004ee4:	b97d      	cbnz	r5, 8004f06 <_scanf_float+0x206>
 8004ee6:	f1b9 0f00 	cmp.w	r9, #0
 8004eea:	f47f af3c 	bne.w	8004d66 <_scanf_float+0x66>
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004ef4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ef8:	f47f af39 	bne.w	8004d6e <_scanf_float+0x6e>
 8004efc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f00:	6022      	str	r2, [r4, #0]
 8004f02:	2501      	movs	r5, #1
 8004f04:	e7c0      	b.n	8004e88 <_scanf_float+0x188>
 8004f06:	2d03      	cmp	r5, #3
 8004f08:	d0e2      	beq.n	8004ed0 <_scanf_float+0x1d0>
 8004f0a:	2d05      	cmp	r5, #5
 8004f0c:	e7de      	b.n	8004ecc <_scanf_float+0x1cc>
 8004f0e:	2d02      	cmp	r5, #2
 8004f10:	f47f af26 	bne.w	8004d60 <_scanf_float+0x60>
 8004f14:	2503      	movs	r5, #3
 8004f16:	e7b7      	b.n	8004e88 <_scanf_float+0x188>
 8004f18:	2d06      	cmp	r5, #6
 8004f1a:	f47f af21 	bne.w	8004d60 <_scanf_float+0x60>
 8004f1e:	2507      	movs	r5, #7
 8004f20:	e7b2      	b.n	8004e88 <_scanf_float+0x188>
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	0591      	lsls	r1, r2, #22
 8004f26:	f57f af1b 	bpl.w	8004d60 <_scanf_float+0x60>
 8004f2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004f2e:	6022      	str	r2, [r4, #0]
 8004f30:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f34:	e7a8      	b.n	8004e88 <_scanf_float+0x188>
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004f3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004f40:	d006      	beq.n	8004f50 <_scanf_float+0x250>
 8004f42:	0550      	lsls	r0, r2, #21
 8004f44:	f57f af0c 	bpl.w	8004d60 <_scanf_float+0x60>
 8004f48:	f1b9 0f00 	cmp.w	r9, #0
 8004f4c:	f43f af0f 	beq.w	8004d6e <_scanf_float+0x6e>
 8004f50:	0591      	lsls	r1, r2, #22
 8004f52:	bf58      	it	pl
 8004f54:	9901      	ldrpl	r1, [sp, #4]
 8004f56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f5a:	bf58      	it	pl
 8004f5c:	eba9 0101 	subpl.w	r1, r9, r1
 8004f60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004f64:	bf58      	it	pl
 8004f66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004f6a:	6022      	str	r2, [r4, #0]
 8004f6c:	f04f 0900 	mov.w	r9, #0
 8004f70:	e78a      	b.n	8004e88 <_scanf_float+0x188>
 8004f72:	f04f 0a03 	mov.w	sl, #3
 8004f76:	e787      	b.n	8004e88 <_scanf_float+0x188>
 8004f78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4798      	blx	r3
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f43f aedf 	beq.w	8004d46 <_scanf_float+0x46>
 8004f88:	e6ea      	b.n	8004d60 <_scanf_float+0x60>
 8004f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f92:	463a      	mov	r2, r7
 8004f94:	4640      	mov	r0, r8
 8004f96:	4798      	blx	r3
 8004f98:	6923      	ldr	r3, [r4, #16]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	6123      	str	r3, [r4, #16]
 8004f9e:	e6ec      	b.n	8004d7a <_scanf_float+0x7a>
 8004fa0:	1e6b      	subs	r3, r5, #1
 8004fa2:	2b06      	cmp	r3, #6
 8004fa4:	d825      	bhi.n	8004ff2 <_scanf_float+0x2f2>
 8004fa6:	2d02      	cmp	r5, #2
 8004fa8:	d836      	bhi.n	8005018 <_scanf_float+0x318>
 8004faa:	455e      	cmp	r6, fp
 8004fac:	f67f aee8 	bls.w	8004d80 <_scanf_float+0x80>
 8004fb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fb8:	463a      	mov	r2, r7
 8004fba:	4640      	mov	r0, r8
 8004fbc:	4798      	blx	r3
 8004fbe:	6923      	ldr	r3, [r4, #16]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	e7f1      	b.n	8004faa <_scanf_float+0x2aa>
 8004fc6:	9802      	ldr	r0, [sp, #8]
 8004fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fcc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004fd0:	9002      	str	r0, [sp, #8]
 8004fd2:	463a      	mov	r2, r7
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	4798      	blx	r3
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fe2:	fa5f fa8a 	uxtb.w	sl, sl
 8004fe6:	f1ba 0f02 	cmp.w	sl, #2
 8004fea:	d1ec      	bne.n	8004fc6 <_scanf_float+0x2c6>
 8004fec:	3d03      	subs	r5, #3
 8004fee:	b2ed      	uxtb	r5, r5
 8004ff0:	1b76      	subs	r6, r6, r5
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	05da      	lsls	r2, r3, #23
 8004ff6:	d52f      	bpl.n	8005058 <_scanf_float+0x358>
 8004ff8:	055b      	lsls	r3, r3, #21
 8004ffa:	d510      	bpl.n	800501e <_scanf_float+0x31e>
 8004ffc:	455e      	cmp	r6, fp
 8004ffe:	f67f aebf 	bls.w	8004d80 <_scanf_float+0x80>
 8005002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800500a:	463a      	mov	r2, r7
 800500c:	4640      	mov	r0, r8
 800500e:	4798      	blx	r3
 8005010:	6923      	ldr	r3, [r4, #16]
 8005012:	3b01      	subs	r3, #1
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	e7f1      	b.n	8004ffc <_scanf_float+0x2fc>
 8005018:	46aa      	mov	sl, r5
 800501a:	9602      	str	r6, [sp, #8]
 800501c:	e7df      	b.n	8004fde <_scanf_float+0x2de>
 800501e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	2965      	cmp	r1, #101	; 0x65
 8005026:	f103 33ff 	add.w	r3, r3, #4294967295
 800502a:	f106 35ff 	add.w	r5, r6, #4294967295
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	d00c      	beq.n	800504c <_scanf_float+0x34c>
 8005032:	2945      	cmp	r1, #69	; 0x45
 8005034:	d00a      	beq.n	800504c <_scanf_float+0x34c>
 8005036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800503a:	463a      	mov	r2, r7
 800503c:	4640      	mov	r0, r8
 800503e:	4798      	blx	r3
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005046:	3b01      	subs	r3, #1
 8005048:	1eb5      	subs	r5, r6, #2
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005050:	463a      	mov	r2, r7
 8005052:	4640      	mov	r0, r8
 8005054:	4798      	blx	r3
 8005056:	462e      	mov	r6, r5
 8005058:	6825      	ldr	r5, [r4, #0]
 800505a:	f015 0510 	ands.w	r5, r5, #16
 800505e:	d158      	bne.n	8005112 <_scanf_float+0x412>
 8005060:	7035      	strb	r5, [r6, #0]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	d11c      	bne.n	80050a8 <_scanf_float+0x3a8>
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	454b      	cmp	r3, r9
 8005072:	eba3 0209 	sub.w	r2, r3, r9
 8005076:	d124      	bne.n	80050c2 <_scanf_float+0x3c2>
 8005078:	2200      	movs	r2, #0
 800507a:	4659      	mov	r1, fp
 800507c:	4640      	mov	r0, r8
 800507e:	f002 fc63 	bl	8007948 <_strtod_r>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	6821      	ldr	r1, [r4, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f011 0f02 	tst.w	r1, #2
 800508c:	ec57 6b10 	vmov	r6, r7, d0
 8005090:	f103 0204 	add.w	r2, r3, #4
 8005094:	d020      	beq.n	80050d8 <_scanf_float+0x3d8>
 8005096:	9903      	ldr	r1, [sp, #12]
 8005098:	600a      	str	r2, [r1, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	e9c3 6700 	strd	r6, r7, [r3]
 80050a0:	68e3      	ldr	r3, [r4, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60e3      	str	r3, [r4, #12]
 80050a6:	e66c      	b.n	8004d82 <_scanf_float+0x82>
 80050a8:	9b04      	ldr	r3, [sp, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0e4      	beq.n	8005078 <_scanf_float+0x378>
 80050ae:	9905      	ldr	r1, [sp, #20]
 80050b0:	230a      	movs	r3, #10
 80050b2:	462a      	mov	r2, r5
 80050b4:	3101      	adds	r1, #1
 80050b6:	4640      	mov	r0, r8
 80050b8:	f002 fcce 	bl	8007a58 <_strtol_r>
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	9e05      	ldr	r6, [sp, #20]
 80050c0:	1ac2      	subs	r2, r0, r3
 80050c2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80050c6:	429e      	cmp	r6, r3
 80050c8:	bf28      	it	cs
 80050ca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80050ce:	4912      	ldr	r1, [pc, #72]	; (8005118 <_scanf_float+0x418>)
 80050d0:	4630      	mov	r0, r6
 80050d2:	f000 f91b 	bl	800530c <siprintf>
 80050d6:	e7cf      	b.n	8005078 <_scanf_float+0x378>
 80050d8:	f011 0f04 	tst.w	r1, #4
 80050dc:	9903      	ldr	r1, [sp, #12]
 80050de:	600a      	str	r2, [r1, #0]
 80050e0:	d1db      	bne.n	800509a <_scanf_float+0x39a>
 80050e2:	f8d3 8000 	ldr.w	r8, [r3]
 80050e6:	ee10 2a10 	vmov	r2, s0
 80050ea:	ee10 0a10 	vmov	r0, s0
 80050ee:	463b      	mov	r3, r7
 80050f0:	4639      	mov	r1, r7
 80050f2:	f7fb fd3b 	bl	8000b6c <__aeabi_dcmpun>
 80050f6:	b128      	cbz	r0, 8005104 <_scanf_float+0x404>
 80050f8:	4808      	ldr	r0, [pc, #32]	; (800511c <_scanf_float+0x41c>)
 80050fa:	f000 f9eb 	bl	80054d4 <nanf>
 80050fe:	ed88 0a00 	vstr	s0, [r8]
 8005102:	e7cd      	b.n	80050a0 <_scanf_float+0x3a0>
 8005104:	4630      	mov	r0, r6
 8005106:	4639      	mov	r1, r7
 8005108:	f7fb fd8e 	bl	8000c28 <__aeabi_d2f>
 800510c:	f8c8 0000 	str.w	r0, [r8]
 8005110:	e7c6      	b.n	80050a0 <_scanf_float+0x3a0>
 8005112:	2500      	movs	r5, #0
 8005114:	e635      	b.n	8004d82 <_scanf_float+0x82>
 8005116:	bf00      	nop
 8005118:	08008cc8 	.word	0x08008cc8
 800511c:	0800905d 	.word	0x0800905d

08005120 <std>:
 8005120:	2300      	movs	r3, #0
 8005122:	b510      	push	{r4, lr}
 8005124:	4604      	mov	r4, r0
 8005126:	e9c0 3300 	strd	r3, r3, [r0]
 800512a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800512e:	6083      	str	r3, [r0, #8]
 8005130:	8181      	strh	r1, [r0, #12]
 8005132:	6643      	str	r3, [r0, #100]	; 0x64
 8005134:	81c2      	strh	r2, [r0, #14]
 8005136:	6183      	str	r3, [r0, #24]
 8005138:	4619      	mov	r1, r3
 800513a:	2208      	movs	r2, #8
 800513c:	305c      	adds	r0, #92	; 0x5c
 800513e:	f000 f948 	bl	80053d2 <memset>
 8005142:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <std+0x58>)
 8005144:	6263      	str	r3, [r4, #36]	; 0x24
 8005146:	4b0d      	ldr	r3, [pc, #52]	; (800517c <std+0x5c>)
 8005148:	62a3      	str	r3, [r4, #40]	; 0x28
 800514a:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <std+0x60>)
 800514c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800514e:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <std+0x64>)
 8005150:	6323      	str	r3, [r4, #48]	; 0x30
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <std+0x68>)
 8005154:	6224      	str	r4, [r4, #32]
 8005156:	429c      	cmp	r4, r3
 8005158:	d006      	beq.n	8005168 <std+0x48>
 800515a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800515e:	4294      	cmp	r4, r2
 8005160:	d002      	beq.n	8005168 <std+0x48>
 8005162:	33d0      	adds	r3, #208	; 0xd0
 8005164:	429c      	cmp	r4, r3
 8005166:	d105      	bne.n	8005174 <std+0x54>
 8005168:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005170:	f000 b9ac 	b.w	80054cc <__retarget_lock_init_recursive>
 8005174:	bd10      	pop	{r4, pc}
 8005176:	bf00      	nop
 8005178:	0800534d 	.word	0x0800534d
 800517c:	0800536f 	.word	0x0800536f
 8005180:	080053a7 	.word	0x080053a7
 8005184:	080053cb 	.word	0x080053cb
 8005188:	20000290 	.word	0x20000290

0800518c <stdio_exit_handler>:
 800518c:	4a02      	ldr	r2, [pc, #8]	; (8005198 <stdio_exit_handler+0xc>)
 800518e:	4903      	ldr	r1, [pc, #12]	; (800519c <stdio_exit_handler+0x10>)
 8005190:	4803      	ldr	r0, [pc, #12]	; (80051a0 <stdio_exit_handler+0x14>)
 8005192:	f000 b869 	b.w	8005268 <_fwalk_sglue>
 8005196:	bf00      	nop
 8005198:	2000000c 	.word	0x2000000c
 800519c:	08007e19 	.word	0x08007e19
 80051a0:	20000018 	.word	0x20000018

080051a4 <cleanup_stdio>:
 80051a4:	6841      	ldr	r1, [r0, #4]
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <cleanup_stdio+0x34>)
 80051a8:	4299      	cmp	r1, r3
 80051aa:	b510      	push	{r4, lr}
 80051ac:	4604      	mov	r4, r0
 80051ae:	d001      	beq.n	80051b4 <cleanup_stdio+0x10>
 80051b0:	f002 fe32 	bl	8007e18 <_fflush_r>
 80051b4:	68a1      	ldr	r1, [r4, #8]
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <cleanup_stdio+0x38>)
 80051b8:	4299      	cmp	r1, r3
 80051ba:	d002      	beq.n	80051c2 <cleanup_stdio+0x1e>
 80051bc:	4620      	mov	r0, r4
 80051be:	f002 fe2b 	bl	8007e18 <_fflush_r>
 80051c2:	68e1      	ldr	r1, [r4, #12]
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <cleanup_stdio+0x3c>)
 80051c6:	4299      	cmp	r1, r3
 80051c8:	d004      	beq.n	80051d4 <cleanup_stdio+0x30>
 80051ca:	4620      	mov	r0, r4
 80051cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d0:	f002 be22 	b.w	8007e18 <_fflush_r>
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	bf00      	nop
 80051d8:	20000290 	.word	0x20000290
 80051dc:	200002f8 	.word	0x200002f8
 80051e0:	20000360 	.word	0x20000360

080051e4 <global_stdio_init.part.0>:
 80051e4:	b510      	push	{r4, lr}
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <global_stdio_init.part.0+0x30>)
 80051e8:	4c0b      	ldr	r4, [pc, #44]	; (8005218 <global_stdio_init.part.0+0x34>)
 80051ea:	4a0c      	ldr	r2, [pc, #48]	; (800521c <global_stdio_init.part.0+0x38>)
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	4620      	mov	r0, r4
 80051f0:	2200      	movs	r2, #0
 80051f2:	2104      	movs	r1, #4
 80051f4:	f7ff ff94 	bl	8005120 <std>
 80051f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051fc:	2201      	movs	r2, #1
 80051fe:	2109      	movs	r1, #9
 8005200:	f7ff ff8e 	bl	8005120 <std>
 8005204:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005208:	2202      	movs	r2, #2
 800520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520e:	2112      	movs	r1, #18
 8005210:	f7ff bf86 	b.w	8005120 <std>
 8005214:	200003c8 	.word	0x200003c8
 8005218:	20000290 	.word	0x20000290
 800521c:	0800518d 	.word	0x0800518d

08005220 <__sfp_lock_acquire>:
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <__sfp_lock_acquire+0x8>)
 8005222:	f000 b954 	b.w	80054ce <__retarget_lock_acquire_recursive>
 8005226:	bf00      	nop
 8005228:	200003d1 	.word	0x200003d1

0800522c <__sfp_lock_release>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__sfp_lock_release+0x8>)
 800522e:	f000 b94f 	b.w	80054d0 <__retarget_lock_release_recursive>
 8005232:	bf00      	nop
 8005234:	200003d1 	.word	0x200003d1

08005238 <__sinit>:
 8005238:	b510      	push	{r4, lr}
 800523a:	4604      	mov	r4, r0
 800523c:	f7ff fff0 	bl	8005220 <__sfp_lock_acquire>
 8005240:	6a23      	ldr	r3, [r4, #32]
 8005242:	b11b      	cbz	r3, 800524c <__sinit+0x14>
 8005244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005248:	f7ff bff0 	b.w	800522c <__sfp_lock_release>
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <__sinit+0x28>)
 800524e:	6223      	str	r3, [r4, #32]
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <__sinit+0x2c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f5      	bne.n	8005244 <__sinit+0xc>
 8005258:	f7ff ffc4 	bl	80051e4 <global_stdio_init.part.0>
 800525c:	e7f2      	b.n	8005244 <__sinit+0xc>
 800525e:	bf00      	nop
 8005260:	080051a5 	.word	0x080051a5
 8005264:	200003c8 	.word	0x200003c8

08005268 <_fwalk_sglue>:
 8005268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800526c:	4607      	mov	r7, r0
 800526e:	4688      	mov	r8, r1
 8005270:	4614      	mov	r4, r2
 8005272:	2600      	movs	r6, #0
 8005274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005278:	f1b9 0901 	subs.w	r9, r9, #1
 800527c:	d505      	bpl.n	800528a <_fwalk_sglue+0x22>
 800527e:	6824      	ldr	r4, [r4, #0]
 8005280:	2c00      	cmp	r4, #0
 8005282:	d1f7      	bne.n	8005274 <_fwalk_sglue+0xc>
 8005284:	4630      	mov	r0, r6
 8005286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528a:	89ab      	ldrh	r3, [r5, #12]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d907      	bls.n	80052a0 <_fwalk_sglue+0x38>
 8005290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005294:	3301      	adds	r3, #1
 8005296:	d003      	beq.n	80052a0 <_fwalk_sglue+0x38>
 8005298:	4629      	mov	r1, r5
 800529a:	4638      	mov	r0, r7
 800529c:	47c0      	blx	r8
 800529e:	4306      	orrs	r6, r0
 80052a0:	3568      	adds	r5, #104	; 0x68
 80052a2:	e7e9      	b.n	8005278 <_fwalk_sglue+0x10>

080052a4 <sniprintf>:
 80052a4:	b40c      	push	{r2, r3}
 80052a6:	b530      	push	{r4, r5, lr}
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <sniprintf+0x64>)
 80052aa:	1e0c      	subs	r4, r1, #0
 80052ac:	681d      	ldr	r5, [r3, #0]
 80052ae:	b09d      	sub	sp, #116	; 0x74
 80052b0:	da08      	bge.n	80052c4 <sniprintf+0x20>
 80052b2:	238b      	movs	r3, #139	; 0x8b
 80052b4:	602b      	str	r3, [r5, #0]
 80052b6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ba:	b01d      	add	sp, #116	; 0x74
 80052bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c0:	b002      	add	sp, #8
 80052c2:	4770      	bx	lr
 80052c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80052c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052cc:	bf14      	ite	ne
 80052ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80052d2:	4623      	moveq	r3, r4
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	9307      	str	r3, [sp, #28]
 80052d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052dc:	9002      	str	r0, [sp, #8]
 80052de:	9006      	str	r0, [sp, #24]
 80052e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052e6:	ab21      	add	r3, sp, #132	; 0x84
 80052e8:	a902      	add	r1, sp, #8
 80052ea:	4628      	mov	r0, r5
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	f002 fc0f 	bl	8007b10 <_svfiprintf_r>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	bfbc      	itt	lt
 80052f6:	238b      	movlt	r3, #139	; 0x8b
 80052f8:	602b      	strlt	r3, [r5, #0]
 80052fa:	2c00      	cmp	r4, #0
 80052fc:	d0dd      	beq.n	80052ba <sniprintf+0x16>
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e7d9      	b.n	80052ba <sniprintf+0x16>
 8005306:	bf00      	nop
 8005308:	20000064 	.word	0x20000064

0800530c <siprintf>:
 800530c:	b40e      	push	{r1, r2, r3}
 800530e:	b500      	push	{lr}
 8005310:	b09c      	sub	sp, #112	; 0x70
 8005312:	ab1d      	add	r3, sp, #116	; 0x74
 8005314:	9002      	str	r0, [sp, #8]
 8005316:	9006      	str	r0, [sp, #24]
 8005318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800531c:	4809      	ldr	r0, [pc, #36]	; (8005344 <siprintf+0x38>)
 800531e:	9107      	str	r1, [sp, #28]
 8005320:	9104      	str	r1, [sp, #16]
 8005322:	4909      	ldr	r1, [pc, #36]	; (8005348 <siprintf+0x3c>)
 8005324:	f853 2b04 	ldr.w	r2, [r3], #4
 8005328:	9105      	str	r1, [sp, #20]
 800532a:	6800      	ldr	r0, [r0, #0]
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	a902      	add	r1, sp, #8
 8005330:	f002 fbee 	bl	8007b10 <_svfiprintf_r>
 8005334:	9b02      	ldr	r3, [sp, #8]
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	b01c      	add	sp, #112	; 0x70
 800533c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005340:	b003      	add	sp, #12
 8005342:	4770      	bx	lr
 8005344:	20000064 	.word	0x20000064
 8005348:	ffff0208 	.word	0xffff0208

0800534c <__sread>:
 800534c:	b510      	push	{r4, lr}
 800534e:	460c      	mov	r4, r1
 8005350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005354:	f000 f86c 	bl	8005430 <_read_r>
 8005358:	2800      	cmp	r0, #0
 800535a:	bfab      	itete	ge
 800535c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800535e:	89a3      	ldrhlt	r3, [r4, #12]
 8005360:	181b      	addge	r3, r3, r0
 8005362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005366:	bfac      	ite	ge
 8005368:	6563      	strge	r3, [r4, #84]	; 0x54
 800536a:	81a3      	strhlt	r3, [r4, #12]
 800536c:	bd10      	pop	{r4, pc}

0800536e <__swrite>:
 800536e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005372:	461f      	mov	r7, r3
 8005374:	898b      	ldrh	r3, [r1, #12]
 8005376:	05db      	lsls	r3, r3, #23
 8005378:	4605      	mov	r5, r0
 800537a:	460c      	mov	r4, r1
 800537c:	4616      	mov	r6, r2
 800537e:	d505      	bpl.n	800538c <__swrite+0x1e>
 8005380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005384:	2302      	movs	r3, #2
 8005386:	2200      	movs	r2, #0
 8005388:	f000 f840 	bl	800540c <_lseek_r>
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	4632      	mov	r2, r6
 800539a:	463b      	mov	r3, r7
 800539c:	4628      	mov	r0, r5
 800539e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053a2:	f000 b857 	b.w	8005454 <_write_r>

080053a6 <__sseek>:
 80053a6:	b510      	push	{r4, lr}
 80053a8:	460c      	mov	r4, r1
 80053aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ae:	f000 f82d 	bl	800540c <_lseek_r>
 80053b2:	1c43      	adds	r3, r0, #1
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	bf15      	itete	ne
 80053b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80053ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053c2:	81a3      	strheq	r3, [r4, #12]
 80053c4:	bf18      	it	ne
 80053c6:	81a3      	strhne	r3, [r4, #12]
 80053c8:	bd10      	pop	{r4, pc}

080053ca <__sclose>:
 80053ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ce:	f000 b80d 	b.w	80053ec <_close_r>

080053d2 <memset>:
 80053d2:	4402      	add	r2, r0
 80053d4:	4603      	mov	r3, r0
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d100      	bne.n	80053dc <memset+0xa>
 80053da:	4770      	bx	lr
 80053dc:	f803 1b01 	strb.w	r1, [r3], #1
 80053e0:	e7f9      	b.n	80053d6 <memset+0x4>
	...

080053e4 <_localeconv_r>:
 80053e4:	4800      	ldr	r0, [pc, #0]	; (80053e8 <_localeconv_r+0x4>)
 80053e6:	4770      	bx	lr
 80053e8:	20000158 	.word	0x20000158

080053ec <_close_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d06      	ldr	r5, [pc, #24]	; (8005408 <_close_r+0x1c>)
 80053f0:	2300      	movs	r3, #0
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	f7fc f95d 	bl	80016b6 <_close>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_close_r+0x1a>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_close_r+0x1a>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	200003cc 	.word	0x200003cc

0800540c <_lseek_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4d07      	ldr	r5, [pc, #28]	; (800542c <_lseek_r+0x20>)
 8005410:	4604      	mov	r4, r0
 8005412:	4608      	mov	r0, r1
 8005414:	4611      	mov	r1, r2
 8005416:	2200      	movs	r2, #0
 8005418:	602a      	str	r2, [r5, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f7fc f972 	bl	8001704 <_lseek>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_lseek_r+0x1e>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_lseek_r+0x1e>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	200003cc 	.word	0x200003cc

08005430 <_read_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d07      	ldr	r5, [pc, #28]	; (8005450 <_read_r+0x20>)
 8005434:	4604      	mov	r4, r0
 8005436:	4608      	mov	r0, r1
 8005438:	4611      	mov	r1, r2
 800543a:	2200      	movs	r2, #0
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fc f900 	bl	8001644 <_read>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_read_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_read_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200003cc 	.word	0x200003cc

08005454 <_write_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	; (8005474 <_write_r+0x20>)
 8005458:	4604      	mov	r4, r0
 800545a:	4608      	mov	r0, r1
 800545c:	4611      	mov	r1, r2
 800545e:	2200      	movs	r2, #0
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fc f90b 	bl	800167e <_write>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_write_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_write_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200003cc 	.word	0x200003cc

08005478 <__errno>:
 8005478:	4b01      	ldr	r3, [pc, #4]	; (8005480 <__errno+0x8>)
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000064 	.word	0x20000064

08005484 <__libc_init_array>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4d0d      	ldr	r5, [pc, #52]	; (80054bc <__libc_init_array+0x38>)
 8005488:	4c0d      	ldr	r4, [pc, #52]	; (80054c0 <__libc_init_array+0x3c>)
 800548a:	1b64      	subs	r4, r4, r5
 800548c:	10a4      	asrs	r4, r4, #2
 800548e:	2600      	movs	r6, #0
 8005490:	42a6      	cmp	r6, r4
 8005492:	d109      	bne.n	80054a8 <__libc_init_array+0x24>
 8005494:	4d0b      	ldr	r5, [pc, #44]	; (80054c4 <__libc_init_array+0x40>)
 8005496:	4c0c      	ldr	r4, [pc, #48]	; (80054c8 <__libc_init_array+0x44>)
 8005498:	f003 fbd6 	bl	8008c48 <_init>
 800549c:	1b64      	subs	r4, r4, r5
 800549e:	10a4      	asrs	r4, r4, #2
 80054a0:	2600      	movs	r6, #0
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	d105      	bne.n	80054b2 <__libc_init_array+0x2e>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ac:	4798      	blx	r3
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7ee      	b.n	8005490 <__libc_init_array+0xc>
 80054b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b6:	4798      	blx	r3
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7f2      	b.n	80054a2 <__libc_init_array+0x1e>
 80054bc:	080090c8 	.word	0x080090c8
 80054c0:	080090c8 	.word	0x080090c8
 80054c4:	080090c8 	.word	0x080090c8
 80054c8:	080090cc 	.word	0x080090cc

080054cc <__retarget_lock_init_recursive>:
 80054cc:	4770      	bx	lr

080054ce <__retarget_lock_acquire_recursive>:
 80054ce:	4770      	bx	lr

080054d0 <__retarget_lock_release_recursive>:
 80054d0:	4770      	bx	lr
	...

080054d4 <nanf>:
 80054d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80054dc <nanf+0x8>
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	7fc00000 	.word	0x7fc00000

080054e0 <quorem>:
 80054e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	6903      	ldr	r3, [r0, #16]
 80054e6:	690c      	ldr	r4, [r1, #16]
 80054e8:	42a3      	cmp	r3, r4
 80054ea:	4607      	mov	r7, r0
 80054ec:	db7e      	blt.n	80055ec <quorem+0x10c>
 80054ee:	3c01      	subs	r4, #1
 80054f0:	f101 0814 	add.w	r8, r1, #20
 80054f4:	f100 0514 	add.w	r5, r0, #20
 80054f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005506:	3301      	adds	r3, #1
 8005508:	429a      	cmp	r2, r3
 800550a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800550e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005512:	fbb2 f6f3 	udiv	r6, r2, r3
 8005516:	d331      	bcc.n	800557c <quorem+0x9c>
 8005518:	f04f 0e00 	mov.w	lr, #0
 800551c:	4640      	mov	r0, r8
 800551e:	46ac      	mov	ip, r5
 8005520:	46f2      	mov	sl, lr
 8005522:	f850 2b04 	ldr.w	r2, [r0], #4
 8005526:	b293      	uxth	r3, r2
 8005528:	fb06 e303 	mla	r3, r6, r3, lr
 800552c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005530:	0c1a      	lsrs	r2, r3, #16
 8005532:	b29b      	uxth	r3, r3
 8005534:	ebaa 0303 	sub.w	r3, sl, r3
 8005538:	f8dc a000 	ldr.w	sl, [ip]
 800553c:	fa13 f38a 	uxtah	r3, r3, sl
 8005540:	fb06 220e 	mla	r2, r6, lr, r2
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	9b00      	ldr	r3, [sp, #0]
 8005548:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800554c:	b292      	uxth	r2, r2
 800554e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005552:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005556:	f8bd 3000 	ldrh.w	r3, [sp]
 800555a:	4581      	cmp	r9, r0
 800555c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005560:	f84c 3b04 	str.w	r3, [ip], #4
 8005564:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005568:	d2db      	bcs.n	8005522 <quorem+0x42>
 800556a:	f855 300b 	ldr.w	r3, [r5, fp]
 800556e:	b92b      	cbnz	r3, 800557c <quorem+0x9c>
 8005570:	9b01      	ldr	r3, [sp, #4]
 8005572:	3b04      	subs	r3, #4
 8005574:	429d      	cmp	r5, r3
 8005576:	461a      	mov	r2, r3
 8005578:	d32c      	bcc.n	80055d4 <quorem+0xf4>
 800557a:	613c      	str	r4, [r7, #16]
 800557c:	4638      	mov	r0, r7
 800557e:	f001 f9ef 	bl	8006960 <__mcmp>
 8005582:	2800      	cmp	r0, #0
 8005584:	db22      	blt.n	80055cc <quorem+0xec>
 8005586:	3601      	adds	r6, #1
 8005588:	4629      	mov	r1, r5
 800558a:	2000      	movs	r0, #0
 800558c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005590:	f8d1 c000 	ldr.w	ip, [r1]
 8005594:	b293      	uxth	r3, r2
 8005596:	1ac3      	subs	r3, r0, r3
 8005598:	0c12      	lsrs	r2, r2, #16
 800559a:	fa13 f38c 	uxtah	r3, r3, ip
 800559e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80055a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ac:	45c1      	cmp	r9, r8
 80055ae:	f841 3b04 	str.w	r3, [r1], #4
 80055b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055b6:	d2e9      	bcs.n	800558c <quorem+0xac>
 80055b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055c0:	b922      	cbnz	r2, 80055cc <quorem+0xec>
 80055c2:	3b04      	subs	r3, #4
 80055c4:	429d      	cmp	r5, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	d30a      	bcc.n	80055e0 <quorem+0x100>
 80055ca:	613c      	str	r4, [r7, #16]
 80055cc:	4630      	mov	r0, r6
 80055ce:	b003      	add	sp, #12
 80055d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	3b04      	subs	r3, #4
 80055d8:	2a00      	cmp	r2, #0
 80055da:	d1ce      	bne.n	800557a <quorem+0x9a>
 80055dc:	3c01      	subs	r4, #1
 80055de:	e7c9      	b.n	8005574 <quorem+0x94>
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	3b04      	subs	r3, #4
 80055e4:	2a00      	cmp	r2, #0
 80055e6:	d1f0      	bne.n	80055ca <quorem+0xea>
 80055e8:	3c01      	subs	r4, #1
 80055ea:	e7eb      	b.n	80055c4 <quorem+0xe4>
 80055ec:	2000      	movs	r0, #0
 80055ee:	e7ee      	b.n	80055ce <quorem+0xee>

080055f0 <_dtoa_r>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	ed2d 8b04 	vpush	{d8-d9}
 80055f8:	69c5      	ldr	r5, [r0, #28]
 80055fa:	b093      	sub	sp, #76	; 0x4c
 80055fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005600:	ec57 6b10 	vmov	r6, r7, d0
 8005604:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005608:	9107      	str	r1, [sp, #28]
 800560a:	4604      	mov	r4, r0
 800560c:	920a      	str	r2, [sp, #40]	; 0x28
 800560e:	930d      	str	r3, [sp, #52]	; 0x34
 8005610:	b975      	cbnz	r5, 8005630 <_dtoa_r+0x40>
 8005612:	2010      	movs	r0, #16
 8005614:	f000 fe2a 	bl	800626c <malloc>
 8005618:	4602      	mov	r2, r0
 800561a:	61e0      	str	r0, [r4, #28]
 800561c:	b920      	cbnz	r0, 8005628 <_dtoa_r+0x38>
 800561e:	4bae      	ldr	r3, [pc, #696]	; (80058d8 <_dtoa_r+0x2e8>)
 8005620:	21ef      	movs	r1, #239	; 0xef
 8005622:	48ae      	ldr	r0, [pc, #696]	; (80058dc <_dtoa_r+0x2ec>)
 8005624:	f002 fc74 	bl	8007f10 <__assert_func>
 8005628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800562c:	6005      	str	r5, [r0, #0]
 800562e:	60c5      	str	r5, [r0, #12]
 8005630:	69e3      	ldr	r3, [r4, #28]
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	b151      	cbz	r1, 800564c <_dtoa_r+0x5c>
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	604a      	str	r2, [r1, #4]
 800563a:	2301      	movs	r3, #1
 800563c:	4093      	lsls	r3, r2
 800563e:	608b      	str	r3, [r1, #8]
 8005640:	4620      	mov	r0, r4
 8005642:	f000 ff07 	bl	8006454 <_Bfree>
 8005646:	69e3      	ldr	r3, [r4, #28]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	1e3b      	subs	r3, r7, #0
 800564e:	bfbb      	ittet	lt
 8005650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005654:	9303      	strlt	r3, [sp, #12]
 8005656:	2300      	movge	r3, #0
 8005658:	2201      	movlt	r2, #1
 800565a:	bfac      	ite	ge
 800565c:	f8c8 3000 	strge.w	r3, [r8]
 8005660:	f8c8 2000 	strlt.w	r2, [r8]
 8005664:	4b9e      	ldr	r3, [pc, #632]	; (80058e0 <_dtoa_r+0x2f0>)
 8005666:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800566a:	ea33 0308 	bics.w	r3, r3, r8
 800566e:	d11b      	bne.n	80056a8 <_dtoa_r+0xb8>
 8005670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005672:	f242 730f 	movw	r3, #9999	; 0x270f
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800567c:	4333      	orrs	r3, r6
 800567e:	f000 8593 	beq.w	80061a8 <_dtoa_r+0xbb8>
 8005682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005684:	b963      	cbnz	r3, 80056a0 <_dtoa_r+0xb0>
 8005686:	4b97      	ldr	r3, [pc, #604]	; (80058e4 <_dtoa_r+0x2f4>)
 8005688:	e027      	b.n	80056da <_dtoa_r+0xea>
 800568a:	4b97      	ldr	r3, [pc, #604]	; (80058e8 <_dtoa_r+0x2f8>)
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	9800      	ldr	r0, [sp, #0]
 8005696:	b013      	add	sp, #76	; 0x4c
 8005698:	ecbd 8b04 	vpop	{d8-d9}
 800569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a0:	4b90      	ldr	r3, [pc, #576]	; (80058e4 <_dtoa_r+0x2f4>)
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	3303      	adds	r3, #3
 80056a6:	e7f3      	b.n	8005690 <_dtoa_r+0xa0>
 80056a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	ec51 0b17 	vmov	r0, r1, d7
 80056b2:	eeb0 8a47 	vmov.f32	s16, s14
 80056b6:	eef0 8a67 	vmov.f32	s17, s15
 80056ba:	2300      	movs	r3, #0
 80056bc:	f7fb fa24 	bl	8000b08 <__aeabi_dcmpeq>
 80056c0:	4681      	mov	r9, r0
 80056c2:	b160      	cbz	r0, 80056de <_dtoa_r+0xee>
 80056c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056c6:	2301      	movs	r3, #1
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8568 	beq.w	80061a2 <_dtoa_r+0xbb2>
 80056d2:	4b86      	ldr	r3, [pc, #536]	; (80058ec <_dtoa_r+0x2fc>)
 80056d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	3b01      	subs	r3, #1
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	e7da      	b.n	8005694 <_dtoa_r+0xa4>
 80056de:	aa10      	add	r2, sp, #64	; 0x40
 80056e0:	a911      	add	r1, sp, #68	; 0x44
 80056e2:	4620      	mov	r0, r4
 80056e4:	eeb0 0a48 	vmov.f32	s0, s16
 80056e8:	eef0 0a68 	vmov.f32	s1, s17
 80056ec:	f001 fa4e 	bl	8006b8c <__d2b>
 80056f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80056f4:	4682      	mov	sl, r0
 80056f6:	2d00      	cmp	r5, #0
 80056f8:	d07f      	beq.n	80057fa <_dtoa_r+0x20a>
 80056fa:	ee18 3a90 	vmov	r3, s17
 80056fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005702:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005706:	ec51 0b18 	vmov	r0, r1, d8
 800570a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800570e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005712:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005716:	4619      	mov	r1, r3
 8005718:	2200      	movs	r2, #0
 800571a:	4b75      	ldr	r3, [pc, #468]	; (80058f0 <_dtoa_r+0x300>)
 800571c:	f7fa fdd4 	bl	80002c8 <__aeabi_dsub>
 8005720:	a367      	add	r3, pc, #412	; (adr r3, 80058c0 <_dtoa_r+0x2d0>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa ff87 	bl	8000638 <__aeabi_dmul>
 800572a:	a367      	add	r3, pc, #412	; (adr r3, 80058c8 <_dtoa_r+0x2d8>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f7fa fdcc 	bl	80002cc <__adddf3>
 8005734:	4606      	mov	r6, r0
 8005736:	4628      	mov	r0, r5
 8005738:	460f      	mov	r7, r1
 800573a:	f7fa ff13 	bl	8000564 <__aeabi_i2d>
 800573e:	a364      	add	r3, pc, #400	; (adr r3, 80058d0 <_dtoa_r+0x2e0>)
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f7fa ff78 	bl	8000638 <__aeabi_dmul>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4630      	mov	r0, r6
 800574e:	4639      	mov	r1, r7
 8005750:	f7fa fdbc 	bl	80002cc <__adddf3>
 8005754:	4606      	mov	r6, r0
 8005756:	460f      	mov	r7, r1
 8005758:	f7fb fa1e 	bl	8000b98 <__aeabi_d2iz>
 800575c:	2200      	movs	r2, #0
 800575e:	4683      	mov	fp, r0
 8005760:	2300      	movs	r3, #0
 8005762:	4630      	mov	r0, r6
 8005764:	4639      	mov	r1, r7
 8005766:	f7fb f9d9 	bl	8000b1c <__aeabi_dcmplt>
 800576a:	b148      	cbz	r0, 8005780 <_dtoa_r+0x190>
 800576c:	4658      	mov	r0, fp
 800576e:	f7fa fef9 	bl	8000564 <__aeabi_i2d>
 8005772:	4632      	mov	r2, r6
 8005774:	463b      	mov	r3, r7
 8005776:	f7fb f9c7 	bl	8000b08 <__aeabi_dcmpeq>
 800577a:	b908      	cbnz	r0, 8005780 <_dtoa_r+0x190>
 800577c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005780:	f1bb 0f16 	cmp.w	fp, #22
 8005784:	d857      	bhi.n	8005836 <_dtoa_r+0x246>
 8005786:	4b5b      	ldr	r3, [pc, #364]	; (80058f4 <_dtoa_r+0x304>)
 8005788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	ec51 0b18 	vmov	r0, r1, d8
 8005794:	f7fb f9c2 	bl	8000b1c <__aeabi_dcmplt>
 8005798:	2800      	cmp	r0, #0
 800579a:	d04e      	beq.n	800583a <_dtoa_r+0x24a>
 800579c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057a0:	2300      	movs	r3, #0
 80057a2:	930c      	str	r3, [sp, #48]	; 0x30
 80057a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057a6:	1b5b      	subs	r3, r3, r5
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	bf45      	ittet	mi
 80057ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80057b0:	9305      	strmi	r3, [sp, #20]
 80057b2:	2300      	movpl	r3, #0
 80057b4:	2300      	movmi	r3, #0
 80057b6:	9206      	str	r2, [sp, #24]
 80057b8:	bf54      	ite	pl
 80057ba:	9305      	strpl	r3, [sp, #20]
 80057bc:	9306      	strmi	r3, [sp, #24]
 80057be:	f1bb 0f00 	cmp.w	fp, #0
 80057c2:	db3c      	blt.n	800583e <_dtoa_r+0x24e>
 80057c4:	9b06      	ldr	r3, [sp, #24]
 80057c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80057ca:	445b      	add	r3, fp
 80057cc:	9306      	str	r3, [sp, #24]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9308      	str	r3, [sp, #32]
 80057d2:	9b07      	ldr	r3, [sp, #28]
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	d868      	bhi.n	80058aa <_dtoa_r+0x2ba>
 80057d8:	2b05      	cmp	r3, #5
 80057da:	bfc4      	itt	gt
 80057dc:	3b04      	subgt	r3, #4
 80057de:	9307      	strgt	r3, [sp, #28]
 80057e0:	9b07      	ldr	r3, [sp, #28]
 80057e2:	f1a3 0302 	sub.w	r3, r3, #2
 80057e6:	bfcc      	ite	gt
 80057e8:	2500      	movgt	r5, #0
 80057ea:	2501      	movle	r5, #1
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	f200 8085 	bhi.w	80058fc <_dtoa_r+0x30c>
 80057f2:	e8df f003 	tbb	[pc, r3]
 80057f6:	3b2e      	.short	0x3b2e
 80057f8:	5839      	.short	0x5839
 80057fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80057fe:	441d      	add	r5, r3
 8005800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005804:	2b20      	cmp	r3, #32
 8005806:	bfc1      	itttt	gt
 8005808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800580c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005810:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005814:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005818:	bfd6      	itet	le
 800581a:	f1c3 0320 	rsble	r3, r3, #32
 800581e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005822:	fa06 f003 	lslle.w	r0, r6, r3
 8005826:	f7fa fe8d 	bl	8000544 <__aeabi_ui2d>
 800582a:	2201      	movs	r2, #1
 800582c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005830:	3d01      	subs	r5, #1
 8005832:	920e      	str	r2, [sp, #56]	; 0x38
 8005834:	e76f      	b.n	8005716 <_dtoa_r+0x126>
 8005836:	2301      	movs	r3, #1
 8005838:	e7b3      	b.n	80057a2 <_dtoa_r+0x1b2>
 800583a:	900c      	str	r0, [sp, #48]	; 0x30
 800583c:	e7b2      	b.n	80057a4 <_dtoa_r+0x1b4>
 800583e:	9b05      	ldr	r3, [sp, #20]
 8005840:	eba3 030b 	sub.w	r3, r3, fp
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	f1cb 0300 	rsb	r3, fp, #0
 800584a:	9308      	str	r3, [sp, #32]
 800584c:	2300      	movs	r3, #0
 800584e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005850:	e7bf      	b.n	80057d2 <_dtoa_r+0x1e2>
 8005852:	2300      	movs	r3, #0
 8005854:	9309      	str	r3, [sp, #36]	; 0x24
 8005856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005858:	2b00      	cmp	r3, #0
 800585a:	dc52      	bgt.n	8005902 <_dtoa_r+0x312>
 800585c:	2301      	movs	r3, #1
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	461a      	mov	r2, r3
 8005864:	920a      	str	r2, [sp, #40]	; 0x28
 8005866:	e00b      	b.n	8005880 <_dtoa_r+0x290>
 8005868:	2301      	movs	r3, #1
 800586a:	e7f3      	b.n	8005854 <_dtoa_r+0x264>
 800586c:	2300      	movs	r3, #0
 800586e:	9309      	str	r3, [sp, #36]	; 0x24
 8005870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005872:	445b      	add	r3, fp
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	3301      	adds	r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	bfb8      	it	lt
 800587e:	2301      	movlt	r3, #1
 8005880:	69e0      	ldr	r0, [r4, #28]
 8005882:	2100      	movs	r1, #0
 8005884:	2204      	movs	r2, #4
 8005886:	f102 0614 	add.w	r6, r2, #20
 800588a:	429e      	cmp	r6, r3
 800588c:	d93d      	bls.n	800590a <_dtoa_r+0x31a>
 800588e:	6041      	str	r1, [r0, #4]
 8005890:	4620      	mov	r0, r4
 8005892:	f000 fd9f 	bl	80063d4 <_Balloc>
 8005896:	9000      	str	r0, [sp, #0]
 8005898:	2800      	cmp	r0, #0
 800589a:	d139      	bne.n	8005910 <_dtoa_r+0x320>
 800589c:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <_dtoa_r+0x308>)
 800589e:	4602      	mov	r2, r0
 80058a0:	f240 11af 	movw	r1, #431	; 0x1af
 80058a4:	e6bd      	b.n	8005622 <_dtoa_r+0x32>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e7e1      	b.n	800586e <_dtoa_r+0x27e>
 80058aa:	2501      	movs	r5, #1
 80058ac:	2300      	movs	r3, #0
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	9509      	str	r5, [sp, #36]	; 0x24
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	9304      	str	r3, [sp, #16]
 80058ba:	2200      	movs	r2, #0
 80058bc:	2312      	movs	r3, #18
 80058be:	e7d1      	b.n	8005864 <_dtoa_r+0x274>
 80058c0:	636f4361 	.word	0x636f4361
 80058c4:	3fd287a7 	.word	0x3fd287a7
 80058c8:	8b60c8b3 	.word	0x8b60c8b3
 80058cc:	3fc68a28 	.word	0x3fc68a28
 80058d0:	509f79fb 	.word	0x509f79fb
 80058d4:	3fd34413 	.word	0x3fd34413
 80058d8:	08008cda 	.word	0x08008cda
 80058dc:	08008cf1 	.word	0x08008cf1
 80058e0:	7ff00000 	.word	0x7ff00000
 80058e4:	08008cd6 	.word	0x08008cd6
 80058e8:	08008ccd 	.word	0x08008ccd
 80058ec:	08008ca5 	.word	0x08008ca5
 80058f0:	3ff80000 	.word	0x3ff80000
 80058f4:	08008de0 	.word	0x08008de0
 80058f8:	08008d49 	.word	0x08008d49
 80058fc:	2301      	movs	r3, #1
 80058fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005900:	e7d7      	b.n	80058b2 <_dtoa_r+0x2c2>
 8005902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	9304      	str	r3, [sp, #16]
 8005908:	e7ba      	b.n	8005880 <_dtoa_r+0x290>
 800590a:	3101      	adds	r1, #1
 800590c:	0052      	lsls	r2, r2, #1
 800590e:	e7ba      	b.n	8005886 <_dtoa_r+0x296>
 8005910:	69e3      	ldr	r3, [r4, #28]
 8005912:	9a00      	ldr	r2, [sp, #0]
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	9b04      	ldr	r3, [sp, #16]
 8005918:	2b0e      	cmp	r3, #14
 800591a:	f200 80a8 	bhi.w	8005a6e <_dtoa_r+0x47e>
 800591e:	2d00      	cmp	r5, #0
 8005920:	f000 80a5 	beq.w	8005a6e <_dtoa_r+0x47e>
 8005924:	f1bb 0f00 	cmp.w	fp, #0
 8005928:	dd38      	ble.n	800599c <_dtoa_r+0x3ac>
 800592a:	4bc0      	ldr	r3, [pc, #768]	; (8005c2c <_dtoa_r+0x63c>)
 800592c:	f00b 020f 	and.w	r2, fp, #15
 8005930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005934:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005938:	e9d3 6700 	ldrd	r6, r7, [r3]
 800593c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005940:	d019      	beq.n	8005976 <_dtoa_r+0x386>
 8005942:	4bbb      	ldr	r3, [pc, #748]	; (8005c30 <_dtoa_r+0x640>)
 8005944:	ec51 0b18 	vmov	r0, r1, d8
 8005948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800594c:	f7fa ff9e 	bl	800088c <__aeabi_ddiv>
 8005950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005954:	f008 080f 	and.w	r8, r8, #15
 8005958:	2503      	movs	r5, #3
 800595a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005c30 <_dtoa_r+0x640>
 800595e:	f1b8 0f00 	cmp.w	r8, #0
 8005962:	d10a      	bne.n	800597a <_dtoa_r+0x38a>
 8005964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005968:	4632      	mov	r2, r6
 800596a:	463b      	mov	r3, r7
 800596c:	f7fa ff8e 	bl	800088c <__aeabi_ddiv>
 8005970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005974:	e02b      	b.n	80059ce <_dtoa_r+0x3de>
 8005976:	2502      	movs	r5, #2
 8005978:	e7ef      	b.n	800595a <_dtoa_r+0x36a>
 800597a:	f018 0f01 	tst.w	r8, #1
 800597e:	d008      	beq.n	8005992 <_dtoa_r+0x3a2>
 8005980:	4630      	mov	r0, r6
 8005982:	4639      	mov	r1, r7
 8005984:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005988:	f7fa fe56 	bl	8000638 <__aeabi_dmul>
 800598c:	3501      	adds	r5, #1
 800598e:	4606      	mov	r6, r0
 8005990:	460f      	mov	r7, r1
 8005992:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005996:	f109 0908 	add.w	r9, r9, #8
 800599a:	e7e0      	b.n	800595e <_dtoa_r+0x36e>
 800599c:	f000 809f 	beq.w	8005ade <_dtoa_r+0x4ee>
 80059a0:	f1cb 0600 	rsb	r6, fp, #0
 80059a4:	4ba1      	ldr	r3, [pc, #644]	; (8005c2c <_dtoa_r+0x63c>)
 80059a6:	4fa2      	ldr	r7, [pc, #648]	; (8005c30 <_dtoa_r+0x640>)
 80059a8:	f006 020f 	and.w	r2, r6, #15
 80059ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	ec51 0b18 	vmov	r0, r1, d8
 80059b8:	f7fa fe3e 	bl	8000638 <__aeabi_dmul>
 80059bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059c0:	1136      	asrs	r6, r6, #4
 80059c2:	2300      	movs	r3, #0
 80059c4:	2502      	movs	r5, #2
 80059c6:	2e00      	cmp	r6, #0
 80059c8:	d17e      	bne.n	8005ac8 <_dtoa_r+0x4d8>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1d0      	bne.n	8005970 <_dtoa_r+0x380>
 80059ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8084 	beq.w	8005ae2 <_dtoa_r+0x4f2>
 80059da:	4b96      	ldr	r3, [pc, #600]	; (8005c34 <_dtoa_r+0x644>)
 80059dc:	2200      	movs	r2, #0
 80059de:	4640      	mov	r0, r8
 80059e0:	4649      	mov	r1, r9
 80059e2:	f7fb f89b 	bl	8000b1c <__aeabi_dcmplt>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d07b      	beq.n	8005ae2 <_dtoa_r+0x4f2>
 80059ea:	9b04      	ldr	r3, [sp, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d078      	beq.n	8005ae2 <_dtoa_r+0x4f2>
 80059f0:	9b01      	ldr	r3, [sp, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	dd39      	ble.n	8005a6a <_dtoa_r+0x47a>
 80059f6:	4b90      	ldr	r3, [pc, #576]	; (8005c38 <_dtoa_r+0x648>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	4640      	mov	r0, r8
 80059fc:	4649      	mov	r1, r9
 80059fe:	f7fa fe1b 	bl	8000638 <__aeabi_dmul>
 8005a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a06:	9e01      	ldr	r6, [sp, #4]
 8005a08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005a0c:	3501      	adds	r5, #1
 8005a0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7fa fda6 	bl	8000564 <__aeabi_i2d>
 8005a18:	4642      	mov	r2, r8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	f7fa fe0c 	bl	8000638 <__aeabi_dmul>
 8005a20:	4b86      	ldr	r3, [pc, #536]	; (8005c3c <_dtoa_r+0x64c>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	f7fa fc52 	bl	80002cc <__adddf3>
 8005a28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a30:	9303      	str	r3, [sp, #12]
 8005a32:	2e00      	cmp	r6, #0
 8005a34:	d158      	bne.n	8005ae8 <_dtoa_r+0x4f8>
 8005a36:	4b82      	ldr	r3, [pc, #520]	; (8005c40 <_dtoa_r+0x650>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	f7fa fc43 	bl	80002c8 <__aeabi_dsub>
 8005a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a46:	4680      	mov	r8, r0
 8005a48:	4689      	mov	r9, r1
 8005a4a:	f7fb f885 	bl	8000b58 <__aeabi_dcmpgt>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f040 8296 	bne.w	8005f80 <_dtoa_r+0x990>
 8005a54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005a58:	4640      	mov	r0, r8
 8005a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a5e:	4649      	mov	r1, r9
 8005a60:	f7fb f85c 	bl	8000b1c <__aeabi_dcmplt>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f040 8289 	bne.w	8005f7c <_dtoa_r+0x98c>
 8005a6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f2c0 814e 	blt.w	8005d12 <_dtoa_r+0x722>
 8005a76:	f1bb 0f0e 	cmp.w	fp, #14
 8005a7a:	f300 814a 	bgt.w	8005d12 <_dtoa_r+0x722>
 8005a7e:	4b6b      	ldr	r3, [pc, #428]	; (8005c2c <_dtoa_r+0x63c>)
 8005a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f280 80dc 	bge.w	8005c48 <_dtoa_r+0x658>
 8005a90:	9b04      	ldr	r3, [sp, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f300 80d8 	bgt.w	8005c48 <_dtoa_r+0x658>
 8005a98:	f040 826f 	bne.w	8005f7a <_dtoa_r+0x98a>
 8005a9c:	4b68      	ldr	r3, [pc, #416]	; (8005c40 <_dtoa_r+0x650>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	f7fa fdc8 	bl	8000638 <__aeabi_dmul>
 8005aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aac:	f7fb f84a 	bl	8000b44 <__aeabi_dcmpge>
 8005ab0:	9e04      	ldr	r6, [sp, #16]
 8005ab2:	4637      	mov	r7, r6
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f040 8245 	bne.w	8005f44 <_dtoa_r+0x954>
 8005aba:	9d00      	ldr	r5, [sp, #0]
 8005abc:	2331      	movs	r3, #49	; 0x31
 8005abe:	f805 3b01 	strb.w	r3, [r5], #1
 8005ac2:	f10b 0b01 	add.w	fp, fp, #1
 8005ac6:	e241      	b.n	8005f4c <_dtoa_r+0x95c>
 8005ac8:	07f2      	lsls	r2, r6, #31
 8005aca:	d505      	bpl.n	8005ad8 <_dtoa_r+0x4e8>
 8005acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad0:	f7fa fdb2 	bl	8000638 <__aeabi_dmul>
 8005ad4:	3501      	adds	r5, #1
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	1076      	asrs	r6, r6, #1
 8005ada:	3708      	adds	r7, #8
 8005adc:	e773      	b.n	80059c6 <_dtoa_r+0x3d6>
 8005ade:	2502      	movs	r5, #2
 8005ae0:	e775      	b.n	80059ce <_dtoa_r+0x3de>
 8005ae2:	9e04      	ldr	r6, [sp, #16]
 8005ae4:	465f      	mov	r7, fp
 8005ae6:	e792      	b.n	8005a0e <_dtoa_r+0x41e>
 8005ae8:	9900      	ldr	r1, [sp, #0]
 8005aea:	4b50      	ldr	r3, [pc, #320]	; (8005c2c <_dtoa_r+0x63c>)
 8005aec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005af0:	4431      	add	r1, r6
 8005af2:	9102      	str	r1, [sp, #8]
 8005af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005af6:	eeb0 9a47 	vmov.f32	s18, s14
 8005afa:	eef0 9a67 	vmov.f32	s19, s15
 8005afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d044      	beq.n	8005b94 <_dtoa_r+0x5a4>
 8005b0a:	494e      	ldr	r1, [pc, #312]	; (8005c44 <_dtoa_r+0x654>)
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f7fa febd 	bl	800088c <__aeabi_ddiv>
 8005b12:	ec53 2b19 	vmov	r2, r3, d9
 8005b16:	f7fa fbd7 	bl	80002c8 <__aeabi_dsub>
 8005b1a:	9d00      	ldr	r5, [sp, #0]
 8005b1c:	ec41 0b19 	vmov	d9, r0, r1
 8005b20:	4649      	mov	r1, r9
 8005b22:	4640      	mov	r0, r8
 8005b24:	f7fb f838 	bl	8000b98 <__aeabi_d2iz>
 8005b28:	4606      	mov	r6, r0
 8005b2a:	f7fa fd1b 	bl	8000564 <__aeabi_i2d>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f7fa fbc7 	bl	80002c8 <__aeabi_dsub>
 8005b3a:	3630      	adds	r6, #48	; 0x30
 8005b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b40:	ec53 2b19 	vmov	r2, r3, d9
 8005b44:	4680      	mov	r8, r0
 8005b46:	4689      	mov	r9, r1
 8005b48:	f7fa ffe8 	bl	8000b1c <__aeabi_dcmplt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d164      	bne.n	8005c1a <_dtoa_r+0x62a>
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	4937      	ldr	r1, [pc, #220]	; (8005c34 <_dtoa_r+0x644>)
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7fa fbb6 	bl	80002c8 <__aeabi_dsub>
 8005b5c:	ec53 2b19 	vmov	r2, r3, d9
 8005b60:	f7fa ffdc 	bl	8000b1c <__aeabi_dcmplt>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f040 80b6 	bne.w	8005cd6 <_dtoa_r+0x6e6>
 8005b6a:	9b02      	ldr	r3, [sp, #8]
 8005b6c:	429d      	cmp	r5, r3
 8005b6e:	f43f af7c 	beq.w	8005a6a <_dtoa_r+0x47a>
 8005b72:	4b31      	ldr	r3, [pc, #196]	; (8005c38 <_dtoa_r+0x648>)
 8005b74:	ec51 0b19 	vmov	r0, r1, d9
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f7fa fd5d 	bl	8000638 <__aeabi_dmul>
 8005b7e:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <_dtoa_r+0x648>)
 8005b80:	ec41 0b19 	vmov	d9, r0, r1
 8005b84:	2200      	movs	r2, #0
 8005b86:	4640      	mov	r0, r8
 8005b88:	4649      	mov	r1, r9
 8005b8a:	f7fa fd55 	bl	8000638 <__aeabi_dmul>
 8005b8e:	4680      	mov	r8, r0
 8005b90:	4689      	mov	r9, r1
 8005b92:	e7c5      	b.n	8005b20 <_dtoa_r+0x530>
 8005b94:	ec51 0b17 	vmov	r0, r1, d7
 8005b98:	f7fa fd4e 	bl	8000638 <__aeabi_dmul>
 8005b9c:	9b02      	ldr	r3, [sp, #8]
 8005b9e:	9d00      	ldr	r5, [sp, #0]
 8005ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ba2:	ec41 0b19 	vmov	d9, r0, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	f7fa fff5 	bl	8000b98 <__aeabi_d2iz>
 8005bae:	4606      	mov	r6, r0
 8005bb0:	f7fa fcd8 	bl	8000564 <__aeabi_i2d>
 8005bb4:	3630      	adds	r6, #48	; 0x30
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4640      	mov	r0, r8
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	f7fa fb83 	bl	80002c8 <__aeabi_dsub>
 8005bc2:	f805 6b01 	strb.w	r6, [r5], #1
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	429d      	cmp	r5, r3
 8005bca:	4680      	mov	r8, r0
 8005bcc:	4689      	mov	r9, r1
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	d124      	bne.n	8005c1e <_dtoa_r+0x62e>
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <_dtoa_r+0x654>)
 8005bd6:	ec51 0b19 	vmov	r0, r1, d9
 8005bda:	f7fa fb77 	bl	80002cc <__adddf3>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4640      	mov	r0, r8
 8005be4:	4649      	mov	r1, r9
 8005be6:	f7fa ffb7 	bl	8000b58 <__aeabi_dcmpgt>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d173      	bne.n	8005cd6 <_dtoa_r+0x6e6>
 8005bee:	ec53 2b19 	vmov	r2, r3, d9
 8005bf2:	4914      	ldr	r1, [pc, #80]	; (8005c44 <_dtoa_r+0x654>)
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f7fa fb67 	bl	80002c8 <__aeabi_dsub>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4640      	mov	r0, r8
 8005c00:	4649      	mov	r1, r9
 8005c02:	f7fa ff8b 	bl	8000b1c <__aeabi_dcmplt>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	f43f af2f 	beq.w	8005a6a <_dtoa_r+0x47a>
 8005c0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c0e:	1e6b      	subs	r3, r5, #1
 8005c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c16:	2b30      	cmp	r3, #48	; 0x30
 8005c18:	d0f8      	beq.n	8005c0c <_dtoa_r+0x61c>
 8005c1a:	46bb      	mov	fp, r7
 8005c1c:	e04a      	b.n	8005cb4 <_dtoa_r+0x6c4>
 8005c1e:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <_dtoa_r+0x648>)
 8005c20:	f7fa fd0a 	bl	8000638 <__aeabi_dmul>
 8005c24:	4680      	mov	r8, r0
 8005c26:	4689      	mov	r9, r1
 8005c28:	e7bd      	b.n	8005ba6 <_dtoa_r+0x5b6>
 8005c2a:	bf00      	nop
 8005c2c:	08008de0 	.word	0x08008de0
 8005c30:	08008db8 	.word	0x08008db8
 8005c34:	3ff00000 	.word	0x3ff00000
 8005c38:	40240000 	.word	0x40240000
 8005c3c:	401c0000 	.word	0x401c0000
 8005c40:	40140000 	.word	0x40140000
 8005c44:	3fe00000 	.word	0x3fe00000
 8005c48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c4c:	9d00      	ldr	r5, [sp, #0]
 8005c4e:	4642      	mov	r2, r8
 8005c50:	464b      	mov	r3, r9
 8005c52:	4630      	mov	r0, r6
 8005c54:	4639      	mov	r1, r7
 8005c56:	f7fa fe19 	bl	800088c <__aeabi_ddiv>
 8005c5a:	f7fa ff9d 	bl	8000b98 <__aeabi_d2iz>
 8005c5e:	9001      	str	r0, [sp, #4]
 8005c60:	f7fa fc80 	bl	8000564 <__aeabi_i2d>
 8005c64:	4642      	mov	r2, r8
 8005c66:	464b      	mov	r3, r9
 8005c68:	f7fa fce6 	bl	8000638 <__aeabi_dmul>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4630      	mov	r0, r6
 8005c72:	4639      	mov	r1, r7
 8005c74:	f7fa fb28 	bl	80002c8 <__aeabi_dsub>
 8005c78:	9e01      	ldr	r6, [sp, #4]
 8005c7a:	9f04      	ldr	r7, [sp, #16]
 8005c7c:	3630      	adds	r6, #48	; 0x30
 8005c7e:	f805 6b01 	strb.w	r6, [r5], #1
 8005c82:	9e00      	ldr	r6, [sp, #0]
 8005c84:	1bae      	subs	r6, r5, r6
 8005c86:	42b7      	cmp	r7, r6
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	d134      	bne.n	8005cf8 <_dtoa_r+0x708>
 8005c8e:	f7fa fb1d 	bl	80002cc <__adddf3>
 8005c92:	4642      	mov	r2, r8
 8005c94:	464b      	mov	r3, r9
 8005c96:	4606      	mov	r6, r0
 8005c98:	460f      	mov	r7, r1
 8005c9a:	f7fa ff5d 	bl	8000b58 <__aeabi_dcmpgt>
 8005c9e:	b9c8      	cbnz	r0, 8005cd4 <_dtoa_r+0x6e4>
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	f7fa ff2e 	bl	8000b08 <__aeabi_dcmpeq>
 8005cac:	b110      	cbz	r0, 8005cb4 <_dtoa_r+0x6c4>
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	07db      	lsls	r3, r3, #31
 8005cb2:	d40f      	bmi.n	8005cd4 <_dtoa_r+0x6e4>
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 fbcc 	bl	8006454 <_Bfree>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cc0:	702b      	strb	r3, [r5, #0]
 8005cc2:	f10b 0301 	add.w	r3, fp, #1
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f43f ace2 	beq.w	8005694 <_dtoa_r+0xa4>
 8005cd0:	601d      	str	r5, [r3, #0]
 8005cd2:	e4df      	b.n	8005694 <_dtoa_r+0xa4>
 8005cd4:	465f      	mov	r7, fp
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	461d      	mov	r5, r3
 8005cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cde:	2a39      	cmp	r2, #57	; 0x39
 8005ce0:	d106      	bne.n	8005cf0 <_dtoa_r+0x700>
 8005ce2:	9a00      	ldr	r2, [sp, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d1f7      	bne.n	8005cd8 <_dtoa_r+0x6e8>
 8005ce8:	9900      	ldr	r1, [sp, #0]
 8005cea:	2230      	movs	r2, #48	; 0x30
 8005cec:	3701      	adds	r7, #1
 8005cee:	700a      	strb	r2, [r1, #0]
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	3201      	adds	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e790      	b.n	8005c1a <_dtoa_r+0x62a>
 8005cf8:	4ba3      	ldr	r3, [pc, #652]	; (8005f88 <_dtoa_r+0x998>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f7fa fc9c 	bl	8000638 <__aeabi_dmul>
 8005d00:	2200      	movs	r2, #0
 8005d02:	2300      	movs	r3, #0
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	f7fa fefe 	bl	8000b08 <__aeabi_dcmpeq>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d09e      	beq.n	8005c4e <_dtoa_r+0x65e>
 8005d10:	e7d0      	b.n	8005cb4 <_dtoa_r+0x6c4>
 8005d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	f000 80ca 	beq.w	8005eae <_dtoa_r+0x8be>
 8005d1a:	9a07      	ldr	r2, [sp, #28]
 8005d1c:	2a01      	cmp	r2, #1
 8005d1e:	f300 80ad 	bgt.w	8005e7c <_dtoa_r+0x88c>
 8005d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f000 80a5 	beq.w	8005e74 <_dtoa_r+0x884>
 8005d2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d2e:	9e08      	ldr	r6, [sp, #32]
 8005d30:	9d05      	ldr	r5, [sp, #20]
 8005d32:	9a05      	ldr	r2, [sp, #20]
 8005d34:	441a      	add	r2, r3
 8005d36:	9205      	str	r2, [sp, #20]
 8005d38:	9a06      	ldr	r2, [sp, #24]
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	441a      	add	r2, r3
 8005d3e:	4620      	mov	r0, r4
 8005d40:	9206      	str	r2, [sp, #24]
 8005d42:	f000 fc87 	bl	8006654 <__i2b>
 8005d46:	4607      	mov	r7, r0
 8005d48:	b165      	cbz	r5, 8005d64 <_dtoa_r+0x774>
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd09      	ble.n	8005d64 <_dtoa_r+0x774>
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	9a05      	ldr	r2, [sp, #20]
 8005d54:	bfa8      	it	ge
 8005d56:	462b      	movge	r3, r5
 8005d58:	1ad2      	subs	r2, r2, r3
 8005d5a:	9205      	str	r2, [sp, #20]
 8005d5c:	9a06      	ldr	r2, [sp, #24]
 8005d5e:	1aed      	subs	r5, r5, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	9306      	str	r3, [sp, #24]
 8005d64:	9b08      	ldr	r3, [sp, #32]
 8005d66:	b1f3      	cbz	r3, 8005da6 <_dtoa_r+0x7b6>
 8005d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80a3 	beq.w	8005eb6 <_dtoa_r+0x8c6>
 8005d70:	2e00      	cmp	r6, #0
 8005d72:	dd10      	ble.n	8005d96 <_dtoa_r+0x7a6>
 8005d74:	4639      	mov	r1, r7
 8005d76:	4632      	mov	r2, r6
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 fd2b 	bl	80067d4 <__pow5mult>
 8005d7e:	4652      	mov	r2, sl
 8005d80:	4601      	mov	r1, r0
 8005d82:	4607      	mov	r7, r0
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fc7b 	bl	8006680 <__multiply>
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 fb60 	bl	8006454 <_Bfree>
 8005d94:	46c2      	mov	sl, r8
 8005d96:	9b08      	ldr	r3, [sp, #32]
 8005d98:	1b9a      	subs	r2, r3, r6
 8005d9a:	d004      	beq.n	8005da6 <_dtoa_r+0x7b6>
 8005d9c:	4651      	mov	r1, sl
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 fd18 	bl	80067d4 <__pow5mult>
 8005da4:	4682      	mov	sl, r0
 8005da6:	2101      	movs	r1, #1
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fc53 	bl	8006654 <__i2b>
 8005dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	4606      	mov	r6, r0
 8005db4:	f340 8081 	ble.w	8005eba <_dtoa_r+0x8ca>
 8005db8:	461a      	mov	r2, r3
 8005dba:	4601      	mov	r1, r0
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 fd09 	bl	80067d4 <__pow5mult>
 8005dc2:	9b07      	ldr	r3, [sp, #28]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	dd7a      	ble.n	8005ec0 <_dtoa_r+0x8d0>
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	6933      	ldr	r3, [r6, #16]
 8005dd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005dd4:	6918      	ldr	r0, [r3, #16]
 8005dd6:	f000 fbef 	bl	80065b8 <__hi0bits>
 8005dda:	f1c0 0020 	rsb	r0, r0, #32
 8005dde:	9b06      	ldr	r3, [sp, #24]
 8005de0:	4418      	add	r0, r3
 8005de2:	f010 001f 	ands.w	r0, r0, #31
 8005de6:	f000 8094 	beq.w	8005f12 <_dtoa_r+0x922>
 8005dea:	f1c0 0320 	rsb	r3, r0, #32
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	f340 8085 	ble.w	8005efe <_dtoa_r+0x90e>
 8005df4:	9b05      	ldr	r3, [sp, #20]
 8005df6:	f1c0 001c 	rsb	r0, r0, #28
 8005dfa:	4403      	add	r3, r0
 8005dfc:	9305      	str	r3, [sp, #20]
 8005dfe:	9b06      	ldr	r3, [sp, #24]
 8005e00:	4403      	add	r3, r0
 8005e02:	4405      	add	r5, r0
 8005e04:	9306      	str	r3, [sp, #24]
 8005e06:	9b05      	ldr	r3, [sp, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dd05      	ble.n	8005e18 <_dtoa_r+0x828>
 8005e0c:	4651      	mov	r1, sl
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fd39 	bl	8006888 <__lshift>
 8005e16:	4682      	mov	sl, r0
 8005e18:	9b06      	ldr	r3, [sp, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dd05      	ble.n	8005e2a <_dtoa_r+0x83a>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	461a      	mov	r2, r3
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 fd30 	bl	8006888 <__lshift>
 8005e28:	4606      	mov	r6, r0
 8005e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d072      	beq.n	8005f16 <_dtoa_r+0x926>
 8005e30:	4631      	mov	r1, r6
 8005e32:	4650      	mov	r0, sl
 8005e34:	f000 fd94 	bl	8006960 <__mcmp>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	da6c      	bge.n	8005f16 <_dtoa_r+0x926>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4651      	mov	r1, sl
 8005e40:	220a      	movs	r2, #10
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 fb28 	bl	8006498 <__multadd>
 8005e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e4e:	4682      	mov	sl, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 81b0 	beq.w	80061b6 <_dtoa_r+0xbc6>
 8005e56:	2300      	movs	r3, #0
 8005e58:	4639      	mov	r1, r7
 8005e5a:	220a      	movs	r2, #10
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 fb1b 	bl	8006498 <__multadd>
 8005e62:	9b01      	ldr	r3, [sp, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	4607      	mov	r7, r0
 8005e68:	f300 8096 	bgt.w	8005f98 <_dtoa_r+0x9a8>
 8005e6c:	9b07      	ldr	r3, [sp, #28]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	dc59      	bgt.n	8005f26 <_dtoa_r+0x936>
 8005e72:	e091      	b.n	8005f98 <_dtoa_r+0x9a8>
 8005e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e7a:	e758      	b.n	8005d2e <_dtoa_r+0x73e>
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	1e5e      	subs	r6, r3, #1
 8005e80:	9b08      	ldr	r3, [sp, #32]
 8005e82:	42b3      	cmp	r3, r6
 8005e84:	bfbf      	itttt	lt
 8005e86:	9b08      	ldrlt	r3, [sp, #32]
 8005e88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005e8a:	9608      	strlt	r6, [sp, #32]
 8005e8c:	1af3      	sublt	r3, r6, r3
 8005e8e:	bfb4      	ite	lt
 8005e90:	18d2      	addlt	r2, r2, r3
 8005e92:	1b9e      	subge	r6, r3, r6
 8005e94:	9b04      	ldr	r3, [sp, #16]
 8005e96:	bfbc      	itt	lt
 8005e98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005e9a:	2600      	movlt	r6, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bfb7      	itett	lt
 8005ea0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005ea4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005ea8:	1a9d      	sublt	r5, r3, r2
 8005eaa:	2300      	movlt	r3, #0
 8005eac:	e741      	b.n	8005d32 <_dtoa_r+0x742>
 8005eae:	9e08      	ldr	r6, [sp, #32]
 8005eb0:	9d05      	ldr	r5, [sp, #20]
 8005eb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005eb4:	e748      	b.n	8005d48 <_dtoa_r+0x758>
 8005eb6:	9a08      	ldr	r2, [sp, #32]
 8005eb8:	e770      	b.n	8005d9c <_dtoa_r+0x7ac>
 8005eba:	9b07      	ldr	r3, [sp, #28]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	dc19      	bgt.n	8005ef4 <_dtoa_r+0x904>
 8005ec0:	9b02      	ldr	r3, [sp, #8]
 8005ec2:	b9bb      	cbnz	r3, 8005ef4 <_dtoa_r+0x904>
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eca:	b99b      	cbnz	r3, 8005ef4 <_dtoa_r+0x904>
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ed2:	0d1b      	lsrs	r3, r3, #20
 8005ed4:	051b      	lsls	r3, r3, #20
 8005ed6:	b183      	cbz	r3, 8005efa <_dtoa_r+0x90a>
 8005ed8:	9b05      	ldr	r3, [sp, #20]
 8005eda:	3301      	adds	r3, #1
 8005edc:	9305      	str	r3, [sp, #20]
 8005ede:	9b06      	ldr	r3, [sp, #24]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	9306      	str	r3, [sp, #24]
 8005ee4:	f04f 0801 	mov.w	r8, #1
 8005ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f47f af6f 	bne.w	8005dce <_dtoa_r+0x7de>
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	e774      	b.n	8005dde <_dtoa_r+0x7ee>
 8005ef4:	f04f 0800 	mov.w	r8, #0
 8005ef8:	e7f6      	b.n	8005ee8 <_dtoa_r+0x8f8>
 8005efa:	4698      	mov	r8, r3
 8005efc:	e7f4      	b.n	8005ee8 <_dtoa_r+0x8f8>
 8005efe:	d082      	beq.n	8005e06 <_dtoa_r+0x816>
 8005f00:	9a05      	ldr	r2, [sp, #20]
 8005f02:	331c      	adds	r3, #28
 8005f04:	441a      	add	r2, r3
 8005f06:	9205      	str	r2, [sp, #20]
 8005f08:	9a06      	ldr	r2, [sp, #24]
 8005f0a:	441a      	add	r2, r3
 8005f0c:	441d      	add	r5, r3
 8005f0e:	9206      	str	r2, [sp, #24]
 8005f10:	e779      	b.n	8005e06 <_dtoa_r+0x816>
 8005f12:	4603      	mov	r3, r0
 8005f14:	e7f4      	b.n	8005f00 <_dtoa_r+0x910>
 8005f16:	9b04      	ldr	r3, [sp, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	dc37      	bgt.n	8005f8c <_dtoa_r+0x99c>
 8005f1c:	9b07      	ldr	r3, [sp, #28]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	dd34      	ble.n	8005f8c <_dtoa_r+0x99c>
 8005f22:	9b04      	ldr	r3, [sp, #16]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	9b01      	ldr	r3, [sp, #4]
 8005f28:	b963      	cbnz	r3, 8005f44 <_dtoa_r+0x954>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f000 fab2 	bl	8006498 <__multadd>
 8005f34:	4601      	mov	r1, r0
 8005f36:	4606      	mov	r6, r0
 8005f38:	4650      	mov	r0, sl
 8005f3a:	f000 fd11 	bl	8006960 <__mcmp>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f73f adbb 	bgt.w	8005aba <_dtoa_r+0x4ca>
 8005f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f46:	9d00      	ldr	r5, [sp, #0]
 8005f48:	ea6f 0b03 	mvn.w	fp, r3
 8005f4c:	f04f 0800 	mov.w	r8, #0
 8005f50:	4631      	mov	r1, r6
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 fa7e 	bl	8006454 <_Bfree>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	f43f aeab 	beq.w	8005cb4 <_dtoa_r+0x6c4>
 8005f5e:	f1b8 0f00 	cmp.w	r8, #0
 8005f62:	d005      	beq.n	8005f70 <_dtoa_r+0x980>
 8005f64:	45b8      	cmp	r8, r7
 8005f66:	d003      	beq.n	8005f70 <_dtoa_r+0x980>
 8005f68:	4641      	mov	r1, r8
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 fa72 	bl	8006454 <_Bfree>
 8005f70:	4639      	mov	r1, r7
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 fa6e 	bl	8006454 <_Bfree>
 8005f78:	e69c      	b.n	8005cb4 <_dtoa_r+0x6c4>
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	4637      	mov	r7, r6
 8005f7e:	e7e1      	b.n	8005f44 <_dtoa_r+0x954>
 8005f80:	46bb      	mov	fp, r7
 8005f82:	4637      	mov	r7, r6
 8005f84:	e599      	b.n	8005aba <_dtoa_r+0x4ca>
 8005f86:	bf00      	nop
 8005f88:	40240000 	.word	0x40240000
 8005f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 80c8 	beq.w	8006124 <_dtoa_r+0xb34>
 8005f94:	9b04      	ldr	r3, [sp, #16]
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	dd05      	ble.n	8005fa8 <_dtoa_r+0x9b8>
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fc71 	bl	8006888 <__lshift>
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	f1b8 0f00 	cmp.w	r8, #0
 8005fac:	d05b      	beq.n	8006066 <_dtoa_r+0xa76>
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 fa0f 	bl	80063d4 <_Balloc>
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <_dtoa_r+0x9d6>
 8005fba:	4b83      	ldr	r3, [pc, #524]	; (80061c8 <_dtoa_r+0xbd8>)
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005fc2:	f7ff bb2e 	b.w	8005622 <_dtoa_r+0x32>
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	3202      	adds	r2, #2
 8005fca:	0092      	lsls	r2, r2, #2
 8005fcc:	f107 010c 	add.w	r1, r7, #12
 8005fd0:	300c      	adds	r0, #12
 8005fd2:	f001 ff85 	bl	8007ee0 <memcpy>
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fc54 	bl	8006888 <__lshift>
 8005fe0:	9b00      	ldr	r3, [sp, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fea:	4413      	add	r3, r2
 8005fec:	9308      	str	r3, [sp, #32]
 8005fee:	9b02      	ldr	r3, [sp, #8]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	46b8      	mov	r8, r7
 8005ff6:	9306      	str	r3, [sp, #24]
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	9b04      	ldr	r3, [sp, #16]
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4650      	mov	r0, sl
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	f7ff fa6c 	bl	80054e0 <quorem>
 8006008:	4641      	mov	r1, r8
 800600a:	9002      	str	r0, [sp, #8]
 800600c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006010:	4650      	mov	r0, sl
 8006012:	f000 fca5 	bl	8006960 <__mcmp>
 8006016:	463a      	mov	r2, r7
 8006018:	9005      	str	r0, [sp, #20]
 800601a:	4631      	mov	r1, r6
 800601c:	4620      	mov	r0, r4
 800601e:	f000 fcbb 	bl	8006998 <__mdiff>
 8006022:	68c2      	ldr	r2, [r0, #12]
 8006024:	4605      	mov	r5, r0
 8006026:	bb02      	cbnz	r2, 800606a <_dtoa_r+0xa7a>
 8006028:	4601      	mov	r1, r0
 800602a:	4650      	mov	r0, sl
 800602c:	f000 fc98 	bl	8006960 <__mcmp>
 8006030:	4602      	mov	r2, r0
 8006032:	4629      	mov	r1, r5
 8006034:	4620      	mov	r0, r4
 8006036:	9209      	str	r2, [sp, #36]	; 0x24
 8006038:	f000 fa0c 	bl	8006454 <_Bfree>
 800603c:	9b07      	ldr	r3, [sp, #28]
 800603e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006040:	9d04      	ldr	r5, [sp, #16]
 8006042:	ea43 0102 	orr.w	r1, r3, r2
 8006046:	9b06      	ldr	r3, [sp, #24]
 8006048:	4319      	orrs	r1, r3
 800604a:	d110      	bne.n	800606e <_dtoa_r+0xa7e>
 800604c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006050:	d029      	beq.n	80060a6 <_dtoa_r+0xab6>
 8006052:	9b05      	ldr	r3, [sp, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	dd02      	ble.n	800605e <_dtoa_r+0xa6e>
 8006058:	9b02      	ldr	r3, [sp, #8]
 800605a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	f883 9000 	strb.w	r9, [r3]
 8006064:	e774      	b.n	8005f50 <_dtoa_r+0x960>
 8006066:	4638      	mov	r0, r7
 8006068:	e7ba      	b.n	8005fe0 <_dtoa_r+0x9f0>
 800606a:	2201      	movs	r2, #1
 800606c:	e7e1      	b.n	8006032 <_dtoa_r+0xa42>
 800606e:	9b05      	ldr	r3, [sp, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	db04      	blt.n	800607e <_dtoa_r+0xa8e>
 8006074:	9907      	ldr	r1, [sp, #28]
 8006076:	430b      	orrs	r3, r1
 8006078:	9906      	ldr	r1, [sp, #24]
 800607a:	430b      	orrs	r3, r1
 800607c:	d120      	bne.n	80060c0 <_dtoa_r+0xad0>
 800607e:	2a00      	cmp	r2, #0
 8006080:	dded      	ble.n	800605e <_dtoa_r+0xa6e>
 8006082:	4651      	mov	r1, sl
 8006084:	2201      	movs	r2, #1
 8006086:	4620      	mov	r0, r4
 8006088:	f000 fbfe 	bl	8006888 <__lshift>
 800608c:	4631      	mov	r1, r6
 800608e:	4682      	mov	sl, r0
 8006090:	f000 fc66 	bl	8006960 <__mcmp>
 8006094:	2800      	cmp	r0, #0
 8006096:	dc03      	bgt.n	80060a0 <_dtoa_r+0xab0>
 8006098:	d1e1      	bne.n	800605e <_dtoa_r+0xa6e>
 800609a:	f019 0f01 	tst.w	r9, #1
 800609e:	d0de      	beq.n	800605e <_dtoa_r+0xa6e>
 80060a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060a4:	d1d8      	bne.n	8006058 <_dtoa_r+0xa68>
 80060a6:	9a01      	ldr	r2, [sp, #4]
 80060a8:	2339      	movs	r3, #57	; 0x39
 80060aa:	7013      	strb	r3, [r2, #0]
 80060ac:	462b      	mov	r3, r5
 80060ae:	461d      	mov	r5, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060b6:	2a39      	cmp	r2, #57	; 0x39
 80060b8:	d06c      	beq.n	8006194 <_dtoa_r+0xba4>
 80060ba:	3201      	adds	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e747      	b.n	8005f50 <_dtoa_r+0x960>
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	dd07      	ble.n	80060d4 <_dtoa_r+0xae4>
 80060c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060c8:	d0ed      	beq.n	80060a6 <_dtoa_r+0xab6>
 80060ca:	9a01      	ldr	r2, [sp, #4]
 80060cc:	f109 0301 	add.w	r3, r9, #1
 80060d0:	7013      	strb	r3, [r2, #0]
 80060d2:	e73d      	b.n	8005f50 <_dtoa_r+0x960>
 80060d4:	9b04      	ldr	r3, [sp, #16]
 80060d6:	9a08      	ldr	r2, [sp, #32]
 80060d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80060dc:	4293      	cmp	r3, r2
 80060de:	d043      	beq.n	8006168 <_dtoa_r+0xb78>
 80060e0:	4651      	mov	r1, sl
 80060e2:	2300      	movs	r3, #0
 80060e4:	220a      	movs	r2, #10
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 f9d6 	bl	8006498 <__multadd>
 80060ec:	45b8      	cmp	r8, r7
 80060ee:	4682      	mov	sl, r0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	f04f 020a 	mov.w	r2, #10
 80060f8:	4641      	mov	r1, r8
 80060fa:	4620      	mov	r0, r4
 80060fc:	d107      	bne.n	800610e <_dtoa_r+0xb1e>
 80060fe:	f000 f9cb 	bl	8006498 <__multadd>
 8006102:	4680      	mov	r8, r0
 8006104:	4607      	mov	r7, r0
 8006106:	9b04      	ldr	r3, [sp, #16]
 8006108:	3301      	adds	r3, #1
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	e775      	b.n	8005ffa <_dtoa_r+0xa0a>
 800610e:	f000 f9c3 	bl	8006498 <__multadd>
 8006112:	4639      	mov	r1, r7
 8006114:	4680      	mov	r8, r0
 8006116:	2300      	movs	r3, #0
 8006118:	220a      	movs	r2, #10
 800611a:	4620      	mov	r0, r4
 800611c:	f000 f9bc 	bl	8006498 <__multadd>
 8006120:	4607      	mov	r7, r0
 8006122:	e7f0      	b.n	8006106 <_dtoa_r+0xb16>
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	9d00      	ldr	r5, [sp, #0]
 800612a:	4631      	mov	r1, r6
 800612c:	4650      	mov	r0, sl
 800612e:	f7ff f9d7 	bl	80054e0 <quorem>
 8006132:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006136:	9b00      	ldr	r3, [sp, #0]
 8006138:	f805 9b01 	strb.w	r9, [r5], #1
 800613c:	1aea      	subs	r2, r5, r3
 800613e:	9b01      	ldr	r3, [sp, #4]
 8006140:	4293      	cmp	r3, r2
 8006142:	dd07      	ble.n	8006154 <_dtoa_r+0xb64>
 8006144:	4651      	mov	r1, sl
 8006146:	2300      	movs	r3, #0
 8006148:	220a      	movs	r2, #10
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f9a4 	bl	8006498 <__multadd>
 8006150:	4682      	mov	sl, r0
 8006152:	e7ea      	b.n	800612a <_dtoa_r+0xb3a>
 8006154:	9b01      	ldr	r3, [sp, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	bfc8      	it	gt
 800615a:	461d      	movgt	r5, r3
 800615c:	9b00      	ldr	r3, [sp, #0]
 800615e:	bfd8      	it	le
 8006160:	2501      	movle	r5, #1
 8006162:	441d      	add	r5, r3
 8006164:	f04f 0800 	mov.w	r8, #0
 8006168:	4651      	mov	r1, sl
 800616a:	2201      	movs	r2, #1
 800616c:	4620      	mov	r0, r4
 800616e:	f000 fb8b 	bl	8006888 <__lshift>
 8006172:	4631      	mov	r1, r6
 8006174:	4682      	mov	sl, r0
 8006176:	f000 fbf3 	bl	8006960 <__mcmp>
 800617a:	2800      	cmp	r0, #0
 800617c:	dc96      	bgt.n	80060ac <_dtoa_r+0xabc>
 800617e:	d102      	bne.n	8006186 <_dtoa_r+0xb96>
 8006180:	f019 0f01 	tst.w	r9, #1
 8006184:	d192      	bne.n	80060ac <_dtoa_r+0xabc>
 8006186:	462b      	mov	r3, r5
 8006188:	461d      	mov	r5, r3
 800618a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800618e:	2a30      	cmp	r2, #48	; 0x30
 8006190:	d0fa      	beq.n	8006188 <_dtoa_r+0xb98>
 8006192:	e6dd      	b.n	8005f50 <_dtoa_r+0x960>
 8006194:	9a00      	ldr	r2, [sp, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d189      	bne.n	80060ae <_dtoa_r+0xabe>
 800619a:	f10b 0b01 	add.w	fp, fp, #1
 800619e:	2331      	movs	r3, #49	; 0x31
 80061a0:	e796      	b.n	80060d0 <_dtoa_r+0xae0>
 80061a2:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <_dtoa_r+0xbdc>)
 80061a4:	f7ff ba99 	b.w	80056da <_dtoa_r+0xea>
 80061a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f47f aa6d 	bne.w	800568a <_dtoa_r+0x9a>
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <_dtoa_r+0xbe0>)
 80061b2:	f7ff ba92 	b.w	80056da <_dtoa_r+0xea>
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dcb5      	bgt.n	8006128 <_dtoa_r+0xb38>
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	f73f aeb1 	bgt.w	8005f26 <_dtoa_r+0x936>
 80061c4:	e7b0      	b.n	8006128 <_dtoa_r+0xb38>
 80061c6:	bf00      	nop
 80061c8:	08008d49 	.word	0x08008d49
 80061cc:	08008ca4 	.word	0x08008ca4
 80061d0:	08008ccd 	.word	0x08008ccd

080061d4 <_free_r>:
 80061d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061d6:	2900      	cmp	r1, #0
 80061d8:	d044      	beq.n	8006264 <_free_r+0x90>
 80061da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061de:	9001      	str	r0, [sp, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f1a1 0404 	sub.w	r4, r1, #4
 80061e6:	bfb8      	it	lt
 80061e8:	18e4      	addlt	r4, r4, r3
 80061ea:	f000 f8e7 	bl	80063bc <__malloc_lock>
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <_free_r+0x94>)
 80061f0:	9801      	ldr	r0, [sp, #4]
 80061f2:	6813      	ldr	r3, [r2, #0]
 80061f4:	b933      	cbnz	r3, 8006204 <_free_r+0x30>
 80061f6:	6063      	str	r3, [r4, #4]
 80061f8:	6014      	str	r4, [r2, #0]
 80061fa:	b003      	add	sp, #12
 80061fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006200:	f000 b8e2 	b.w	80063c8 <__malloc_unlock>
 8006204:	42a3      	cmp	r3, r4
 8006206:	d908      	bls.n	800621a <_free_r+0x46>
 8006208:	6825      	ldr	r5, [r4, #0]
 800620a:	1961      	adds	r1, r4, r5
 800620c:	428b      	cmp	r3, r1
 800620e:	bf01      	itttt	eq
 8006210:	6819      	ldreq	r1, [r3, #0]
 8006212:	685b      	ldreq	r3, [r3, #4]
 8006214:	1949      	addeq	r1, r1, r5
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	e7ed      	b.n	80061f6 <_free_r+0x22>
 800621a:	461a      	mov	r2, r3
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	b10b      	cbz	r3, 8006224 <_free_r+0x50>
 8006220:	42a3      	cmp	r3, r4
 8006222:	d9fa      	bls.n	800621a <_free_r+0x46>
 8006224:	6811      	ldr	r1, [r2, #0]
 8006226:	1855      	adds	r5, r2, r1
 8006228:	42a5      	cmp	r5, r4
 800622a:	d10b      	bne.n	8006244 <_free_r+0x70>
 800622c:	6824      	ldr	r4, [r4, #0]
 800622e:	4421      	add	r1, r4
 8006230:	1854      	adds	r4, r2, r1
 8006232:	42a3      	cmp	r3, r4
 8006234:	6011      	str	r1, [r2, #0]
 8006236:	d1e0      	bne.n	80061fa <_free_r+0x26>
 8006238:	681c      	ldr	r4, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	6053      	str	r3, [r2, #4]
 800623e:	440c      	add	r4, r1
 8006240:	6014      	str	r4, [r2, #0]
 8006242:	e7da      	b.n	80061fa <_free_r+0x26>
 8006244:	d902      	bls.n	800624c <_free_r+0x78>
 8006246:	230c      	movs	r3, #12
 8006248:	6003      	str	r3, [r0, #0]
 800624a:	e7d6      	b.n	80061fa <_free_r+0x26>
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	1961      	adds	r1, r4, r5
 8006250:	428b      	cmp	r3, r1
 8006252:	bf04      	itt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	bf04      	itt	eq
 800625c:	1949      	addeq	r1, r1, r5
 800625e:	6021      	streq	r1, [r4, #0]
 8006260:	6054      	str	r4, [r2, #4]
 8006262:	e7ca      	b.n	80061fa <_free_r+0x26>
 8006264:	b003      	add	sp, #12
 8006266:	bd30      	pop	{r4, r5, pc}
 8006268:	200003d4 	.word	0x200003d4

0800626c <malloc>:
 800626c:	4b02      	ldr	r3, [pc, #8]	; (8006278 <malloc+0xc>)
 800626e:	4601      	mov	r1, r0
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	f000 b823 	b.w	80062bc <_malloc_r>
 8006276:	bf00      	nop
 8006278:	20000064 	.word	0x20000064

0800627c <sbrk_aligned>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	4e0e      	ldr	r6, [pc, #56]	; (80062b8 <sbrk_aligned+0x3c>)
 8006280:	460c      	mov	r4, r1
 8006282:	6831      	ldr	r1, [r6, #0]
 8006284:	4605      	mov	r5, r0
 8006286:	b911      	cbnz	r1, 800628e <sbrk_aligned+0x12>
 8006288:	f001 fe1a 	bl	8007ec0 <_sbrk_r>
 800628c:	6030      	str	r0, [r6, #0]
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f001 fe15 	bl	8007ec0 <_sbrk_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d00a      	beq.n	80062b0 <sbrk_aligned+0x34>
 800629a:	1cc4      	adds	r4, r0, #3
 800629c:	f024 0403 	bic.w	r4, r4, #3
 80062a0:	42a0      	cmp	r0, r4
 80062a2:	d007      	beq.n	80062b4 <sbrk_aligned+0x38>
 80062a4:	1a21      	subs	r1, r4, r0
 80062a6:	4628      	mov	r0, r5
 80062a8:	f001 fe0a 	bl	8007ec0 <_sbrk_r>
 80062ac:	3001      	adds	r0, #1
 80062ae:	d101      	bne.n	80062b4 <sbrk_aligned+0x38>
 80062b0:	f04f 34ff 	mov.w	r4, #4294967295
 80062b4:	4620      	mov	r0, r4
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	200003d8 	.word	0x200003d8

080062bc <_malloc_r>:
 80062bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c0:	1ccd      	adds	r5, r1, #3
 80062c2:	f025 0503 	bic.w	r5, r5, #3
 80062c6:	3508      	adds	r5, #8
 80062c8:	2d0c      	cmp	r5, #12
 80062ca:	bf38      	it	cc
 80062cc:	250c      	movcc	r5, #12
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	4607      	mov	r7, r0
 80062d2:	db01      	blt.n	80062d8 <_malloc_r+0x1c>
 80062d4:	42a9      	cmp	r1, r5
 80062d6:	d905      	bls.n	80062e4 <_malloc_r+0x28>
 80062d8:	230c      	movs	r3, #12
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	2600      	movs	r6, #0
 80062de:	4630      	mov	r0, r6
 80062e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063b8 <_malloc_r+0xfc>
 80062e8:	f000 f868 	bl	80063bc <__malloc_lock>
 80062ec:	f8d8 3000 	ldr.w	r3, [r8]
 80062f0:	461c      	mov	r4, r3
 80062f2:	bb5c      	cbnz	r4, 800634c <_malloc_r+0x90>
 80062f4:	4629      	mov	r1, r5
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7ff ffc0 	bl	800627c <sbrk_aligned>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	4604      	mov	r4, r0
 8006300:	d155      	bne.n	80063ae <_malloc_r+0xf2>
 8006302:	f8d8 4000 	ldr.w	r4, [r8]
 8006306:	4626      	mov	r6, r4
 8006308:	2e00      	cmp	r6, #0
 800630a:	d145      	bne.n	8006398 <_malloc_r+0xdc>
 800630c:	2c00      	cmp	r4, #0
 800630e:	d048      	beq.n	80063a2 <_malloc_r+0xe6>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	4631      	mov	r1, r6
 8006314:	4638      	mov	r0, r7
 8006316:	eb04 0903 	add.w	r9, r4, r3
 800631a:	f001 fdd1 	bl	8007ec0 <_sbrk_r>
 800631e:	4581      	cmp	r9, r0
 8006320:	d13f      	bne.n	80063a2 <_malloc_r+0xe6>
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	1a6d      	subs	r5, r5, r1
 8006326:	4629      	mov	r1, r5
 8006328:	4638      	mov	r0, r7
 800632a:	f7ff ffa7 	bl	800627c <sbrk_aligned>
 800632e:	3001      	adds	r0, #1
 8006330:	d037      	beq.n	80063a2 <_malloc_r+0xe6>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	442b      	add	r3, r5
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	f8d8 3000 	ldr.w	r3, [r8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d038      	beq.n	80063b2 <_malloc_r+0xf6>
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	42a2      	cmp	r2, r4
 8006344:	d12b      	bne.n	800639e <_malloc_r+0xe2>
 8006346:	2200      	movs	r2, #0
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	e00f      	b.n	800636c <_malloc_r+0xb0>
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	1b52      	subs	r2, r2, r5
 8006350:	d41f      	bmi.n	8006392 <_malloc_r+0xd6>
 8006352:	2a0b      	cmp	r2, #11
 8006354:	d917      	bls.n	8006386 <_malloc_r+0xca>
 8006356:	1961      	adds	r1, r4, r5
 8006358:	42a3      	cmp	r3, r4
 800635a:	6025      	str	r5, [r4, #0]
 800635c:	bf18      	it	ne
 800635e:	6059      	strne	r1, [r3, #4]
 8006360:	6863      	ldr	r3, [r4, #4]
 8006362:	bf08      	it	eq
 8006364:	f8c8 1000 	streq.w	r1, [r8]
 8006368:	5162      	str	r2, [r4, r5]
 800636a:	604b      	str	r3, [r1, #4]
 800636c:	4638      	mov	r0, r7
 800636e:	f104 060b 	add.w	r6, r4, #11
 8006372:	f000 f829 	bl	80063c8 <__malloc_unlock>
 8006376:	f026 0607 	bic.w	r6, r6, #7
 800637a:	1d23      	adds	r3, r4, #4
 800637c:	1af2      	subs	r2, r6, r3
 800637e:	d0ae      	beq.n	80062de <_malloc_r+0x22>
 8006380:	1b9b      	subs	r3, r3, r6
 8006382:	50a3      	str	r3, [r4, r2]
 8006384:	e7ab      	b.n	80062de <_malloc_r+0x22>
 8006386:	42a3      	cmp	r3, r4
 8006388:	6862      	ldr	r2, [r4, #4]
 800638a:	d1dd      	bne.n	8006348 <_malloc_r+0x8c>
 800638c:	f8c8 2000 	str.w	r2, [r8]
 8006390:	e7ec      	b.n	800636c <_malloc_r+0xb0>
 8006392:	4623      	mov	r3, r4
 8006394:	6864      	ldr	r4, [r4, #4]
 8006396:	e7ac      	b.n	80062f2 <_malloc_r+0x36>
 8006398:	4634      	mov	r4, r6
 800639a:	6876      	ldr	r6, [r6, #4]
 800639c:	e7b4      	b.n	8006308 <_malloc_r+0x4c>
 800639e:	4613      	mov	r3, r2
 80063a0:	e7cc      	b.n	800633c <_malloc_r+0x80>
 80063a2:	230c      	movs	r3, #12
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4638      	mov	r0, r7
 80063a8:	f000 f80e 	bl	80063c8 <__malloc_unlock>
 80063ac:	e797      	b.n	80062de <_malloc_r+0x22>
 80063ae:	6025      	str	r5, [r4, #0]
 80063b0:	e7dc      	b.n	800636c <_malloc_r+0xb0>
 80063b2:	605b      	str	r3, [r3, #4]
 80063b4:	deff      	udf	#255	; 0xff
 80063b6:	bf00      	nop
 80063b8:	200003d4 	.word	0x200003d4

080063bc <__malloc_lock>:
 80063bc:	4801      	ldr	r0, [pc, #4]	; (80063c4 <__malloc_lock+0x8>)
 80063be:	f7ff b886 	b.w	80054ce <__retarget_lock_acquire_recursive>
 80063c2:	bf00      	nop
 80063c4:	200003d0 	.word	0x200003d0

080063c8 <__malloc_unlock>:
 80063c8:	4801      	ldr	r0, [pc, #4]	; (80063d0 <__malloc_unlock+0x8>)
 80063ca:	f7ff b881 	b.w	80054d0 <__retarget_lock_release_recursive>
 80063ce:	bf00      	nop
 80063d0:	200003d0 	.word	0x200003d0

080063d4 <_Balloc>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	69c6      	ldr	r6, [r0, #28]
 80063d8:	4604      	mov	r4, r0
 80063da:	460d      	mov	r5, r1
 80063dc:	b976      	cbnz	r6, 80063fc <_Balloc+0x28>
 80063de:	2010      	movs	r0, #16
 80063e0:	f7ff ff44 	bl	800626c <malloc>
 80063e4:	4602      	mov	r2, r0
 80063e6:	61e0      	str	r0, [r4, #28]
 80063e8:	b920      	cbnz	r0, 80063f4 <_Balloc+0x20>
 80063ea:	4b18      	ldr	r3, [pc, #96]	; (800644c <_Balloc+0x78>)
 80063ec:	4818      	ldr	r0, [pc, #96]	; (8006450 <_Balloc+0x7c>)
 80063ee:	216b      	movs	r1, #107	; 0x6b
 80063f0:	f001 fd8e 	bl	8007f10 <__assert_func>
 80063f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063f8:	6006      	str	r6, [r0, #0]
 80063fa:	60c6      	str	r6, [r0, #12]
 80063fc:	69e6      	ldr	r6, [r4, #28]
 80063fe:	68f3      	ldr	r3, [r6, #12]
 8006400:	b183      	cbz	r3, 8006424 <_Balloc+0x50>
 8006402:	69e3      	ldr	r3, [r4, #28]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800640a:	b9b8      	cbnz	r0, 800643c <_Balloc+0x68>
 800640c:	2101      	movs	r1, #1
 800640e:	fa01 f605 	lsl.w	r6, r1, r5
 8006412:	1d72      	adds	r2, r6, #5
 8006414:	0092      	lsls	r2, r2, #2
 8006416:	4620      	mov	r0, r4
 8006418:	f001 fd98 	bl	8007f4c <_calloc_r>
 800641c:	b160      	cbz	r0, 8006438 <_Balloc+0x64>
 800641e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006422:	e00e      	b.n	8006442 <_Balloc+0x6e>
 8006424:	2221      	movs	r2, #33	; 0x21
 8006426:	2104      	movs	r1, #4
 8006428:	4620      	mov	r0, r4
 800642a:	f001 fd8f 	bl	8007f4c <_calloc_r>
 800642e:	69e3      	ldr	r3, [r4, #28]
 8006430:	60f0      	str	r0, [r6, #12]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e4      	bne.n	8006402 <_Balloc+0x2e>
 8006438:	2000      	movs	r0, #0
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	6802      	ldr	r2, [r0, #0]
 800643e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006442:	2300      	movs	r3, #0
 8006444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006448:	e7f7      	b.n	800643a <_Balloc+0x66>
 800644a:	bf00      	nop
 800644c:	08008cda 	.word	0x08008cda
 8006450:	08008d5a 	.word	0x08008d5a

08006454 <_Bfree>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	69c6      	ldr	r6, [r0, #28]
 8006458:	4605      	mov	r5, r0
 800645a:	460c      	mov	r4, r1
 800645c:	b976      	cbnz	r6, 800647c <_Bfree+0x28>
 800645e:	2010      	movs	r0, #16
 8006460:	f7ff ff04 	bl	800626c <malloc>
 8006464:	4602      	mov	r2, r0
 8006466:	61e8      	str	r0, [r5, #28]
 8006468:	b920      	cbnz	r0, 8006474 <_Bfree+0x20>
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <_Bfree+0x3c>)
 800646c:	4809      	ldr	r0, [pc, #36]	; (8006494 <_Bfree+0x40>)
 800646e:	218f      	movs	r1, #143	; 0x8f
 8006470:	f001 fd4e 	bl	8007f10 <__assert_func>
 8006474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006478:	6006      	str	r6, [r0, #0]
 800647a:	60c6      	str	r6, [r0, #12]
 800647c:	b13c      	cbz	r4, 800648e <_Bfree+0x3a>
 800647e:	69eb      	ldr	r3, [r5, #28]
 8006480:	6862      	ldr	r2, [r4, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006488:	6021      	str	r1, [r4, #0]
 800648a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	08008cda 	.word	0x08008cda
 8006494:	08008d5a 	.word	0x08008d5a

08006498 <__multadd>:
 8006498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	690d      	ldr	r5, [r1, #16]
 800649e:	4607      	mov	r7, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	461e      	mov	r6, r3
 80064a4:	f101 0c14 	add.w	ip, r1, #20
 80064a8:	2000      	movs	r0, #0
 80064aa:	f8dc 3000 	ldr.w	r3, [ip]
 80064ae:	b299      	uxth	r1, r3
 80064b0:	fb02 6101 	mla	r1, r2, r1, r6
 80064b4:	0c1e      	lsrs	r6, r3, #16
 80064b6:	0c0b      	lsrs	r3, r1, #16
 80064b8:	fb02 3306 	mla	r3, r2, r6, r3
 80064bc:	b289      	uxth	r1, r1
 80064be:	3001      	adds	r0, #1
 80064c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064c4:	4285      	cmp	r5, r0
 80064c6:	f84c 1b04 	str.w	r1, [ip], #4
 80064ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064ce:	dcec      	bgt.n	80064aa <__multadd+0x12>
 80064d0:	b30e      	cbz	r6, 8006516 <__multadd+0x7e>
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	dc19      	bgt.n	800650c <__multadd+0x74>
 80064d8:	6861      	ldr	r1, [r4, #4]
 80064da:	4638      	mov	r0, r7
 80064dc:	3101      	adds	r1, #1
 80064de:	f7ff ff79 	bl	80063d4 <_Balloc>
 80064e2:	4680      	mov	r8, r0
 80064e4:	b928      	cbnz	r0, 80064f2 <__multadd+0x5a>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <__multadd+0x84>)
 80064ea:	480d      	ldr	r0, [pc, #52]	; (8006520 <__multadd+0x88>)
 80064ec:	21ba      	movs	r1, #186	; 0xba
 80064ee:	f001 fd0f 	bl	8007f10 <__assert_func>
 80064f2:	6922      	ldr	r2, [r4, #16]
 80064f4:	3202      	adds	r2, #2
 80064f6:	f104 010c 	add.w	r1, r4, #12
 80064fa:	0092      	lsls	r2, r2, #2
 80064fc:	300c      	adds	r0, #12
 80064fe:	f001 fcef 	bl	8007ee0 <memcpy>
 8006502:	4621      	mov	r1, r4
 8006504:	4638      	mov	r0, r7
 8006506:	f7ff ffa5 	bl	8006454 <_Bfree>
 800650a:	4644      	mov	r4, r8
 800650c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006510:	3501      	adds	r5, #1
 8006512:	615e      	str	r6, [r3, #20]
 8006514:	6125      	str	r5, [r4, #16]
 8006516:	4620      	mov	r0, r4
 8006518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800651c:	08008d49 	.word	0x08008d49
 8006520:	08008d5a 	.word	0x08008d5a

08006524 <__s2b>:
 8006524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006528:	460c      	mov	r4, r1
 800652a:	4615      	mov	r5, r2
 800652c:	461f      	mov	r7, r3
 800652e:	2209      	movs	r2, #9
 8006530:	3308      	adds	r3, #8
 8006532:	4606      	mov	r6, r0
 8006534:	fb93 f3f2 	sdiv	r3, r3, r2
 8006538:	2100      	movs	r1, #0
 800653a:	2201      	movs	r2, #1
 800653c:	429a      	cmp	r2, r3
 800653e:	db09      	blt.n	8006554 <__s2b+0x30>
 8006540:	4630      	mov	r0, r6
 8006542:	f7ff ff47 	bl	80063d4 <_Balloc>
 8006546:	b940      	cbnz	r0, 800655a <__s2b+0x36>
 8006548:	4602      	mov	r2, r0
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <__s2b+0x8c>)
 800654c:	4819      	ldr	r0, [pc, #100]	; (80065b4 <__s2b+0x90>)
 800654e:	21d3      	movs	r1, #211	; 0xd3
 8006550:	f001 fcde 	bl	8007f10 <__assert_func>
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	3101      	adds	r1, #1
 8006558:	e7f0      	b.n	800653c <__s2b+0x18>
 800655a:	9b08      	ldr	r3, [sp, #32]
 800655c:	6143      	str	r3, [r0, #20]
 800655e:	2d09      	cmp	r5, #9
 8006560:	f04f 0301 	mov.w	r3, #1
 8006564:	6103      	str	r3, [r0, #16]
 8006566:	dd16      	ble.n	8006596 <__s2b+0x72>
 8006568:	f104 0909 	add.w	r9, r4, #9
 800656c:	46c8      	mov	r8, r9
 800656e:	442c      	add	r4, r5
 8006570:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006574:	4601      	mov	r1, r0
 8006576:	3b30      	subs	r3, #48	; 0x30
 8006578:	220a      	movs	r2, #10
 800657a:	4630      	mov	r0, r6
 800657c:	f7ff ff8c 	bl	8006498 <__multadd>
 8006580:	45a0      	cmp	r8, r4
 8006582:	d1f5      	bne.n	8006570 <__s2b+0x4c>
 8006584:	f1a5 0408 	sub.w	r4, r5, #8
 8006588:	444c      	add	r4, r9
 800658a:	1b2d      	subs	r5, r5, r4
 800658c:	1963      	adds	r3, r4, r5
 800658e:	42bb      	cmp	r3, r7
 8006590:	db04      	blt.n	800659c <__s2b+0x78>
 8006592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006596:	340a      	adds	r4, #10
 8006598:	2509      	movs	r5, #9
 800659a:	e7f6      	b.n	800658a <__s2b+0x66>
 800659c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065a0:	4601      	mov	r1, r0
 80065a2:	3b30      	subs	r3, #48	; 0x30
 80065a4:	220a      	movs	r2, #10
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7ff ff76 	bl	8006498 <__multadd>
 80065ac:	e7ee      	b.n	800658c <__s2b+0x68>
 80065ae:	bf00      	nop
 80065b0:	08008d49 	.word	0x08008d49
 80065b4:	08008d5a 	.word	0x08008d5a

080065b8 <__hi0bits>:
 80065b8:	0c03      	lsrs	r3, r0, #16
 80065ba:	041b      	lsls	r3, r3, #16
 80065bc:	b9d3      	cbnz	r3, 80065f4 <__hi0bits+0x3c>
 80065be:	0400      	lsls	r0, r0, #16
 80065c0:	2310      	movs	r3, #16
 80065c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065c6:	bf04      	itt	eq
 80065c8:	0200      	lsleq	r0, r0, #8
 80065ca:	3308      	addeq	r3, #8
 80065cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065d0:	bf04      	itt	eq
 80065d2:	0100      	lsleq	r0, r0, #4
 80065d4:	3304      	addeq	r3, #4
 80065d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065da:	bf04      	itt	eq
 80065dc:	0080      	lsleq	r0, r0, #2
 80065de:	3302      	addeq	r3, #2
 80065e0:	2800      	cmp	r0, #0
 80065e2:	db05      	blt.n	80065f0 <__hi0bits+0x38>
 80065e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065e8:	f103 0301 	add.w	r3, r3, #1
 80065ec:	bf08      	it	eq
 80065ee:	2320      	moveq	r3, #32
 80065f0:	4618      	mov	r0, r3
 80065f2:	4770      	bx	lr
 80065f4:	2300      	movs	r3, #0
 80065f6:	e7e4      	b.n	80065c2 <__hi0bits+0xa>

080065f8 <__lo0bits>:
 80065f8:	6803      	ldr	r3, [r0, #0]
 80065fa:	f013 0207 	ands.w	r2, r3, #7
 80065fe:	d00c      	beq.n	800661a <__lo0bits+0x22>
 8006600:	07d9      	lsls	r1, r3, #31
 8006602:	d422      	bmi.n	800664a <__lo0bits+0x52>
 8006604:	079a      	lsls	r2, r3, #30
 8006606:	bf49      	itett	mi
 8006608:	085b      	lsrmi	r3, r3, #1
 800660a:	089b      	lsrpl	r3, r3, #2
 800660c:	6003      	strmi	r3, [r0, #0]
 800660e:	2201      	movmi	r2, #1
 8006610:	bf5c      	itt	pl
 8006612:	6003      	strpl	r3, [r0, #0]
 8006614:	2202      	movpl	r2, #2
 8006616:	4610      	mov	r0, r2
 8006618:	4770      	bx	lr
 800661a:	b299      	uxth	r1, r3
 800661c:	b909      	cbnz	r1, 8006622 <__lo0bits+0x2a>
 800661e:	0c1b      	lsrs	r3, r3, #16
 8006620:	2210      	movs	r2, #16
 8006622:	b2d9      	uxtb	r1, r3
 8006624:	b909      	cbnz	r1, 800662a <__lo0bits+0x32>
 8006626:	3208      	adds	r2, #8
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	0719      	lsls	r1, r3, #28
 800662c:	bf04      	itt	eq
 800662e:	091b      	lsreq	r3, r3, #4
 8006630:	3204      	addeq	r2, #4
 8006632:	0799      	lsls	r1, r3, #30
 8006634:	bf04      	itt	eq
 8006636:	089b      	lsreq	r3, r3, #2
 8006638:	3202      	addeq	r2, #2
 800663a:	07d9      	lsls	r1, r3, #31
 800663c:	d403      	bmi.n	8006646 <__lo0bits+0x4e>
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	f102 0201 	add.w	r2, r2, #1
 8006644:	d003      	beq.n	800664e <__lo0bits+0x56>
 8006646:	6003      	str	r3, [r0, #0]
 8006648:	e7e5      	b.n	8006616 <__lo0bits+0x1e>
 800664a:	2200      	movs	r2, #0
 800664c:	e7e3      	b.n	8006616 <__lo0bits+0x1e>
 800664e:	2220      	movs	r2, #32
 8006650:	e7e1      	b.n	8006616 <__lo0bits+0x1e>
	...

08006654 <__i2b>:
 8006654:	b510      	push	{r4, lr}
 8006656:	460c      	mov	r4, r1
 8006658:	2101      	movs	r1, #1
 800665a:	f7ff febb 	bl	80063d4 <_Balloc>
 800665e:	4602      	mov	r2, r0
 8006660:	b928      	cbnz	r0, 800666e <__i2b+0x1a>
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <__i2b+0x24>)
 8006664:	4805      	ldr	r0, [pc, #20]	; (800667c <__i2b+0x28>)
 8006666:	f240 1145 	movw	r1, #325	; 0x145
 800666a:	f001 fc51 	bl	8007f10 <__assert_func>
 800666e:	2301      	movs	r3, #1
 8006670:	6144      	str	r4, [r0, #20]
 8006672:	6103      	str	r3, [r0, #16]
 8006674:	bd10      	pop	{r4, pc}
 8006676:	bf00      	nop
 8006678:	08008d49 	.word	0x08008d49
 800667c:	08008d5a 	.word	0x08008d5a

08006680 <__multiply>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	4691      	mov	r9, r2
 8006686:	690a      	ldr	r2, [r1, #16]
 8006688:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800668c:	429a      	cmp	r2, r3
 800668e:	bfb8      	it	lt
 8006690:	460b      	movlt	r3, r1
 8006692:	460c      	mov	r4, r1
 8006694:	bfbc      	itt	lt
 8006696:	464c      	movlt	r4, r9
 8006698:	4699      	movlt	r9, r3
 800669a:	6927      	ldr	r7, [r4, #16]
 800669c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066a0:	68a3      	ldr	r3, [r4, #8]
 80066a2:	6861      	ldr	r1, [r4, #4]
 80066a4:	eb07 060a 	add.w	r6, r7, sl
 80066a8:	42b3      	cmp	r3, r6
 80066aa:	b085      	sub	sp, #20
 80066ac:	bfb8      	it	lt
 80066ae:	3101      	addlt	r1, #1
 80066b0:	f7ff fe90 	bl	80063d4 <_Balloc>
 80066b4:	b930      	cbnz	r0, 80066c4 <__multiply+0x44>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4b44      	ldr	r3, [pc, #272]	; (80067cc <__multiply+0x14c>)
 80066ba:	4845      	ldr	r0, [pc, #276]	; (80067d0 <__multiply+0x150>)
 80066bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066c0:	f001 fc26 	bl	8007f10 <__assert_func>
 80066c4:	f100 0514 	add.w	r5, r0, #20
 80066c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066cc:	462b      	mov	r3, r5
 80066ce:	2200      	movs	r2, #0
 80066d0:	4543      	cmp	r3, r8
 80066d2:	d321      	bcc.n	8006718 <__multiply+0x98>
 80066d4:	f104 0314 	add.w	r3, r4, #20
 80066d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066dc:	f109 0314 	add.w	r3, r9, #20
 80066e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066e4:	9202      	str	r2, [sp, #8]
 80066e6:	1b3a      	subs	r2, r7, r4
 80066e8:	3a15      	subs	r2, #21
 80066ea:	f022 0203 	bic.w	r2, r2, #3
 80066ee:	3204      	adds	r2, #4
 80066f0:	f104 0115 	add.w	r1, r4, #21
 80066f4:	428f      	cmp	r7, r1
 80066f6:	bf38      	it	cc
 80066f8:	2204      	movcc	r2, #4
 80066fa:	9201      	str	r2, [sp, #4]
 80066fc:	9a02      	ldr	r2, [sp, #8]
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	429a      	cmp	r2, r3
 8006702:	d80c      	bhi.n	800671e <__multiply+0x9e>
 8006704:	2e00      	cmp	r6, #0
 8006706:	dd03      	ble.n	8006710 <__multiply+0x90>
 8006708:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800670c:	2b00      	cmp	r3, #0
 800670e:	d05b      	beq.n	80067c8 <__multiply+0x148>
 8006710:	6106      	str	r6, [r0, #16]
 8006712:	b005      	add	sp, #20
 8006714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006718:	f843 2b04 	str.w	r2, [r3], #4
 800671c:	e7d8      	b.n	80066d0 <__multiply+0x50>
 800671e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006722:	f1ba 0f00 	cmp.w	sl, #0
 8006726:	d024      	beq.n	8006772 <__multiply+0xf2>
 8006728:	f104 0e14 	add.w	lr, r4, #20
 800672c:	46a9      	mov	r9, r5
 800672e:	f04f 0c00 	mov.w	ip, #0
 8006732:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006736:	f8d9 1000 	ldr.w	r1, [r9]
 800673a:	fa1f fb82 	uxth.w	fp, r2
 800673e:	b289      	uxth	r1, r1
 8006740:	fb0a 110b 	mla	r1, sl, fp, r1
 8006744:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006748:	f8d9 2000 	ldr.w	r2, [r9]
 800674c:	4461      	add	r1, ip
 800674e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006752:	fb0a c20b 	mla	r2, sl, fp, ip
 8006756:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800675a:	b289      	uxth	r1, r1
 800675c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006760:	4577      	cmp	r7, lr
 8006762:	f849 1b04 	str.w	r1, [r9], #4
 8006766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800676a:	d8e2      	bhi.n	8006732 <__multiply+0xb2>
 800676c:	9a01      	ldr	r2, [sp, #4]
 800676e:	f845 c002 	str.w	ip, [r5, r2]
 8006772:	9a03      	ldr	r2, [sp, #12]
 8006774:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006778:	3304      	adds	r3, #4
 800677a:	f1b9 0f00 	cmp.w	r9, #0
 800677e:	d021      	beq.n	80067c4 <__multiply+0x144>
 8006780:	6829      	ldr	r1, [r5, #0]
 8006782:	f104 0c14 	add.w	ip, r4, #20
 8006786:	46ae      	mov	lr, r5
 8006788:	f04f 0a00 	mov.w	sl, #0
 800678c:	f8bc b000 	ldrh.w	fp, [ip]
 8006790:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006794:	fb09 220b 	mla	r2, r9, fp, r2
 8006798:	4452      	add	r2, sl
 800679a:	b289      	uxth	r1, r1
 800679c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067a0:	f84e 1b04 	str.w	r1, [lr], #4
 80067a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067ac:	f8be 1000 	ldrh.w	r1, [lr]
 80067b0:	fb09 110a 	mla	r1, r9, sl, r1
 80067b4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067b8:	4567      	cmp	r7, ip
 80067ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067be:	d8e5      	bhi.n	800678c <__multiply+0x10c>
 80067c0:	9a01      	ldr	r2, [sp, #4]
 80067c2:	50a9      	str	r1, [r5, r2]
 80067c4:	3504      	adds	r5, #4
 80067c6:	e799      	b.n	80066fc <__multiply+0x7c>
 80067c8:	3e01      	subs	r6, #1
 80067ca:	e79b      	b.n	8006704 <__multiply+0x84>
 80067cc:	08008d49 	.word	0x08008d49
 80067d0:	08008d5a 	.word	0x08008d5a

080067d4 <__pow5mult>:
 80067d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d8:	4615      	mov	r5, r2
 80067da:	f012 0203 	ands.w	r2, r2, #3
 80067de:	4606      	mov	r6, r0
 80067e0:	460f      	mov	r7, r1
 80067e2:	d007      	beq.n	80067f4 <__pow5mult+0x20>
 80067e4:	4c25      	ldr	r4, [pc, #148]	; (800687c <__pow5mult+0xa8>)
 80067e6:	3a01      	subs	r2, #1
 80067e8:	2300      	movs	r3, #0
 80067ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067ee:	f7ff fe53 	bl	8006498 <__multadd>
 80067f2:	4607      	mov	r7, r0
 80067f4:	10ad      	asrs	r5, r5, #2
 80067f6:	d03d      	beq.n	8006874 <__pow5mult+0xa0>
 80067f8:	69f4      	ldr	r4, [r6, #28]
 80067fa:	b97c      	cbnz	r4, 800681c <__pow5mult+0x48>
 80067fc:	2010      	movs	r0, #16
 80067fe:	f7ff fd35 	bl	800626c <malloc>
 8006802:	4602      	mov	r2, r0
 8006804:	61f0      	str	r0, [r6, #28]
 8006806:	b928      	cbnz	r0, 8006814 <__pow5mult+0x40>
 8006808:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <__pow5mult+0xac>)
 800680a:	481e      	ldr	r0, [pc, #120]	; (8006884 <__pow5mult+0xb0>)
 800680c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006810:	f001 fb7e 	bl	8007f10 <__assert_func>
 8006814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006818:	6004      	str	r4, [r0, #0]
 800681a:	60c4      	str	r4, [r0, #12]
 800681c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006824:	b94c      	cbnz	r4, 800683a <__pow5mult+0x66>
 8006826:	f240 2171 	movw	r1, #625	; 0x271
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff ff12 	bl	8006654 <__i2b>
 8006830:	2300      	movs	r3, #0
 8006832:	f8c8 0008 	str.w	r0, [r8, #8]
 8006836:	4604      	mov	r4, r0
 8006838:	6003      	str	r3, [r0, #0]
 800683a:	f04f 0900 	mov.w	r9, #0
 800683e:	07eb      	lsls	r3, r5, #31
 8006840:	d50a      	bpl.n	8006858 <__pow5mult+0x84>
 8006842:	4639      	mov	r1, r7
 8006844:	4622      	mov	r2, r4
 8006846:	4630      	mov	r0, r6
 8006848:	f7ff ff1a 	bl	8006680 <__multiply>
 800684c:	4639      	mov	r1, r7
 800684e:	4680      	mov	r8, r0
 8006850:	4630      	mov	r0, r6
 8006852:	f7ff fdff 	bl	8006454 <_Bfree>
 8006856:	4647      	mov	r7, r8
 8006858:	106d      	asrs	r5, r5, #1
 800685a:	d00b      	beq.n	8006874 <__pow5mult+0xa0>
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	b938      	cbnz	r0, 8006870 <__pow5mult+0x9c>
 8006860:	4622      	mov	r2, r4
 8006862:	4621      	mov	r1, r4
 8006864:	4630      	mov	r0, r6
 8006866:	f7ff ff0b 	bl	8006680 <__multiply>
 800686a:	6020      	str	r0, [r4, #0]
 800686c:	f8c0 9000 	str.w	r9, [r0]
 8006870:	4604      	mov	r4, r0
 8006872:	e7e4      	b.n	800683e <__pow5mult+0x6a>
 8006874:	4638      	mov	r0, r7
 8006876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687a:	bf00      	nop
 800687c:	08008ea8 	.word	0x08008ea8
 8006880:	08008cda 	.word	0x08008cda
 8006884:	08008d5a 	.word	0x08008d5a

08006888 <__lshift>:
 8006888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800688c:	460c      	mov	r4, r1
 800688e:	6849      	ldr	r1, [r1, #4]
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006896:	68a3      	ldr	r3, [r4, #8]
 8006898:	4607      	mov	r7, r0
 800689a:	4691      	mov	r9, r2
 800689c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068a0:	f108 0601 	add.w	r6, r8, #1
 80068a4:	42b3      	cmp	r3, r6
 80068a6:	db0b      	blt.n	80068c0 <__lshift+0x38>
 80068a8:	4638      	mov	r0, r7
 80068aa:	f7ff fd93 	bl	80063d4 <_Balloc>
 80068ae:	4605      	mov	r5, r0
 80068b0:	b948      	cbnz	r0, 80068c6 <__lshift+0x3e>
 80068b2:	4602      	mov	r2, r0
 80068b4:	4b28      	ldr	r3, [pc, #160]	; (8006958 <__lshift+0xd0>)
 80068b6:	4829      	ldr	r0, [pc, #164]	; (800695c <__lshift+0xd4>)
 80068b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068bc:	f001 fb28 	bl	8007f10 <__assert_func>
 80068c0:	3101      	adds	r1, #1
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	e7ee      	b.n	80068a4 <__lshift+0x1c>
 80068c6:	2300      	movs	r3, #0
 80068c8:	f100 0114 	add.w	r1, r0, #20
 80068cc:	f100 0210 	add.w	r2, r0, #16
 80068d0:	4618      	mov	r0, r3
 80068d2:	4553      	cmp	r3, sl
 80068d4:	db33      	blt.n	800693e <__lshift+0xb6>
 80068d6:	6920      	ldr	r0, [r4, #16]
 80068d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068dc:	f104 0314 	add.w	r3, r4, #20
 80068e0:	f019 091f 	ands.w	r9, r9, #31
 80068e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068ec:	d02b      	beq.n	8006946 <__lshift+0xbe>
 80068ee:	f1c9 0e20 	rsb	lr, r9, #32
 80068f2:	468a      	mov	sl, r1
 80068f4:	2200      	movs	r2, #0
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	fa00 f009 	lsl.w	r0, r0, r9
 80068fc:	4310      	orrs	r0, r2
 80068fe:	f84a 0b04 	str.w	r0, [sl], #4
 8006902:	f853 2b04 	ldr.w	r2, [r3], #4
 8006906:	459c      	cmp	ip, r3
 8006908:	fa22 f20e 	lsr.w	r2, r2, lr
 800690c:	d8f3      	bhi.n	80068f6 <__lshift+0x6e>
 800690e:	ebac 0304 	sub.w	r3, ip, r4
 8006912:	3b15      	subs	r3, #21
 8006914:	f023 0303 	bic.w	r3, r3, #3
 8006918:	3304      	adds	r3, #4
 800691a:	f104 0015 	add.w	r0, r4, #21
 800691e:	4584      	cmp	ip, r0
 8006920:	bf38      	it	cc
 8006922:	2304      	movcc	r3, #4
 8006924:	50ca      	str	r2, [r1, r3]
 8006926:	b10a      	cbz	r2, 800692c <__lshift+0xa4>
 8006928:	f108 0602 	add.w	r6, r8, #2
 800692c:	3e01      	subs	r6, #1
 800692e:	4638      	mov	r0, r7
 8006930:	612e      	str	r6, [r5, #16]
 8006932:	4621      	mov	r1, r4
 8006934:	f7ff fd8e 	bl	8006454 <_Bfree>
 8006938:	4628      	mov	r0, r5
 800693a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006942:	3301      	adds	r3, #1
 8006944:	e7c5      	b.n	80068d2 <__lshift+0x4a>
 8006946:	3904      	subs	r1, #4
 8006948:	f853 2b04 	ldr.w	r2, [r3], #4
 800694c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006950:	459c      	cmp	ip, r3
 8006952:	d8f9      	bhi.n	8006948 <__lshift+0xc0>
 8006954:	e7ea      	b.n	800692c <__lshift+0xa4>
 8006956:	bf00      	nop
 8006958:	08008d49 	.word	0x08008d49
 800695c:	08008d5a 	.word	0x08008d5a

08006960 <__mcmp>:
 8006960:	b530      	push	{r4, r5, lr}
 8006962:	6902      	ldr	r2, [r0, #16]
 8006964:	690c      	ldr	r4, [r1, #16]
 8006966:	1b12      	subs	r2, r2, r4
 8006968:	d10e      	bne.n	8006988 <__mcmp+0x28>
 800696a:	f100 0314 	add.w	r3, r0, #20
 800696e:	3114      	adds	r1, #20
 8006970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800697c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006980:	42a5      	cmp	r5, r4
 8006982:	d003      	beq.n	800698c <__mcmp+0x2c>
 8006984:	d305      	bcc.n	8006992 <__mcmp+0x32>
 8006986:	2201      	movs	r2, #1
 8006988:	4610      	mov	r0, r2
 800698a:	bd30      	pop	{r4, r5, pc}
 800698c:	4283      	cmp	r3, r0
 800698e:	d3f3      	bcc.n	8006978 <__mcmp+0x18>
 8006990:	e7fa      	b.n	8006988 <__mcmp+0x28>
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	e7f7      	b.n	8006988 <__mcmp+0x28>

08006998 <__mdiff>:
 8006998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	460c      	mov	r4, r1
 800699e:	4606      	mov	r6, r0
 80069a0:	4611      	mov	r1, r2
 80069a2:	4620      	mov	r0, r4
 80069a4:	4690      	mov	r8, r2
 80069a6:	f7ff ffdb 	bl	8006960 <__mcmp>
 80069aa:	1e05      	subs	r5, r0, #0
 80069ac:	d110      	bne.n	80069d0 <__mdiff+0x38>
 80069ae:	4629      	mov	r1, r5
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff fd0f 	bl	80063d4 <_Balloc>
 80069b6:	b930      	cbnz	r0, 80069c6 <__mdiff+0x2e>
 80069b8:	4b3a      	ldr	r3, [pc, #232]	; (8006aa4 <__mdiff+0x10c>)
 80069ba:	4602      	mov	r2, r0
 80069bc:	f240 2137 	movw	r1, #567	; 0x237
 80069c0:	4839      	ldr	r0, [pc, #228]	; (8006aa8 <__mdiff+0x110>)
 80069c2:	f001 faa5 	bl	8007f10 <__assert_func>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d0:	bfa4      	itt	ge
 80069d2:	4643      	movge	r3, r8
 80069d4:	46a0      	movge	r8, r4
 80069d6:	4630      	mov	r0, r6
 80069d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069dc:	bfa6      	itte	ge
 80069de:	461c      	movge	r4, r3
 80069e0:	2500      	movge	r5, #0
 80069e2:	2501      	movlt	r5, #1
 80069e4:	f7ff fcf6 	bl	80063d4 <_Balloc>
 80069e8:	b920      	cbnz	r0, 80069f4 <__mdiff+0x5c>
 80069ea:	4b2e      	ldr	r3, [pc, #184]	; (8006aa4 <__mdiff+0x10c>)
 80069ec:	4602      	mov	r2, r0
 80069ee:	f240 2145 	movw	r1, #581	; 0x245
 80069f2:	e7e5      	b.n	80069c0 <__mdiff+0x28>
 80069f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069f8:	6926      	ldr	r6, [r4, #16]
 80069fa:	60c5      	str	r5, [r0, #12]
 80069fc:	f104 0914 	add.w	r9, r4, #20
 8006a00:	f108 0514 	add.w	r5, r8, #20
 8006a04:	f100 0e14 	add.w	lr, r0, #20
 8006a08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a10:	f108 0210 	add.w	r2, r8, #16
 8006a14:	46f2      	mov	sl, lr
 8006a16:	2100      	movs	r1, #0
 8006a18:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a20:	fa11 f88b 	uxtah	r8, r1, fp
 8006a24:	b299      	uxth	r1, r3
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	eba8 0801 	sub.w	r8, r8, r1
 8006a2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a30:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a34:	fa1f f888 	uxth.w	r8, r8
 8006a38:	1419      	asrs	r1, r3, #16
 8006a3a:	454e      	cmp	r6, r9
 8006a3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a40:	f84a 3b04 	str.w	r3, [sl], #4
 8006a44:	d8e8      	bhi.n	8006a18 <__mdiff+0x80>
 8006a46:	1b33      	subs	r3, r6, r4
 8006a48:	3b15      	subs	r3, #21
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	3304      	adds	r3, #4
 8006a50:	3415      	adds	r4, #21
 8006a52:	42a6      	cmp	r6, r4
 8006a54:	bf38      	it	cc
 8006a56:	2304      	movcc	r3, #4
 8006a58:	441d      	add	r5, r3
 8006a5a:	4473      	add	r3, lr
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	462e      	mov	r6, r5
 8006a60:	4566      	cmp	r6, ip
 8006a62:	d30e      	bcc.n	8006a82 <__mdiff+0xea>
 8006a64:	f10c 0203 	add.w	r2, ip, #3
 8006a68:	1b52      	subs	r2, r2, r5
 8006a6a:	f022 0203 	bic.w	r2, r2, #3
 8006a6e:	3d03      	subs	r5, #3
 8006a70:	45ac      	cmp	ip, r5
 8006a72:	bf38      	it	cc
 8006a74:	2200      	movcc	r2, #0
 8006a76:	4413      	add	r3, r2
 8006a78:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a7c:	b17a      	cbz	r2, 8006a9e <__mdiff+0x106>
 8006a7e:	6107      	str	r7, [r0, #16]
 8006a80:	e7a4      	b.n	80069cc <__mdiff+0x34>
 8006a82:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a86:	fa11 f288 	uxtah	r2, r1, r8
 8006a8a:	1414      	asrs	r4, r2, #16
 8006a8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a90:	b292      	uxth	r2, r2
 8006a92:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a96:	f84e 2b04 	str.w	r2, [lr], #4
 8006a9a:	1421      	asrs	r1, r4, #16
 8006a9c:	e7e0      	b.n	8006a60 <__mdiff+0xc8>
 8006a9e:	3f01      	subs	r7, #1
 8006aa0:	e7ea      	b.n	8006a78 <__mdiff+0xe0>
 8006aa2:	bf00      	nop
 8006aa4:	08008d49 	.word	0x08008d49
 8006aa8:	08008d5a 	.word	0x08008d5a

08006aac <__ulp>:
 8006aac:	b082      	sub	sp, #8
 8006aae:	ed8d 0b00 	vstr	d0, [sp]
 8006ab2:	9a01      	ldr	r2, [sp, #4]
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <__ulp+0x48>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dc08      	bgt.n	8006ad2 <__ulp+0x26>
 8006ac0:	425b      	negs	r3, r3
 8006ac2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ac6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006aca:	da04      	bge.n	8006ad6 <__ulp+0x2a>
 8006acc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ad0:	4113      	asrs	r3, r2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	e008      	b.n	8006ae8 <__ulp+0x3c>
 8006ad6:	f1a2 0314 	sub.w	r3, r2, #20
 8006ada:	2b1e      	cmp	r3, #30
 8006adc:	bfda      	itte	le
 8006ade:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ae2:	40da      	lsrle	r2, r3
 8006ae4:	2201      	movgt	r2, #1
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4610      	mov	r0, r2
 8006aec:	ec41 0b10 	vmov	d0, r0, r1
 8006af0:	b002      	add	sp, #8
 8006af2:	4770      	bx	lr
 8006af4:	7ff00000 	.word	0x7ff00000

08006af8 <__b2d>:
 8006af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afc:	6906      	ldr	r6, [r0, #16]
 8006afe:	f100 0814 	add.w	r8, r0, #20
 8006b02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006b06:	1f37      	subs	r7, r6, #4
 8006b08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f7ff fd53 	bl	80065b8 <__hi0bits>
 8006b12:	f1c0 0320 	rsb	r3, r0, #32
 8006b16:	280a      	cmp	r0, #10
 8006b18:	600b      	str	r3, [r1, #0]
 8006b1a:	491b      	ldr	r1, [pc, #108]	; (8006b88 <__b2d+0x90>)
 8006b1c:	dc15      	bgt.n	8006b4a <__b2d+0x52>
 8006b1e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006b22:	fa22 f30c 	lsr.w	r3, r2, ip
 8006b26:	45b8      	cmp	r8, r7
 8006b28:	ea43 0501 	orr.w	r5, r3, r1
 8006b2c:	bf34      	ite	cc
 8006b2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006b32:	2300      	movcs	r3, #0
 8006b34:	3015      	adds	r0, #21
 8006b36:	fa02 f000 	lsl.w	r0, r2, r0
 8006b3a:	fa23 f30c 	lsr.w	r3, r3, ip
 8006b3e:	4303      	orrs	r3, r0
 8006b40:	461c      	mov	r4, r3
 8006b42:	ec45 4b10 	vmov	d0, r4, r5
 8006b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b4a:	45b8      	cmp	r8, r7
 8006b4c:	bf3a      	itte	cc
 8006b4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006b52:	f1a6 0708 	subcc.w	r7, r6, #8
 8006b56:	2300      	movcs	r3, #0
 8006b58:	380b      	subs	r0, #11
 8006b5a:	d012      	beq.n	8006b82 <__b2d+0x8a>
 8006b5c:	f1c0 0120 	rsb	r1, r0, #32
 8006b60:	fa23 f401 	lsr.w	r4, r3, r1
 8006b64:	4082      	lsls	r2, r0
 8006b66:	4322      	orrs	r2, r4
 8006b68:	4547      	cmp	r7, r8
 8006b6a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006b6e:	bf8c      	ite	hi
 8006b70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006b74:	2200      	movls	r2, #0
 8006b76:	4083      	lsls	r3, r0
 8006b78:	40ca      	lsrs	r2, r1
 8006b7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	e7de      	b.n	8006b40 <__b2d+0x48>
 8006b82:	ea42 0501 	orr.w	r5, r2, r1
 8006b86:	e7db      	b.n	8006b40 <__b2d+0x48>
 8006b88:	3ff00000 	.word	0x3ff00000

08006b8c <__d2b>:
 8006b8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	460f      	mov	r7, r1
 8006b92:	2101      	movs	r1, #1
 8006b94:	ec59 8b10 	vmov	r8, r9, d0
 8006b98:	4616      	mov	r6, r2
 8006b9a:	f7ff fc1b 	bl	80063d4 <_Balloc>
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	b930      	cbnz	r0, 8006bb0 <__d2b+0x24>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b24      	ldr	r3, [pc, #144]	; (8006c38 <__d2b+0xac>)
 8006ba6:	4825      	ldr	r0, [pc, #148]	; (8006c3c <__d2b+0xb0>)
 8006ba8:	f240 310f 	movw	r1, #783	; 0x30f
 8006bac:	f001 f9b0 	bl	8007f10 <__assert_func>
 8006bb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bb8:	bb2d      	cbnz	r5, 8006c06 <__d2b+0x7a>
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	f1b8 0300 	subs.w	r3, r8, #0
 8006bc0:	d026      	beq.n	8006c10 <__d2b+0x84>
 8006bc2:	4668      	mov	r0, sp
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	f7ff fd17 	bl	80065f8 <__lo0bits>
 8006bca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006bce:	b1e8      	cbz	r0, 8006c0c <__d2b+0x80>
 8006bd0:	f1c0 0320 	rsb	r3, r0, #32
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	40c2      	lsrs	r2, r0
 8006bdc:	6163      	str	r3, [r4, #20]
 8006bde:	9201      	str	r2, [sp, #4]
 8006be0:	9b01      	ldr	r3, [sp, #4]
 8006be2:	61a3      	str	r3, [r4, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bf14      	ite	ne
 8006be8:	2202      	movne	r2, #2
 8006bea:	2201      	moveq	r2, #1
 8006bec:	6122      	str	r2, [r4, #16]
 8006bee:	b1bd      	cbz	r5, 8006c20 <__d2b+0x94>
 8006bf0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bf4:	4405      	add	r5, r0
 8006bf6:	603d      	str	r5, [r7, #0]
 8006bf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bfc:	6030      	str	r0, [r6, #0]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	b003      	add	sp, #12
 8006c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c0a:	e7d6      	b.n	8006bba <__d2b+0x2e>
 8006c0c:	6161      	str	r1, [r4, #20]
 8006c0e:	e7e7      	b.n	8006be0 <__d2b+0x54>
 8006c10:	a801      	add	r0, sp, #4
 8006c12:	f7ff fcf1 	bl	80065f8 <__lo0bits>
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	6163      	str	r3, [r4, #20]
 8006c1a:	3020      	adds	r0, #32
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	e7e5      	b.n	8006bec <__d2b+0x60>
 8006c20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c28:	6038      	str	r0, [r7, #0]
 8006c2a:	6918      	ldr	r0, [r3, #16]
 8006c2c:	f7ff fcc4 	bl	80065b8 <__hi0bits>
 8006c30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c34:	e7e2      	b.n	8006bfc <__d2b+0x70>
 8006c36:	bf00      	nop
 8006c38:	08008d49 	.word	0x08008d49
 8006c3c:	08008d5a 	.word	0x08008d5a

08006c40 <__ratio>:
 8006c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	4688      	mov	r8, r1
 8006c46:	4669      	mov	r1, sp
 8006c48:	4681      	mov	r9, r0
 8006c4a:	f7ff ff55 	bl	8006af8 <__b2d>
 8006c4e:	a901      	add	r1, sp, #4
 8006c50:	4640      	mov	r0, r8
 8006c52:	ec55 4b10 	vmov	r4, r5, d0
 8006c56:	f7ff ff4f 	bl	8006af8 <__b2d>
 8006c5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006c62:	eba3 0c02 	sub.w	ip, r3, r2
 8006c66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006c70:	ec51 0b10 	vmov	r0, r1, d0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfd6      	itet	le
 8006c78:	460a      	movle	r2, r1
 8006c7a:	462a      	movgt	r2, r5
 8006c7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c80:	468b      	mov	fp, r1
 8006c82:	462f      	mov	r7, r5
 8006c84:	bfd4      	ite	le
 8006c86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006c8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006c8e:	4620      	mov	r0, r4
 8006c90:	ee10 2a10 	vmov	r2, s0
 8006c94:	465b      	mov	r3, fp
 8006c96:	4639      	mov	r1, r7
 8006c98:	f7f9 fdf8 	bl	800088c <__aeabi_ddiv>
 8006c9c:	ec41 0b10 	vmov	d0, r0, r1
 8006ca0:	b003      	add	sp, #12
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ca6 <__copybits>:
 8006ca6:	3901      	subs	r1, #1
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	1149      	asrs	r1, r1, #5
 8006cac:	6914      	ldr	r4, [r2, #16]
 8006cae:	3101      	adds	r1, #1
 8006cb0:	f102 0314 	add.w	r3, r2, #20
 8006cb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006cb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cbc:	1f05      	subs	r5, r0, #4
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	d30c      	bcc.n	8006cdc <__copybits+0x36>
 8006cc2:	1aa3      	subs	r3, r4, r2
 8006cc4:	3b11      	subs	r3, #17
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	3211      	adds	r2, #17
 8006ccc:	42a2      	cmp	r2, r4
 8006cce:	bf88      	it	hi
 8006cd0:	2300      	movhi	r3, #0
 8006cd2:	4418      	add	r0, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4288      	cmp	r0, r1
 8006cd8:	d305      	bcc.n	8006ce6 <__copybits+0x40>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ce0:	f845 6f04 	str.w	r6, [r5, #4]!
 8006ce4:	e7eb      	b.n	8006cbe <__copybits+0x18>
 8006ce6:	f840 3b04 	str.w	r3, [r0], #4
 8006cea:	e7f4      	b.n	8006cd6 <__copybits+0x30>

08006cec <__any_on>:
 8006cec:	f100 0214 	add.w	r2, r0, #20
 8006cf0:	6900      	ldr	r0, [r0, #16]
 8006cf2:	114b      	asrs	r3, r1, #5
 8006cf4:	4298      	cmp	r0, r3
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	db11      	blt.n	8006d1e <__any_on+0x32>
 8006cfa:	dd0a      	ble.n	8006d12 <__any_on+0x26>
 8006cfc:	f011 011f 	ands.w	r1, r1, #31
 8006d00:	d007      	beq.n	8006d12 <__any_on+0x26>
 8006d02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d06:	fa24 f001 	lsr.w	r0, r4, r1
 8006d0a:	fa00 f101 	lsl.w	r1, r0, r1
 8006d0e:	428c      	cmp	r4, r1
 8006d10:	d10b      	bne.n	8006d2a <__any_on+0x3e>
 8006d12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d803      	bhi.n	8006d22 <__any_on+0x36>
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	4603      	mov	r3, r0
 8006d20:	e7f7      	b.n	8006d12 <__any_on+0x26>
 8006d22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d26:	2900      	cmp	r1, #0
 8006d28:	d0f5      	beq.n	8006d16 <__any_on+0x2a>
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	e7f6      	b.n	8006d1c <__any_on+0x30>

08006d2e <sulp>:
 8006d2e:	b570      	push	{r4, r5, r6, lr}
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	ec45 4b10 	vmov	d0, r4, r5
 8006d38:	4616      	mov	r6, r2
 8006d3a:	f7ff feb7 	bl	8006aac <__ulp>
 8006d3e:	ec51 0b10 	vmov	r0, r1, d0
 8006d42:	b17e      	cbz	r6, 8006d64 <sulp+0x36>
 8006d44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	dd09      	ble.n	8006d64 <sulp+0x36>
 8006d50:	051b      	lsls	r3, r3, #20
 8006d52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d56:	2400      	movs	r4, #0
 8006d58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	462b      	mov	r3, r5
 8006d60:	f7f9 fc6a 	bl	8000638 <__aeabi_dmul>
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d68 <_strtod_l>:
 8006d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	ed2d 8b02 	vpush	{d8}
 8006d70:	b09b      	sub	sp, #108	; 0x6c
 8006d72:	4604      	mov	r4, r0
 8006d74:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d76:	2200      	movs	r2, #0
 8006d78:	9216      	str	r2, [sp, #88]	; 0x58
 8006d7a:	460d      	mov	r5, r1
 8006d7c:	f04f 0800 	mov.w	r8, #0
 8006d80:	f04f 0900 	mov.w	r9, #0
 8006d84:	460a      	mov	r2, r1
 8006d86:	9215      	str	r2, [sp, #84]	; 0x54
 8006d88:	7811      	ldrb	r1, [r2, #0]
 8006d8a:	292b      	cmp	r1, #43	; 0x2b
 8006d8c:	d04c      	beq.n	8006e28 <_strtod_l+0xc0>
 8006d8e:	d83a      	bhi.n	8006e06 <_strtod_l+0x9e>
 8006d90:	290d      	cmp	r1, #13
 8006d92:	d834      	bhi.n	8006dfe <_strtod_l+0x96>
 8006d94:	2908      	cmp	r1, #8
 8006d96:	d834      	bhi.n	8006e02 <_strtod_l+0x9a>
 8006d98:	2900      	cmp	r1, #0
 8006d9a:	d03d      	beq.n	8006e18 <_strtod_l+0xb0>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	920a      	str	r2, [sp, #40]	; 0x28
 8006da0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006da2:	7832      	ldrb	r2, [r6, #0]
 8006da4:	2a30      	cmp	r2, #48	; 0x30
 8006da6:	f040 80b4 	bne.w	8006f12 <_strtod_l+0x1aa>
 8006daa:	7872      	ldrb	r2, [r6, #1]
 8006dac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006db0:	2a58      	cmp	r2, #88	; 0x58
 8006db2:	d170      	bne.n	8006e96 <_strtod_l+0x12e>
 8006db4:	9302      	str	r3, [sp, #8]
 8006db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	ab16      	add	r3, sp, #88	; 0x58
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	4a8e      	ldr	r2, [pc, #568]	; (8006ff8 <_strtod_l+0x290>)
 8006dc0:	ab17      	add	r3, sp, #92	; 0x5c
 8006dc2:	a915      	add	r1, sp, #84	; 0x54
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f001 f93f 	bl	8008048 <__gethex>
 8006dca:	f010 070f 	ands.w	r7, r0, #15
 8006dce:	4605      	mov	r5, r0
 8006dd0:	d005      	beq.n	8006dde <_strtod_l+0x76>
 8006dd2:	2f06      	cmp	r7, #6
 8006dd4:	d12a      	bne.n	8006e2c <_strtod_l+0xc4>
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9615      	str	r6, [sp, #84]	; 0x54
 8006ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8006dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f040 857f 	bne.w	80078e4 <_strtod_l+0xb7c>
 8006de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de8:	b1db      	cbz	r3, 8006e22 <_strtod_l+0xba>
 8006dea:	4642      	mov	r2, r8
 8006dec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006df0:	ec43 2b10 	vmov	d0, r2, r3
 8006df4:	b01b      	add	sp, #108	; 0x6c
 8006df6:	ecbd 8b02 	vpop	{d8}
 8006dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfe:	2920      	cmp	r1, #32
 8006e00:	d1cc      	bne.n	8006d9c <_strtod_l+0x34>
 8006e02:	3201      	adds	r2, #1
 8006e04:	e7bf      	b.n	8006d86 <_strtod_l+0x1e>
 8006e06:	292d      	cmp	r1, #45	; 0x2d
 8006e08:	d1c8      	bne.n	8006d9c <_strtod_l+0x34>
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	910a      	str	r1, [sp, #40]	; 0x28
 8006e0e:	1c51      	adds	r1, r2, #1
 8006e10:	9115      	str	r1, [sp, #84]	; 0x54
 8006e12:	7852      	ldrb	r2, [r2, #1]
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	d1c3      	bne.n	8006da0 <_strtod_l+0x38>
 8006e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e1a:	9515      	str	r5, [sp, #84]	; 0x54
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 855f 	bne.w	80078e0 <_strtod_l+0xb78>
 8006e22:	4642      	mov	r2, r8
 8006e24:	464b      	mov	r3, r9
 8006e26:	e7e3      	b.n	8006df0 <_strtod_l+0x88>
 8006e28:	2100      	movs	r1, #0
 8006e2a:	e7ef      	b.n	8006e0c <_strtod_l+0xa4>
 8006e2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e2e:	b13a      	cbz	r2, 8006e40 <_strtod_l+0xd8>
 8006e30:	2135      	movs	r1, #53	; 0x35
 8006e32:	a818      	add	r0, sp, #96	; 0x60
 8006e34:	f7ff ff37 	bl	8006ca6 <__copybits>
 8006e38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f7ff fb0a 	bl	8006454 <_Bfree>
 8006e40:	3f01      	subs	r7, #1
 8006e42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e44:	2f04      	cmp	r7, #4
 8006e46:	d806      	bhi.n	8006e56 <_strtod_l+0xee>
 8006e48:	e8df f007 	tbb	[pc, r7]
 8006e4c:	201d0314 	.word	0x201d0314
 8006e50:	14          	.byte	0x14
 8006e51:	00          	.byte	0x00
 8006e52:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006e56:	05e9      	lsls	r1, r5, #23
 8006e58:	bf48      	it	mi
 8006e5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006e5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e62:	0d1b      	lsrs	r3, r3, #20
 8006e64:	051b      	lsls	r3, r3, #20
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1b9      	bne.n	8006dde <_strtod_l+0x76>
 8006e6a:	f7fe fb05 	bl	8005478 <__errno>
 8006e6e:	2322      	movs	r3, #34	; 0x22
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	e7b4      	b.n	8006dde <_strtod_l+0x76>
 8006e74:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006e78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e84:	e7e7      	b.n	8006e56 <_strtod_l+0xee>
 8006e86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007000 <_strtod_l+0x298>
 8006e8a:	e7e4      	b.n	8006e56 <_strtod_l+0xee>
 8006e8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006e90:	f04f 38ff 	mov.w	r8, #4294967295
 8006e94:	e7df      	b.n	8006e56 <_strtod_l+0xee>
 8006e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	9215      	str	r2, [sp, #84]	; 0x54
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b30      	cmp	r3, #48	; 0x30
 8006ea0:	d0f9      	beq.n	8006e96 <_strtod_l+0x12e>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d09b      	beq.n	8006dde <_strtod_l+0x76>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f04f 0a00 	mov.w	sl, #0
 8006eac:	9304      	str	r3, [sp, #16]
 8006eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006eb6:	46d3      	mov	fp, sl
 8006eb8:	220a      	movs	r2, #10
 8006eba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006ebc:	7806      	ldrb	r6, [r0, #0]
 8006ebe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006ec2:	b2d9      	uxtb	r1, r3
 8006ec4:	2909      	cmp	r1, #9
 8006ec6:	d926      	bls.n	8006f16 <_strtod_l+0x1ae>
 8006ec8:	494c      	ldr	r1, [pc, #304]	; (8006ffc <_strtod_l+0x294>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f000 ffe6 	bl	8007e9c <strncmp>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d030      	beq.n	8006f36 <_strtod_l+0x1ce>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	9005      	str	r0, [sp, #20]
 8006eda:	465e      	mov	r6, fp
 8006edc:	4603      	mov	r3, r0
 8006ede:	2a65      	cmp	r2, #101	; 0x65
 8006ee0:	d001      	beq.n	8006ee6 <_strtod_l+0x17e>
 8006ee2:	2a45      	cmp	r2, #69	; 0x45
 8006ee4:	d113      	bne.n	8006f0e <_strtod_l+0x1a6>
 8006ee6:	b91e      	cbnz	r6, 8006ef0 <_strtod_l+0x188>
 8006ee8:	9a04      	ldr	r2, [sp, #16]
 8006eea:	4302      	orrs	r2, r0
 8006eec:	d094      	beq.n	8006e18 <_strtod_l+0xb0>
 8006eee:	2600      	movs	r6, #0
 8006ef0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006ef2:	1c6a      	adds	r2, r5, #1
 8006ef4:	9215      	str	r2, [sp, #84]	; 0x54
 8006ef6:	786a      	ldrb	r2, [r5, #1]
 8006ef8:	2a2b      	cmp	r2, #43	; 0x2b
 8006efa:	d074      	beq.n	8006fe6 <_strtod_l+0x27e>
 8006efc:	2a2d      	cmp	r2, #45	; 0x2d
 8006efe:	d078      	beq.n	8006ff2 <_strtod_l+0x28a>
 8006f00:	f04f 0c00 	mov.w	ip, #0
 8006f04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f08:	2909      	cmp	r1, #9
 8006f0a:	d97f      	bls.n	800700c <_strtod_l+0x2a4>
 8006f0c:	9515      	str	r5, [sp, #84]	; 0x54
 8006f0e:	2700      	movs	r7, #0
 8006f10:	e09e      	b.n	8007050 <_strtod_l+0x2e8>
 8006f12:	2300      	movs	r3, #0
 8006f14:	e7c8      	b.n	8006ea8 <_strtod_l+0x140>
 8006f16:	f1bb 0f08 	cmp.w	fp, #8
 8006f1a:	bfd8      	it	le
 8006f1c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006f1e:	f100 0001 	add.w	r0, r0, #1
 8006f22:	bfda      	itte	le
 8006f24:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f28:	9309      	strle	r3, [sp, #36]	; 0x24
 8006f2a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006f2e:	f10b 0b01 	add.w	fp, fp, #1
 8006f32:	9015      	str	r0, [sp, #84]	; 0x54
 8006f34:	e7c1      	b.n	8006eba <_strtod_l+0x152>
 8006f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	9215      	str	r2, [sp, #84]	; 0x54
 8006f3c:	785a      	ldrb	r2, [r3, #1]
 8006f3e:	f1bb 0f00 	cmp.w	fp, #0
 8006f42:	d037      	beq.n	8006fb4 <_strtod_l+0x24c>
 8006f44:	9005      	str	r0, [sp, #20]
 8006f46:	465e      	mov	r6, fp
 8006f48:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f4c:	2b09      	cmp	r3, #9
 8006f4e:	d912      	bls.n	8006f76 <_strtod_l+0x20e>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e7c4      	b.n	8006ede <_strtod_l+0x176>
 8006f54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	9215      	str	r2, [sp, #84]	; 0x54
 8006f5a:	785a      	ldrb	r2, [r3, #1]
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	2a30      	cmp	r2, #48	; 0x30
 8006f60:	d0f8      	beq.n	8006f54 <_strtod_l+0x1ec>
 8006f62:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	f200 84c1 	bhi.w	80078ee <_strtod_l+0xb86>
 8006f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f6e:	9005      	str	r0, [sp, #20]
 8006f70:	2000      	movs	r0, #0
 8006f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f74:	4606      	mov	r6, r0
 8006f76:	3a30      	subs	r2, #48	; 0x30
 8006f78:	f100 0301 	add.w	r3, r0, #1
 8006f7c:	d014      	beq.n	8006fa8 <_strtod_l+0x240>
 8006f7e:	9905      	ldr	r1, [sp, #20]
 8006f80:	4419      	add	r1, r3
 8006f82:	9105      	str	r1, [sp, #20]
 8006f84:	4633      	mov	r3, r6
 8006f86:	eb00 0c06 	add.w	ip, r0, r6
 8006f8a:	210a      	movs	r1, #10
 8006f8c:	4563      	cmp	r3, ip
 8006f8e:	d113      	bne.n	8006fb8 <_strtod_l+0x250>
 8006f90:	1833      	adds	r3, r6, r0
 8006f92:	2b08      	cmp	r3, #8
 8006f94:	f106 0601 	add.w	r6, r6, #1
 8006f98:	4406      	add	r6, r0
 8006f9a:	dc1a      	bgt.n	8006fd2 <_strtod_l+0x26a>
 8006f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f9e:	230a      	movs	r3, #10
 8006fa0:	fb03 2301 	mla	r3, r3, r1, r2
 8006fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006faa:	1c51      	adds	r1, r2, #1
 8006fac:	9115      	str	r1, [sp, #84]	; 0x54
 8006fae:	7852      	ldrb	r2, [r2, #1]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	e7c9      	b.n	8006f48 <_strtod_l+0x1e0>
 8006fb4:	4658      	mov	r0, fp
 8006fb6:	e7d2      	b.n	8006f5e <_strtod_l+0x1f6>
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	f103 0301 	add.w	r3, r3, #1
 8006fbe:	dc03      	bgt.n	8006fc8 <_strtod_l+0x260>
 8006fc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fc2:	434f      	muls	r7, r1
 8006fc4:	9709      	str	r7, [sp, #36]	; 0x24
 8006fc6:	e7e1      	b.n	8006f8c <_strtod_l+0x224>
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	bfd8      	it	le
 8006fcc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006fd0:	e7dc      	b.n	8006f8c <_strtod_l+0x224>
 8006fd2:	2e10      	cmp	r6, #16
 8006fd4:	bfdc      	itt	le
 8006fd6:	230a      	movle	r3, #10
 8006fd8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006fdc:	e7e3      	b.n	8006fa6 <_strtod_l+0x23e>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e780      	b.n	8006ee8 <_strtod_l+0x180>
 8006fe6:	f04f 0c00 	mov.w	ip, #0
 8006fea:	1caa      	adds	r2, r5, #2
 8006fec:	9215      	str	r2, [sp, #84]	; 0x54
 8006fee:	78aa      	ldrb	r2, [r5, #2]
 8006ff0:	e788      	b.n	8006f04 <_strtod_l+0x19c>
 8006ff2:	f04f 0c01 	mov.w	ip, #1
 8006ff6:	e7f8      	b.n	8006fea <_strtod_l+0x282>
 8006ff8:	08008eb8 	.word	0x08008eb8
 8006ffc:	08008eb4 	.word	0x08008eb4
 8007000:	7ff00000 	.word	0x7ff00000
 8007004:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007006:	1c51      	adds	r1, r2, #1
 8007008:	9115      	str	r1, [sp, #84]	; 0x54
 800700a:	7852      	ldrb	r2, [r2, #1]
 800700c:	2a30      	cmp	r2, #48	; 0x30
 800700e:	d0f9      	beq.n	8007004 <_strtod_l+0x29c>
 8007010:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007014:	2908      	cmp	r1, #8
 8007016:	f63f af7a 	bhi.w	8006f0e <_strtod_l+0x1a6>
 800701a:	3a30      	subs	r2, #48	; 0x30
 800701c:	9208      	str	r2, [sp, #32]
 800701e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007020:	920c      	str	r2, [sp, #48]	; 0x30
 8007022:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007024:	1c57      	adds	r7, r2, #1
 8007026:	9715      	str	r7, [sp, #84]	; 0x54
 8007028:	7852      	ldrb	r2, [r2, #1]
 800702a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800702e:	f1be 0f09 	cmp.w	lr, #9
 8007032:	d938      	bls.n	80070a6 <_strtod_l+0x33e>
 8007034:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007036:	1a7f      	subs	r7, r7, r1
 8007038:	2f08      	cmp	r7, #8
 800703a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800703e:	dc03      	bgt.n	8007048 <_strtod_l+0x2e0>
 8007040:	9908      	ldr	r1, [sp, #32]
 8007042:	428f      	cmp	r7, r1
 8007044:	bfa8      	it	ge
 8007046:	460f      	movge	r7, r1
 8007048:	f1bc 0f00 	cmp.w	ip, #0
 800704c:	d000      	beq.n	8007050 <_strtod_l+0x2e8>
 800704e:	427f      	negs	r7, r7
 8007050:	2e00      	cmp	r6, #0
 8007052:	d14f      	bne.n	80070f4 <_strtod_l+0x38c>
 8007054:	9904      	ldr	r1, [sp, #16]
 8007056:	4301      	orrs	r1, r0
 8007058:	f47f aec1 	bne.w	8006dde <_strtod_l+0x76>
 800705c:	2b00      	cmp	r3, #0
 800705e:	f47f aedb 	bne.w	8006e18 <_strtod_l+0xb0>
 8007062:	2a69      	cmp	r2, #105	; 0x69
 8007064:	d029      	beq.n	80070ba <_strtod_l+0x352>
 8007066:	dc26      	bgt.n	80070b6 <_strtod_l+0x34e>
 8007068:	2a49      	cmp	r2, #73	; 0x49
 800706a:	d026      	beq.n	80070ba <_strtod_l+0x352>
 800706c:	2a4e      	cmp	r2, #78	; 0x4e
 800706e:	f47f aed3 	bne.w	8006e18 <_strtod_l+0xb0>
 8007072:	499b      	ldr	r1, [pc, #620]	; (80072e0 <_strtod_l+0x578>)
 8007074:	a815      	add	r0, sp, #84	; 0x54
 8007076:	f001 fa27 	bl	80084c8 <__match>
 800707a:	2800      	cmp	r0, #0
 800707c:	f43f aecc 	beq.w	8006e18 <_strtod_l+0xb0>
 8007080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b28      	cmp	r3, #40	; 0x28
 8007086:	d12f      	bne.n	80070e8 <_strtod_l+0x380>
 8007088:	4996      	ldr	r1, [pc, #600]	; (80072e4 <_strtod_l+0x57c>)
 800708a:	aa18      	add	r2, sp, #96	; 0x60
 800708c:	a815      	add	r0, sp, #84	; 0x54
 800708e:	f001 fa2f 	bl	80084f0 <__hexnan>
 8007092:	2805      	cmp	r0, #5
 8007094:	d128      	bne.n	80070e8 <_strtod_l+0x380>
 8007096:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007098:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800709c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80070a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80070a4:	e69b      	b.n	8006dde <_strtod_l+0x76>
 80070a6:	9f08      	ldr	r7, [sp, #32]
 80070a8:	210a      	movs	r1, #10
 80070aa:	fb01 2107 	mla	r1, r1, r7, r2
 80070ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80070b2:	9208      	str	r2, [sp, #32]
 80070b4:	e7b5      	b.n	8007022 <_strtod_l+0x2ba>
 80070b6:	2a6e      	cmp	r2, #110	; 0x6e
 80070b8:	e7d9      	b.n	800706e <_strtod_l+0x306>
 80070ba:	498b      	ldr	r1, [pc, #556]	; (80072e8 <_strtod_l+0x580>)
 80070bc:	a815      	add	r0, sp, #84	; 0x54
 80070be:	f001 fa03 	bl	80084c8 <__match>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f43f aea8 	beq.w	8006e18 <_strtod_l+0xb0>
 80070c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070ca:	4988      	ldr	r1, [pc, #544]	; (80072ec <_strtod_l+0x584>)
 80070cc:	3b01      	subs	r3, #1
 80070ce:	a815      	add	r0, sp, #84	; 0x54
 80070d0:	9315      	str	r3, [sp, #84]	; 0x54
 80070d2:	f001 f9f9 	bl	80084c8 <__match>
 80070d6:	b910      	cbnz	r0, 80070de <_strtod_l+0x376>
 80070d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070da:	3301      	adds	r3, #1
 80070dc:	9315      	str	r3, [sp, #84]	; 0x54
 80070de:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80072fc <_strtod_l+0x594>
 80070e2:	f04f 0800 	mov.w	r8, #0
 80070e6:	e67a      	b.n	8006dde <_strtod_l+0x76>
 80070e8:	4881      	ldr	r0, [pc, #516]	; (80072f0 <_strtod_l+0x588>)
 80070ea:	f000 ff09 	bl	8007f00 <nan>
 80070ee:	ec59 8b10 	vmov	r8, r9, d0
 80070f2:	e674      	b.n	8006dde <_strtod_l+0x76>
 80070f4:	9b05      	ldr	r3, [sp, #20]
 80070f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070f8:	1afb      	subs	r3, r7, r3
 80070fa:	f1bb 0f00 	cmp.w	fp, #0
 80070fe:	bf08      	it	eq
 8007100:	46b3      	moveq	fp, r6
 8007102:	2e10      	cmp	r6, #16
 8007104:	9308      	str	r3, [sp, #32]
 8007106:	4635      	mov	r5, r6
 8007108:	bfa8      	it	ge
 800710a:	2510      	movge	r5, #16
 800710c:	f7f9 fa1a 	bl	8000544 <__aeabi_ui2d>
 8007110:	2e09      	cmp	r6, #9
 8007112:	4680      	mov	r8, r0
 8007114:	4689      	mov	r9, r1
 8007116:	dd13      	ble.n	8007140 <_strtod_l+0x3d8>
 8007118:	4b76      	ldr	r3, [pc, #472]	; (80072f4 <_strtod_l+0x58c>)
 800711a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800711e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007122:	f7f9 fa89 	bl	8000638 <__aeabi_dmul>
 8007126:	4680      	mov	r8, r0
 8007128:	4650      	mov	r0, sl
 800712a:	4689      	mov	r9, r1
 800712c:	f7f9 fa0a 	bl	8000544 <__aeabi_ui2d>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4640      	mov	r0, r8
 8007136:	4649      	mov	r1, r9
 8007138:	f7f9 f8c8 	bl	80002cc <__adddf3>
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
 8007140:	2e0f      	cmp	r6, #15
 8007142:	dc38      	bgt.n	80071b6 <_strtod_l+0x44e>
 8007144:	9b08      	ldr	r3, [sp, #32]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f43f ae49 	beq.w	8006dde <_strtod_l+0x76>
 800714c:	dd24      	ble.n	8007198 <_strtod_l+0x430>
 800714e:	2b16      	cmp	r3, #22
 8007150:	dc0b      	bgt.n	800716a <_strtod_l+0x402>
 8007152:	4968      	ldr	r1, [pc, #416]	; (80072f4 <_strtod_l+0x58c>)
 8007154:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800715c:	4642      	mov	r2, r8
 800715e:	464b      	mov	r3, r9
 8007160:	f7f9 fa6a 	bl	8000638 <__aeabi_dmul>
 8007164:	4680      	mov	r8, r0
 8007166:	4689      	mov	r9, r1
 8007168:	e639      	b.n	8006dde <_strtod_l+0x76>
 800716a:	9a08      	ldr	r2, [sp, #32]
 800716c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007170:	4293      	cmp	r3, r2
 8007172:	db20      	blt.n	80071b6 <_strtod_l+0x44e>
 8007174:	4c5f      	ldr	r4, [pc, #380]	; (80072f4 <_strtod_l+0x58c>)
 8007176:	f1c6 060f 	rsb	r6, r6, #15
 800717a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007186:	f7f9 fa57 	bl	8000638 <__aeabi_dmul>
 800718a:	9b08      	ldr	r3, [sp, #32]
 800718c:	1b9e      	subs	r6, r3, r6
 800718e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007192:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007196:	e7e3      	b.n	8007160 <_strtod_l+0x3f8>
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	3316      	adds	r3, #22
 800719c:	db0b      	blt.n	80071b6 <_strtod_l+0x44e>
 800719e:	9b05      	ldr	r3, [sp, #20]
 80071a0:	1bdf      	subs	r7, r3, r7
 80071a2:	4b54      	ldr	r3, [pc, #336]	; (80072f4 <_strtod_l+0x58c>)
 80071a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80071a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ac:	4640      	mov	r0, r8
 80071ae:	4649      	mov	r1, r9
 80071b0:	f7f9 fb6c 	bl	800088c <__aeabi_ddiv>
 80071b4:	e7d6      	b.n	8007164 <_strtod_l+0x3fc>
 80071b6:	9b08      	ldr	r3, [sp, #32]
 80071b8:	1b75      	subs	r5, r6, r5
 80071ba:	441d      	add	r5, r3
 80071bc:	2d00      	cmp	r5, #0
 80071be:	dd70      	ble.n	80072a2 <_strtod_l+0x53a>
 80071c0:	f015 030f 	ands.w	r3, r5, #15
 80071c4:	d00a      	beq.n	80071dc <_strtod_l+0x474>
 80071c6:	494b      	ldr	r1, [pc, #300]	; (80072f4 <_strtod_l+0x58c>)
 80071c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d4:	f7f9 fa30 	bl	8000638 <__aeabi_dmul>
 80071d8:	4680      	mov	r8, r0
 80071da:	4689      	mov	r9, r1
 80071dc:	f035 050f 	bics.w	r5, r5, #15
 80071e0:	d04d      	beq.n	800727e <_strtod_l+0x516>
 80071e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80071e6:	dd22      	ble.n	800722e <_strtod_l+0x4c6>
 80071e8:	2500      	movs	r5, #0
 80071ea:	46ab      	mov	fp, r5
 80071ec:	9509      	str	r5, [sp, #36]	; 0x24
 80071ee:	9505      	str	r5, [sp, #20]
 80071f0:	2322      	movs	r3, #34	; 0x22
 80071f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80072fc <_strtod_l+0x594>
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	f04f 0800 	mov.w	r8, #0
 80071fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f43f aded 	beq.w	8006dde <_strtod_l+0x76>
 8007204:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007206:	4620      	mov	r0, r4
 8007208:	f7ff f924 	bl	8006454 <_Bfree>
 800720c:	9905      	ldr	r1, [sp, #20]
 800720e:	4620      	mov	r0, r4
 8007210:	f7ff f920 	bl	8006454 <_Bfree>
 8007214:	4659      	mov	r1, fp
 8007216:	4620      	mov	r0, r4
 8007218:	f7ff f91c 	bl	8006454 <_Bfree>
 800721c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800721e:	4620      	mov	r0, r4
 8007220:	f7ff f918 	bl	8006454 <_Bfree>
 8007224:	4629      	mov	r1, r5
 8007226:	4620      	mov	r0, r4
 8007228:	f7ff f914 	bl	8006454 <_Bfree>
 800722c:	e5d7      	b.n	8006dde <_strtod_l+0x76>
 800722e:	4b32      	ldr	r3, [pc, #200]	; (80072f8 <_strtod_l+0x590>)
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	2300      	movs	r3, #0
 8007234:	112d      	asrs	r5, r5, #4
 8007236:	4640      	mov	r0, r8
 8007238:	4649      	mov	r1, r9
 800723a:	469a      	mov	sl, r3
 800723c:	2d01      	cmp	r5, #1
 800723e:	dc21      	bgt.n	8007284 <_strtod_l+0x51c>
 8007240:	b10b      	cbz	r3, 8007246 <_strtod_l+0x4de>
 8007242:	4680      	mov	r8, r0
 8007244:	4689      	mov	r9, r1
 8007246:	492c      	ldr	r1, [pc, #176]	; (80072f8 <_strtod_l+0x590>)
 8007248:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800724c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007258:	f7f9 f9ee 	bl	8000638 <__aeabi_dmul>
 800725c:	4b27      	ldr	r3, [pc, #156]	; (80072fc <_strtod_l+0x594>)
 800725e:	460a      	mov	r2, r1
 8007260:	400b      	ands	r3, r1
 8007262:	4927      	ldr	r1, [pc, #156]	; (8007300 <_strtod_l+0x598>)
 8007264:	428b      	cmp	r3, r1
 8007266:	4680      	mov	r8, r0
 8007268:	d8be      	bhi.n	80071e8 <_strtod_l+0x480>
 800726a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800726e:	428b      	cmp	r3, r1
 8007270:	bf86      	itte	hi
 8007272:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007304 <_strtod_l+0x59c>
 8007276:	f04f 38ff 	movhi.w	r8, #4294967295
 800727a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800727e:	2300      	movs	r3, #0
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	e07b      	b.n	800737c <_strtod_l+0x614>
 8007284:	07ea      	lsls	r2, r5, #31
 8007286:	d505      	bpl.n	8007294 <_strtod_l+0x52c>
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f9 f9d3 	bl	8000638 <__aeabi_dmul>
 8007292:	2301      	movs	r3, #1
 8007294:	9a04      	ldr	r2, [sp, #16]
 8007296:	3208      	adds	r2, #8
 8007298:	f10a 0a01 	add.w	sl, sl, #1
 800729c:	106d      	asrs	r5, r5, #1
 800729e:	9204      	str	r2, [sp, #16]
 80072a0:	e7cc      	b.n	800723c <_strtod_l+0x4d4>
 80072a2:	d0ec      	beq.n	800727e <_strtod_l+0x516>
 80072a4:	426d      	negs	r5, r5
 80072a6:	f015 020f 	ands.w	r2, r5, #15
 80072aa:	d00a      	beq.n	80072c2 <_strtod_l+0x55a>
 80072ac:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <_strtod_l+0x58c>)
 80072ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072b2:	4640      	mov	r0, r8
 80072b4:	4649      	mov	r1, r9
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f9 fae7 	bl	800088c <__aeabi_ddiv>
 80072be:	4680      	mov	r8, r0
 80072c0:	4689      	mov	r9, r1
 80072c2:	112d      	asrs	r5, r5, #4
 80072c4:	d0db      	beq.n	800727e <_strtod_l+0x516>
 80072c6:	2d1f      	cmp	r5, #31
 80072c8:	dd1e      	ble.n	8007308 <_strtod_l+0x5a0>
 80072ca:	2500      	movs	r5, #0
 80072cc:	46ab      	mov	fp, r5
 80072ce:	9509      	str	r5, [sp, #36]	; 0x24
 80072d0:	9505      	str	r5, [sp, #20]
 80072d2:	2322      	movs	r3, #34	; 0x22
 80072d4:	f04f 0800 	mov.w	r8, #0
 80072d8:	f04f 0900 	mov.w	r9, #0
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	e78d      	b.n	80071fc <_strtod_l+0x494>
 80072e0:	08008ca1 	.word	0x08008ca1
 80072e4:	08008ecc 	.word	0x08008ecc
 80072e8:	08008c99 	.word	0x08008c99
 80072ec:	08008cd0 	.word	0x08008cd0
 80072f0:	0800905d 	.word	0x0800905d
 80072f4:	08008de0 	.word	0x08008de0
 80072f8:	08008db8 	.word	0x08008db8
 80072fc:	7ff00000 	.word	0x7ff00000
 8007300:	7ca00000 	.word	0x7ca00000
 8007304:	7fefffff 	.word	0x7fefffff
 8007308:	f015 0310 	ands.w	r3, r5, #16
 800730c:	bf18      	it	ne
 800730e:	236a      	movne	r3, #106	; 0x6a
 8007310:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80076b4 <_strtod_l+0x94c>
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	4640      	mov	r0, r8
 8007318:	4649      	mov	r1, r9
 800731a:	2300      	movs	r3, #0
 800731c:	07ea      	lsls	r2, r5, #31
 800731e:	d504      	bpl.n	800732a <_strtod_l+0x5c2>
 8007320:	e9da 2300 	ldrd	r2, r3, [sl]
 8007324:	f7f9 f988 	bl	8000638 <__aeabi_dmul>
 8007328:	2301      	movs	r3, #1
 800732a:	106d      	asrs	r5, r5, #1
 800732c:	f10a 0a08 	add.w	sl, sl, #8
 8007330:	d1f4      	bne.n	800731c <_strtod_l+0x5b4>
 8007332:	b10b      	cbz	r3, 8007338 <_strtod_l+0x5d0>
 8007334:	4680      	mov	r8, r0
 8007336:	4689      	mov	r9, r1
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	b1bb      	cbz	r3, 800736c <_strtod_l+0x604>
 800733c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007340:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007344:	2b00      	cmp	r3, #0
 8007346:	4649      	mov	r1, r9
 8007348:	dd10      	ble.n	800736c <_strtod_l+0x604>
 800734a:	2b1f      	cmp	r3, #31
 800734c:	f340 811e 	ble.w	800758c <_strtod_l+0x824>
 8007350:	2b34      	cmp	r3, #52	; 0x34
 8007352:	bfde      	ittt	le
 8007354:	f04f 33ff 	movle.w	r3, #4294967295
 8007358:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800735c:	4093      	lslle	r3, r2
 800735e:	f04f 0800 	mov.w	r8, #0
 8007362:	bfcc      	ite	gt
 8007364:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007368:	ea03 0901 	andle.w	r9, r3, r1
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	f7f9 fbc8 	bl	8000b08 <__aeabi_dcmpeq>
 8007378:	2800      	cmp	r0, #0
 800737a:	d1a6      	bne.n	80072ca <_strtod_l+0x562>
 800737c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007382:	4633      	mov	r3, r6
 8007384:	465a      	mov	r2, fp
 8007386:	4620      	mov	r0, r4
 8007388:	f7ff f8cc 	bl	8006524 <__s2b>
 800738c:	9009      	str	r0, [sp, #36]	; 0x24
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f af2a 	beq.w	80071e8 <_strtod_l+0x480>
 8007394:	9a08      	ldr	r2, [sp, #32]
 8007396:	9b05      	ldr	r3, [sp, #20]
 8007398:	2a00      	cmp	r2, #0
 800739a:	eba3 0307 	sub.w	r3, r3, r7
 800739e:	bfa8      	it	ge
 80073a0:	2300      	movge	r3, #0
 80073a2:	930c      	str	r3, [sp, #48]	; 0x30
 80073a4:	2500      	movs	r5, #0
 80073a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80073aa:	9312      	str	r3, [sp, #72]	; 0x48
 80073ac:	46ab      	mov	fp, r5
 80073ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b0:	4620      	mov	r0, r4
 80073b2:	6859      	ldr	r1, [r3, #4]
 80073b4:	f7ff f80e 	bl	80063d4 <_Balloc>
 80073b8:	9005      	str	r0, [sp, #20]
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f43f af18 	beq.w	80071f0 <_strtod_l+0x488>
 80073c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	3202      	adds	r2, #2
 80073c6:	f103 010c 	add.w	r1, r3, #12
 80073ca:	0092      	lsls	r2, r2, #2
 80073cc:	300c      	adds	r0, #12
 80073ce:	f000 fd87 	bl	8007ee0 <memcpy>
 80073d2:	ec49 8b10 	vmov	d0, r8, r9
 80073d6:	aa18      	add	r2, sp, #96	; 0x60
 80073d8:	a917      	add	r1, sp, #92	; 0x5c
 80073da:	4620      	mov	r0, r4
 80073dc:	f7ff fbd6 	bl	8006b8c <__d2b>
 80073e0:	ec49 8b18 	vmov	d8, r8, r9
 80073e4:	9016      	str	r0, [sp, #88]	; 0x58
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f43f af02 	beq.w	80071f0 <_strtod_l+0x488>
 80073ec:	2101      	movs	r1, #1
 80073ee:	4620      	mov	r0, r4
 80073f0:	f7ff f930 	bl	8006654 <__i2b>
 80073f4:	4683      	mov	fp, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f43f aefa 	beq.w	80071f0 <_strtod_l+0x488>
 80073fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80073fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007400:	2e00      	cmp	r6, #0
 8007402:	bfab      	itete	ge
 8007404:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007406:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007408:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800740a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800740e:	bfac      	ite	ge
 8007410:	eb06 0a03 	addge.w	sl, r6, r3
 8007414:	1b9f      	sublt	r7, r3, r6
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	1af6      	subs	r6, r6, r3
 800741a:	4416      	add	r6, r2
 800741c:	4ba0      	ldr	r3, [pc, #640]	; (80076a0 <_strtod_l+0x938>)
 800741e:	3e01      	subs	r6, #1
 8007420:	429e      	cmp	r6, r3
 8007422:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007426:	f280 80c4 	bge.w	80075b2 <_strtod_l+0x84a>
 800742a:	1b9b      	subs	r3, r3, r6
 800742c:	2b1f      	cmp	r3, #31
 800742e:	eba2 0203 	sub.w	r2, r2, r3
 8007432:	f04f 0101 	mov.w	r1, #1
 8007436:	f300 80b0 	bgt.w	800759a <_strtod_l+0x832>
 800743a:	fa01 f303 	lsl.w	r3, r1, r3
 800743e:	930e      	str	r3, [sp, #56]	; 0x38
 8007440:	2300      	movs	r3, #0
 8007442:	930d      	str	r3, [sp, #52]	; 0x34
 8007444:	eb0a 0602 	add.w	r6, sl, r2
 8007448:	9b04      	ldr	r3, [sp, #16]
 800744a:	45b2      	cmp	sl, r6
 800744c:	4417      	add	r7, r2
 800744e:	441f      	add	r7, r3
 8007450:	4653      	mov	r3, sl
 8007452:	bfa8      	it	ge
 8007454:	4633      	movge	r3, r6
 8007456:	42bb      	cmp	r3, r7
 8007458:	bfa8      	it	ge
 800745a:	463b      	movge	r3, r7
 800745c:	2b00      	cmp	r3, #0
 800745e:	bfc2      	ittt	gt
 8007460:	1af6      	subgt	r6, r6, r3
 8007462:	1aff      	subgt	r7, r7, r3
 8007464:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800746a:	2b00      	cmp	r3, #0
 800746c:	dd17      	ble.n	800749e <_strtod_l+0x736>
 800746e:	4659      	mov	r1, fp
 8007470:	461a      	mov	r2, r3
 8007472:	4620      	mov	r0, r4
 8007474:	f7ff f9ae 	bl	80067d4 <__pow5mult>
 8007478:	4683      	mov	fp, r0
 800747a:	2800      	cmp	r0, #0
 800747c:	f43f aeb8 	beq.w	80071f0 <_strtod_l+0x488>
 8007480:	4601      	mov	r1, r0
 8007482:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007484:	4620      	mov	r0, r4
 8007486:	f7ff f8fb 	bl	8006680 <__multiply>
 800748a:	900b      	str	r0, [sp, #44]	; 0x2c
 800748c:	2800      	cmp	r0, #0
 800748e:	f43f aeaf 	beq.w	80071f0 <_strtod_l+0x488>
 8007492:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007494:	4620      	mov	r0, r4
 8007496:	f7fe ffdd 	bl	8006454 <_Bfree>
 800749a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749c:	9316      	str	r3, [sp, #88]	; 0x58
 800749e:	2e00      	cmp	r6, #0
 80074a0:	f300 808c 	bgt.w	80075bc <_strtod_l+0x854>
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dd08      	ble.n	80074bc <_strtod_l+0x754>
 80074aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074ac:	9905      	ldr	r1, [sp, #20]
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7ff f990 	bl	80067d4 <__pow5mult>
 80074b4:	9005      	str	r0, [sp, #20]
 80074b6:	2800      	cmp	r0, #0
 80074b8:	f43f ae9a 	beq.w	80071f0 <_strtod_l+0x488>
 80074bc:	2f00      	cmp	r7, #0
 80074be:	dd08      	ble.n	80074d2 <_strtod_l+0x76a>
 80074c0:	9905      	ldr	r1, [sp, #20]
 80074c2:	463a      	mov	r2, r7
 80074c4:	4620      	mov	r0, r4
 80074c6:	f7ff f9df 	bl	8006888 <__lshift>
 80074ca:	9005      	str	r0, [sp, #20]
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f43f ae8f 	beq.w	80071f0 <_strtod_l+0x488>
 80074d2:	f1ba 0f00 	cmp.w	sl, #0
 80074d6:	dd08      	ble.n	80074ea <_strtod_l+0x782>
 80074d8:	4659      	mov	r1, fp
 80074da:	4652      	mov	r2, sl
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff f9d3 	bl	8006888 <__lshift>
 80074e2:	4683      	mov	fp, r0
 80074e4:	2800      	cmp	r0, #0
 80074e6:	f43f ae83 	beq.w	80071f0 <_strtod_l+0x488>
 80074ea:	9a05      	ldr	r2, [sp, #20]
 80074ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80074ee:	4620      	mov	r0, r4
 80074f0:	f7ff fa52 	bl	8006998 <__mdiff>
 80074f4:	4605      	mov	r5, r0
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f43f ae7a 	beq.w	80071f0 <_strtod_l+0x488>
 80074fc:	68c3      	ldr	r3, [r0, #12]
 80074fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007500:	2300      	movs	r3, #0
 8007502:	60c3      	str	r3, [r0, #12]
 8007504:	4659      	mov	r1, fp
 8007506:	f7ff fa2b 	bl	8006960 <__mcmp>
 800750a:	2800      	cmp	r0, #0
 800750c:	da60      	bge.n	80075d0 <_strtod_l+0x868>
 800750e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007510:	ea53 0308 	orrs.w	r3, r3, r8
 8007514:	f040 8084 	bne.w	8007620 <_strtod_l+0x8b8>
 8007518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800751c:	2b00      	cmp	r3, #0
 800751e:	d17f      	bne.n	8007620 <_strtod_l+0x8b8>
 8007520:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007524:	0d1b      	lsrs	r3, r3, #20
 8007526:	051b      	lsls	r3, r3, #20
 8007528:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800752c:	d978      	bls.n	8007620 <_strtod_l+0x8b8>
 800752e:	696b      	ldr	r3, [r5, #20]
 8007530:	b913      	cbnz	r3, 8007538 <_strtod_l+0x7d0>
 8007532:	692b      	ldr	r3, [r5, #16]
 8007534:	2b01      	cmp	r3, #1
 8007536:	dd73      	ble.n	8007620 <_strtod_l+0x8b8>
 8007538:	4629      	mov	r1, r5
 800753a:	2201      	movs	r2, #1
 800753c:	4620      	mov	r0, r4
 800753e:	f7ff f9a3 	bl	8006888 <__lshift>
 8007542:	4659      	mov	r1, fp
 8007544:	4605      	mov	r5, r0
 8007546:	f7ff fa0b 	bl	8006960 <__mcmp>
 800754a:	2800      	cmp	r0, #0
 800754c:	dd68      	ble.n	8007620 <_strtod_l+0x8b8>
 800754e:	9904      	ldr	r1, [sp, #16]
 8007550:	4a54      	ldr	r2, [pc, #336]	; (80076a4 <_strtod_l+0x93c>)
 8007552:	464b      	mov	r3, r9
 8007554:	2900      	cmp	r1, #0
 8007556:	f000 8084 	beq.w	8007662 <_strtod_l+0x8fa>
 800755a:	ea02 0109 	and.w	r1, r2, r9
 800755e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007562:	dc7e      	bgt.n	8007662 <_strtod_l+0x8fa>
 8007564:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007568:	f77f aeb3 	ble.w	80072d2 <_strtod_l+0x56a>
 800756c:	4b4e      	ldr	r3, [pc, #312]	; (80076a8 <_strtod_l+0x940>)
 800756e:	4640      	mov	r0, r8
 8007570:	4649      	mov	r1, r9
 8007572:	2200      	movs	r2, #0
 8007574:	f7f9 f860 	bl	8000638 <__aeabi_dmul>
 8007578:	4b4a      	ldr	r3, [pc, #296]	; (80076a4 <_strtod_l+0x93c>)
 800757a:	400b      	ands	r3, r1
 800757c:	4680      	mov	r8, r0
 800757e:	4689      	mov	r9, r1
 8007580:	2b00      	cmp	r3, #0
 8007582:	f47f ae3f 	bne.w	8007204 <_strtod_l+0x49c>
 8007586:	2322      	movs	r3, #34	; 0x22
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	e63b      	b.n	8007204 <_strtod_l+0x49c>
 800758c:	f04f 32ff 	mov.w	r2, #4294967295
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	ea03 0808 	and.w	r8, r3, r8
 8007598:	e6e8      	b.n	800736c <_strtod_l+0x604>
 800759a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800759e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80075a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80075a6:	36e2      	adds	r6, #226	; 0xe2
 80075a8:	fa01 f306 	lsl.w	r3, r1, r6
 80075ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80075b0:	e748      	b.n	8007444 <_strtod_l+0x6dc>
 80075b2:	2100      	movs	r1, #0
 80075b4:	2301      	movs	r3, #1
 80075b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80075ba:	e743      	b.n	8007444 <_strtod_l+0x6dc>
 80075bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80075be:	4632      	mov	r2, r6
 80075c0:	4620      	mov	r0, r4
 80075c2:	f7ff f961 	bl	8006888 <__lshift>
 80075c6:	9016      	str	r0, [sp, #88]	; 0x58
 80075c8:	2800      	cmp	r0, #0
 80075ca:	f47f af6b 	bne.w	80074a4 <_strtod_l+0x73c>
 80075ce:	e60f      	b.n	80071f0 <_strtod_l+0x488>
 80075d0:	46ca      	mov	sl, r9
 80075d2:	d171      	bne.n	80076b8 <_strtod_l+0x950>
 80075d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075da:	b352      	cbz	r2, 8007632 <_strtod_l+0x8ca>
 80075dc:	4a33      	ldr	r2, [pc, #204]	; (80076ac <_strtod_l+0x944>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d12a      	bne.n	8007638 <_strtod_l+0x8d0>
 80075e2:	9b04      	ldr	r3, [sp, #16]
 80075e4:	4641      	mov	r1, r8
 80075e6:	b1fb      	cbz	r3, 8007628 <_strtod_l+0x8c0>
 80075e8:	4b2e      	ldr	r3, [pc, #184]	; (80076a4 <_strtod_l+0x93c>)
 80075ea:	ea09 0303 	and.w	r3, r9, r3
 80075ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075f2:	f04f 32ff 	mov.w	r2, #4294967295
 80075f6:	d81a      	bhi.n	800762e <_strtod_l+0x8c6>
 80075f8:	0d1b      	lsrs	r3, r3, #20
 80075fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	4299      	cmp	r1, r3
 8007604:	d118      	bne.n	8007638 <_strtod_l+0x8d0>
 8007606:	4b2a      	ldr	r3, [pc, #168]	; (80076b0 <_strtod_l+0x948>)
 8007608:	459a      	cmp	sl, r3
 800760a:	d102      	bne.n	8007612 <_strtod_l+0x8aa>
 800760c:	3101      	adds	r1, #1
 800760e:	f43f adef 	beq.w	80071f0 <_strtod_l+0x488>
 8007612:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <_strtod_l+0x93c>)
 8007614:	ea0a 0303 	and.w	r3, sl, r3
 8007618:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800761c:	f04f 0800 	mov.w	r8, #0
 8007620:	9b04      	ldr	r3, [sp, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1a2      	bne.n	800756c <_strtod_l+0x804>
 8007626:	e5ed      	b.n	8007204 <_strtod_l+0x49c>
 8007628:	f04f 33ff 	mov.w	r3, #4294967295
 800762c:	e7e9      	b.n	8007602 <_strtod_l+0x89a>
 800762e:	4613      	mov	r3, r2
 8007630:	e7e7      	b.n	8007602 <_strtod_l+0x89a>
 8007632:	ea53 0308 	orrs.w	r3, r3, r8
 8007636:	d08a      	beq.n	800754e <_strtod_l+0x7e6>
 8007638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800763a:	b1e3      	cbz	r3, 8007676 <_strtod_l+0x90e>
 800763c:	ea13 0f0a 	tst.w	r3, sl
 8007640:	d0ee      	beq.n	8007620 <_strtod_l+0x8b8>
 8007642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007644:	9a04      	ldr	r2, [sp, #16]
 8007646:	4640      	mov	r0, r8
 8007648:	4649      	mov	r1, r9
 800764a:	b1c3      	cbz	r3, 800767e <_strtod_l+0x916>
 800764c:	f7ff fb6f 	bl	8006d2e <sulp>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	ec51 0b18 	vmov	r0, r1, d8
 8007658:	f7f8 fe38 	bl	80002cc <__adddf3>
 800765c:	4680      	mov	r8, r0
 800765e:	4689      	mov	r9, r1
 8007660:	e7de      	b.n	8007620 <_strtod_l+0x8b8>
 8007662:	4013      	ands	r3, r2
 8007664:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007668:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800766c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007670:	f04f 38ff 	mov.w	r8, #4294967295
 8007674:	e7d4      	b.n	8007620 <_strtod_l+0x8b8>
 8007676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007678:	ea13 0f08 	tst.w	r3, r8
 800767c:	e7e0      	b.n	8007640 <_strtod_l+0x8d8>
 800767e:	f7ff fb56 	bl	8006d2e <sulp>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	ec51 0b18 	vmov	r0, r1, d8
 800768a:	f7f8 fe1d 	bl	80002c8 <__aeabi_dsub>
 800768e:	2200      	movs	r2, #0
 8007690:	2300      	movs	r3, #0
 8007692:	4680      	mov	r8, r0
 8007694:	4689      	mov	r9, r1
 8007696:	f7f9 fa37 	bl	8000b08 <__aeabi_dcmpeq>
 800769a:	2800      	cmp	r0, #0
 800769c:	d0c0      	beq.n	8007620 <_strtod_l+0x8b8>
 800769e:	e618      	b.n	80072d2 <_strtod_l+0x56a>
 80076a0:	fffffc02 	.word	0xfffffc02
 80076a4:	7ff00000 	.word	0x7ff00000
 80076a8:	39500000 	.word	0x39500000
 80076ac:	000fffff 	.word	0x000fffff
 80076b0:	7fefffff 	.word	0x7fefffff
 80076b4:	08008ee0 	.word	0x08008ee0
 80076b8:	4659      	mov	r1, fp
 80076ba:	4628      	mov	r0, r5
 80076bc:	f7ff fac0 	bl	8006c40 <__ratio>
 80076c0:	ec57 6b10 	vmov	r6, r7, d0
 80076c4:	ee10 0a10 	vmov	r0, s0
 80076c8:	2200      	movs	r2, #0
 80076ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076ce:	4639      	mov	r1, r7
 80076d0:	f7f9 fa2e 	bl	8000b30 <__aeabi_dcmple>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d071      	beq.n	80077bc <_strtod_l+0xa54>
 80076d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d17c      	bne.n	80077d8 <_strtod_l+0xa70>
 80076de:	f1b8 0f00 	cmp.w	r8, #0
 80076e2:	d15a      	bne.n	800779a <_strtod_l+0xa32>
 80076e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d15d      	bne.n	80077a8 <_strtod_l+0xa40>
 80076ec:	4b90      	ldr	r3, [pc, #576]	; (8007930 <_strtod_l+0xbc8>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	4630      	mov	r0, r6
 80076f2:	4639      	mov	r1, r7
 80076f4:	f7f9 fa12 	bl	8000b1c <__aeabi_dcmplt>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d15c      	bne.n	80077b6 <_strtod_l+0xa4e>
 80076fc:	4630      	mov	r0, r6
 80076fe:	4639      	mov	r1, r7
 8007700:	4b8c      	ldr	r3, [pc, #560]	; (8007934 <_strtod_l+0xbcc>)
 8007702:	2200      	movs	r2, #0
 8007704:	f7f8 ff98 	bl	8000638 <__aeabi_dmul>
 8007708:	4606      	mov	r6, r0
 800770a:	460f      	mov	r7, r1
 800770c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007710:	9606      	str	r6, [sp, #24]
 8007712:	9307      	str	r3, [sp, #28]
 8007714:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007718:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800771c:	4b86      	ldr	r3, [pc, #536]	; (8007938 <_strtod_l+0xbd0>)
 800771e:	ea0a 0303 	and.w	r3, sl, r3
 8007722:	930d      	str	r3, [sp, #52]	; 0x34
 8007724:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007726:	4b85      	ldr	r3, [pc, #532]	; (800793c <_strtod_l+0xbd4>)
 8007728:	429a      	cmp	r2, r3
 800772a:	f040 8090 	bne.w	800784e <_strtod_l+0xae6>
 800772e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007732:	ec49 8b10 	vmov	d0, r8, r9
 8007736:	f7ff f9b9 	bl	8006aac <__ulp>
 800773a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800773e:	ec51 0b10 	vmov	r0, r1, d0
 8007742:	f7f8 ff79 	bl	8000638 <__aeabi_dmul>
 8007746:	4642      	mov	r2, r8
 8007748:	464b      	mov	r3, r9
 800774a:	f7f8 fdbf 	bl	80002cc <__adddf3>
 800774e:	460b      	mov	r3, r1
 8007750:	4979      	ldr	r1, [pc, #484]	; (8007938 <_strtod_l+0xbd0>)
 8007752:	4a7b      	ldr	r2, [pc, #492]	; (8007940 <_strtod_l+0xbd8>)
 8007754:	4019      	ands	r1, r3
 8007756:	4291      	cmp	r1, r2
 8007758:	4680      	mov	r8, r0
 800775a:	d944      	bls.n	80077e6 <_strtod_l+0xa7e>
 800775c:	ee18 2a90 	vmov	r2, s17
 8007760:	4b78      	ldr	r3, [pc, #480]	; (8007944 <_strtod_l+0xbdc>)
 8007762:	429a      	cmp	r2, r3
 8007764:	d104      	bne.n	8007770 <_strtod_l+0xa08>
 8007766:	ee18 3a10 	vmov	r3, s16
 800776a:	3301      	adds	r3, #1
 800776c:	f43f ad40 	beq.w	80071f0 <_strtod_l+0x488>
 8007770:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007944 <_strtod_l+0xbdc>
 8007774:	f04f 38ff 	mov.w	r8, #4294967295
 8007778:	9916      	ldr	r1, [sp, #88]	; 0x58
 800777a:	4620      	mov	r0, r4
 800777c:	f7fe fe6a 	bl	8006454 <_Bfree>
 8007780:	9905      	ldr	r1, [sp, #20]
 8007782:	4620      	mov	r0, r4
 8007784:	f7fe fe66 	bl	8006454 <_Bfree>
 8007788:	4659      	mov	r1, fp
 800778a:	4620      	mov	r0, r4
 800778c:	f7fe fe62 	bl	8006454 <_Bfree>
 8007790:	4629      	mov	r1, r5
 8007792:	4620      	mov	r0, r4
 8007794:	f7fe fe5e 	bl	8006454 <_Bfree>
 8007798:	e609      	b.n	80073ae <_strtod_l+0x646>
 800779a:	f1b8 0f01 	cmp.w	r8, #1
 800779e:	d103      	bne.n	80077a8 <_strtod_l+0xa40>
 80077a0:	f1b9 0f00 	cmp.w	r9, #0
 80077a4:	f43f ad95 	beq.w	80072d2 <_strtod_l+0x56a>
 80077a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007900 <_strtod_l+0xb98>
 80077ac:	4f60      	ldr	r7, [pc, #384]	; (8007930 <_strtod_l+0xbc8>)
 80077ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077b2:	2600      	movs	r6, #0
 80077b4:	e7ae      	b.n	8007714 <_strtod_l+0x9ac>
 80077b6:	4f5f      	ldr	r7, [pc, #380]	; (8007934 <_strtod_l+0xbcc>)
 80077b8:	2600      	movs	r6, #0
 80077ba:	e7a7      	b.n	800770c <_strtod_l+0x9a4>
 80077bc:	4b5d      	ldr	r3, [pc, #372]	; (8007934 <_strtod_l+0xbcc>)
 80077be:	4630      	mov	r0, r6
 80077c0:	4639      	mov	r1, r7
 80077c2:	2200      	movs	r2, #0
 80077c4:	f7f8 ff38 	bl	8000638 <__aeabi_dmul>
 80077c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d09c      	beq.n	800770c <_strtod_l+0x9a4>
 80077d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80077d6:	e79d      	b.n	8007714 <_strtod_l+0x9ac>
 80077d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007908 <_strtod_l+0xba0>
 80077dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077e0:	ec57 6b17 	vmov	r6, r7, d7
 80077e4:	e796      	b.n	8007714 <_strtod_l+0x9ac>
 80077e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80077ea:	9b04      	ldr	r3, [sp, #16]
 80077ec:	46ca      	mov	sl, r9
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1c2      	bne.n	8007778 <_strtod_l+0xa10>
 80077f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077f8:	0d1b      	lsrs	r3, r3, #20
 80077fa:	051b      	lsls	r3, r3, #20
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d1bb      	bne.n	8007778 <_strtod_l+0xa10>
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f9 fa78 	bl	8000cf8 <__aeabi_d2lz>
 8007808:	f7f8 fee8 	bl	80005dc <__aeabi_l2d>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f8 fd58 	bl	80002c8 <__aeabi_dsub>
 8007818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800781a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800781e:	ea43 0308 	orr.w	r3, r3, r8
 8007822:	4313      	orrs	r3, r2
 8007824:	4606      	mov	r6, r0
 8007826:	460f      	mov	r7, r1
 8007828:	d054      	beq.n	80078d4 <_strtod_l+0xb6c>
 800782a:	a339      	add	r3, pc, #228	; (adr r3, 8007910 <_strtod_l+0xba8>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f7f9 f974 	bl	8000b1c <__aeabi_dcmplt>
 8007834:	2800      	cmp	r0, #0
 8007836:	f47f ace5 	bne.w	8007204 <_strtod_l+0x49c>
 800783a:	a337      	add	r3, pc, #220	; (adr r3, 8007918 <_strtod_l+0xbb0>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f9 f988 	bl	8000b58 <__aeabi_dcmpgt>
 8007848:	2800      	cmp	r0, #0
 800784a:	d095      	beq.n	8007778 <_strtod_l+0xa10>
 800784c:	e4da      	b.n	8007204 <_strtod_l+0x49c>
 800784e:	9b04      	ldr	r3, [sp, #16]
 8007850:	b333      	cbz	r3, 80078a0 <_strtod_l+0xb38>
 8007852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007854:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007858:	d822      	bhi.n	80078a0 <_strtod_l+0xb38>
 800785a:	a331      	add	r3, pc, #196	; (adr r3, 8007920 <_strtod_l+0xbb8>)
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	4630      	mov	r0, r6
 8007862:	4639      	mov	r1, r7
 8007864:	f7f9 f964 	bl	8000b30 <__aeabi_dcmple>
 8007868:	b1a0      	cbz	r0, 8007894 <_strtod_l+0xb2c>
 800786a:	4639      	mov	r1, r7
 800786c:	4630      	mov	r0, r6
 800786e:	f7f9 f9bb 	bl	8000be8 <__aeabi_d2uiz>
 8007872:	2801      	cmp	r0, #1
 8007874:	bf38      	it	cc
 8007876:	2001      	movcc	r0, #1
 8007878:	f7f8 fe64 	bl	8000544 <__aeabi_ui2d>
 800787c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800787e:	4606      	mov	r6, r0
 8007880:	460f      	mov	r7, r1
 8007882:	bb23      	cbnz	r3, 80078ce <_strtod_l+0xb66>
 8007884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007888:	9010      	str	r0, [sp, #64]	; 0x40
 800788a:	9311      	str	r3, [sp, #68]	; 0x44
 800788c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007890:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007898:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	930f      	str	r3, [sp, #60]	; 0x3c
 80078a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80078a4:	eeb0 0a48 	vmov.f32	s0, s16
 80078a8:	eef0 0a68 	vmov.f32	s1, s17
 80078ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80078b0:	f7ff f8fc 	bl	8006aac <__ulp>
 80078b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80078b8:	ec53 2b10 	vmov	r2, r3, d0
 80078bc:	f7f8 febc 	bl	8000638 <__aeabi_dmul>
 80078c0:	ec53 2b18 	vmov	r2, r3, d8
 80078c4:	f7f8 fd02 	bl	80002cc <__adddf3>
 80078c8:	4680      	mov	r8, r0
 80078ca:	4689      	mov	r9, r1
 80078cc:	e78d      	b.n	80077ea <_strtod_l+0xa82>
 80078ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80078d2:	e7db      	b.n	800788c <_strtod_l+0xb24>
 80078d4:	a314      	add	r3, pc, #80	; (adr r3, 8007928 <_strtod_l+0xbc0>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f7f9 f91f 	bl	8000b1c <__aeabi_dcmplt>
 80078de:	e7b3      	b.n	8007848 <_strtod_l+0xae0>
 80078e0:	2300      	movs	r3, #0
 80078e2:	930a      	str	r3, [sp, #40]	; 0x28
 80078e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	f7ff ba7c 	b.w	8006de6 <_strtod_l+0x7e>
 80078ee:	2a65      	cmp	r2, #101	; 0x65
 80078f0:	f43f ab75 	beq.w	8006fde <_strtod_l+0x276>
 80078f4:	2a45      	cmp	r2, #69	; 0x45
 80078f6:	f43f ab72 	beq.w	8006fde <_strtod_l+0x276>
 80078fa:	2301      	movs	r3, #1
 80078fc:	f7ff bbaa 	b.w	8007054 <_strtod_l+0x2ec>
 8007900:	00000000 	.word	0x00000000
 8007904:	bff00000 	.word	0xbff00000
 8007908:	00000000 	.word	0x00000000
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	94a03595 	.word	0x94a03595
 8007914:	3fdfffff 	.word	0x3fdfffff
 8007918:	35afe535 	.word	0x35afe535
 800791c:	3fe00000 	.word	0x3fe00000
 8007920:	ffc00000 	.word	0xffc00000
 8007924:	41dfffff 	.word	0x41dfffff
 8007928:	94a03595 	.word	0x94a03595
 800792c:	3fcfffff 	.word	0x3fcfffff
 8007930:	3ff00000 	.word	0x3ff00000
 8007934:	3fe00000 	.word	0x3fe00000
 8007938:	7ff00000 	.word	0x7ff00000
 800793c:	7fe00000 	.word	0x7fe00000
 8007940:	7c9fffff 	.word	0x7c9fffff
 8007944:	7fefffff 	.word	0x7fefffff

08007948 <_strtod_r>:
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <_strtod_r+0x8>)
 800794a:	f7ff ba0d 	b.w	8006d68 <_strtod_l>
 800794e:	bf00      	nop
 8007950:	20000068 	.word	0x20000068

08007954 <_strtol_l.constprop.0>:
 8007954:	2b01      	cmp	r3, #1
 8007956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795a:	d001      	beq.n	8007960 <_strtol_l.constprop.0+0xc>
 800795c:	2b24      	cmp	r3, #36	; 0x24
 800795e:	d906      	bls.n	800796e <_strtol_l.constprop.0+0x1a>
 8007960:	f7fd fd8a 	bl	8005478 <__errno>
 8007964:	2316      	movs	r3, #22
 8007966:	6003      	str	r3, [r0, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a54 <_strtol_l.constprop.0+0x100>
 8007972:	460d      	mov	r5, r1
 8007974:	462e      	mov	r6, r5
 8007976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800797a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800797e:	f017 0708 	ands.w	r7, r7, #8
 8007982:	d1f7      	bne.n	8007974 <_strtol_l.constprop.0+0x20>
 8007984:	2c2d      	cmp	r4, #45	; 0x2d
 8007986:	d132      	bne.n	80079ee <_strtol_l.constprop.0+0x9a>
 8007988:	782c      	ldrb	r4, [r5, #0]
 800798a:	2701      	movs	r7, #1
 800798c:	1cb5      	adds	r5, r6, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d05b      	beq.n	8007a4a <_strtol_l.constprop.0+0xf6>
 8007992:	2b10      	cmp	r3, #16
 8007994:	d109      	bne.n	80079aa <_strtol_l.constprop.0+0x56>
 8007996:	2c30      	cmp	r4, #48	; 0x30
 8007998:	d107      	bne.n	80079aa <_strtol_l.constprop.0+0x56>
 800799a:	782c      	ldrb	r4, [r5, #0]
 800799c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80079a0:	2c58      	cmp	r4, #88	; 0x58
 80079a2:	d14d      	bne.n	8007a40 <_strtol_l.constprop.0+0xec>
 80079a4:	786c      	ldrb	r4, [r5, #1]
 80079a6:	2310      	movs	r3, #16
 80079a8:	3502      	adds	r5, #2
 80079aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80079ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80079b2:	f04f 0e00 	mov.w	lr, #0
 80079b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80079ba:	4676      	mov	r6, lr
 80079bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80079c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079c4:	f1bc 0f09 	cmp.w	ip, #9
 80079c8:	d816      	bhi.n	80079f8 <_strtol_l.constprop.0+0xa4>
 80079ca:	4664      	mov	r4, ip
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	dd24      	ble.n	8007a1a <_strtol_l.constprop.0+0xc6>
 80079d0:	f1be 3fff 	cmp.w	lr, #4294967295
 80079d4:	d008      	beq.n	80079e8 <_strtol_l.constprop.0+0x94>
 80079d6:	45b1      	cmp	r9, r6
 80079d8:	d31c      	bcc.n	8007a14 <_strtol_l.constprop.0+0xc0>
 80079da:	d101      	bne.n	80079e0 <_strtol_l.constprop.0+0x8c>
 80079dc:	45a2      	cmp	sl, r4
 80079de:	db19      	blt.n	8007a14 <_strtol_l.constprop.0+0xc0>
 80079e0:	fb06 4603 	mla	r6, r6, r3, r4
 80079e4:	f04f 0e01 	mov.w	lr, #1
 80079e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079ec:	e7e8      	b.n	80079c0 <_strtol_l.constprop.0+0x6c>
 80079ee:	2c2b      	cmp	r4, #43	; 0x2b
 80079f0:	bf04      	itt	eq
 80079f2:	782c      	ldrbeq	r4, [r5, #0]
 80079f4:	1cb5      	addeq	r5, r6, #2
 80079f6:	e7ca      	b.n	800798e <_strtol_l.constprop.0+0x3a>
 80079f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80079fc:	f1bc 0f19 	cmp.w	ip, #25
 8007a00:	d801      	bhi.n	8007a06 <_strtol_l.constprop.0+0xb2>
 8007a02:	3c37      	subs	r4, #55	; 0x37
 8007a04:	e7e2      	b.n	80079cc <_strtol_l.constprop.0+0x78>
 8007a06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a0a:	f1bc 0f19 	cmp.w	ip, #25
 8007a0e:	d804      	bhi.n	8007a1a <_strtol_l.constprop.0+0xc6>
 8007a10:	3c57      	subs	r4, #87	; 0x57
 8007a12:	e7db      	b.n	80079cc <_strtol_l.constprop.0+0x78>
 8007a14:	f04f 3eff 	mov.w	lr, #4294967295
 8007a18:	e7e6      	b.n	80079e8 <_strtol_l.constprop.0+0x94>
 8007a1a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007a1e:	d105      	bne.n	8007a2c <_strtol_l.constprop.0+0xd8>
 8007a20:	2322      	movs	r3, #34	; 0x22
 8007a22:	6003      	str	r3, [r0, #0]
 8007a24:	4646      	mov	r6, r8
 8007a26:	b942      	cbnz	r2, 8007a3a <_strtol_l.constprop.0+0xe6>
 8007a28:	4630      	mov	r0, r6
 8007a2a:	e79e      	b.n	800796a <_strtol_l.constprop.0+0x16>
 8007a2c:	b107      	cbz	r7, 8007a30 <_strtol_l.constprop.0+0xdc>
 8007a2e:	4276      	negs	r6, r6
 8007a30:	2a00      	cmp	r2, #0
 8007a32:	d0f9      	beq.n	8007a28 <_strtol_l.constprop.0+0xd4>
 8007a34:	f1be 0f00 	cmp.w	lr, #0
 8007a38:	d000      	beq.n	8007a3c <_strtol_l.constprop.0+0xe8>
 8007a3a:	1e69      	subs	r1, r5, #1
 8007a3c:	6011      	str	r1, [r2, #0]
 8007a3e:	e7f3      	b.n	8007a28 <_strtol_l.constprop.0+0xd4>
 8007a40:	2430      	movs	r4, #48	; 0x30
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1b1      	bne.n	80079aa <_strtol_l.constprop.0+0x56>
 8007a46:	2308      	movs	r3, #8
 8007a48:	e7af      	b.n	80079aa <_strtol_l.constprop.0+0x56>
 8007a4a:	2c30      	cmp	r4, #48	; 0x30
 8007a4c:	d0a5      	beq.n	800799a <_strtol_l.constprop.0+0x46>
 8007a4e:	230a      	movs	r3, #10
 8007a50:	e7ab      	b.n	80079aa <_strtol_l.constprop.0+0x56>
 8007a52:	bf00      	nop
 8007a54:	08008f09 	.word	0x08008f09

08007a58 <_strtol_r>:
 8007a58:	f7ff bf7c 	b.w	8007954 <_strtol_l.constprop.0>

08007a5c <__ssputs_r>:
 8007a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	688e      	ldr	r6, [r1, #8]
 8007a62:	461f      	mov	r7, r3
 8007a64:	42be      	cmp	r6, r7
 8007a66:	680b      	ldr	r3, [r1, #0]
 8007a68:	4682      	mov	sl, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	4690      	mov	r8, r2
 8007a6e:	d82c      	bhi.n	8007aca <__ssputs_r+0x6e>
 8007a70:	898a      	ldrh	r2, [r1, #12]
 8007a72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a76:	d026      	beq.n	8007ac6 <__ssputs_r+0x6a>
 8007a78:	6965      	ldr	r5, [r4, #20]
 8007a7a:	6909      	ldr	r1, [r1, #16]
 8007a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a80:	eba3 0901 	sub.w	r9, r3, r1
 8007a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a88:	1c7b      	adds	r3, r7, #1
 8007a8a:	444b      	add	r3, r9
 8007a8c:	106d      	asrs	r5, r5, #1
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	bf38      	it	cc
 8007a92:	461d      	movcc	r5, r3
 8007a94:	0553      	lsls	r3, r2, #21
 8007a96:	d527      	bpl.n	8007ae8 <__ssputs_r+0x8c>
 8007a98:	4629      	mov	r1, r5
 8007a9a:	f7fe fc0f 	bl	80062bc <_malloc_r>
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	b360      	cbz	r0, 8007afc <__ssputs_r+0xa0>
 8007aa2:	6921      	ldr	r1, [r4, #16]
 8007aa4:	464a      	mov	r2, r9
 8007aa6:	f000 fa1b 	bl	8007ee0 <memcpy>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	6126      	str	r6, [r4, #16]
 8007ab8:	6165      	str	r5, [r4, #20]
 8007aba:	444e      	add	r6, r9
 8007abc:	eba5 0509 	sub.w	r5, r5, r9
 8007ac0:	6026      	str	r6, [r4, #0]
 8007ac2:	60a5      	str	r5, [r4, #8]
 8007ac4:	463e      	mov	r6, r7
 8007ac6:	42be      	cmp	r6, r7
 8007ac8:	d900      	bls.n	8007acc <__ssputs_r+0x70>
 8007aca:	463e      	mov	r6, r7
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	4632      	mov	r2, r6
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	f000 f9c9 	bl	8007e68 <memmove>
 8007ad6:	68a3      	ldr	r3, [r4, #8]
 8007ad8:	1b9b      	subs	r3, r3, r6
 8007ada:	60a3      	str	r3, [r4, #8]
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	4433      	add	r3, r6
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	462a      	mov	r2, r5
 8007aea:	f000 fdae 	bl	800864a <_realloc_r>
 8007aee:	4606      	mov	r6, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d1e0      	bne.n	8007ab6 <__ssputs_r+0x5a>
 8007af4:	6921      	ldr	r1, [r4, #16]
 8007af6:	4650      	mov	r0, sl
 8007af8:	f7fe fb6c 	bl	80061d4 <_free_r>
 8007afc:	230c      	movs	r3, #12
 8007afe:	f8ca 3000 	str.w	r3, [sl]
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0e:	e7e9      	b.n	8007ae4 <__ssputs_r+0x88>

08007b10 <_svfiprintf_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	4698      	mov	r8, r3
 8007b16:	898b      	ldrh	r3, [r1, #12]
 8007b18:	061b      	lsls	r3, r3, #24
 8007b1a:	b09d      	sub	sp, #116	; 0x74
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	460d      	mov	r5, r1
 8007b20:	4614      	mov	r4, r2
 8007b22:	d50e      	bpl.n	8007b42 <_svfiprintf_r+0x32>
 8007b24:	690b      	ldr	r3, [r1, #16]
 8007b26:	b963      	cbnz	r3, 8007b42 <_svfiprintf_r+0x32>
 8007b28:	2140      	movs	r1, #64	; 0x40
 8007b2a:	f7fe fbc7 	bl	80062bc <_malloc_r>
 8007b2e:	6028      	str	r0, [r5, #0]
 8007b30:	6128      	str	r0, [r5, #16]
 8007b32:	b920      	cbnz	r0, 8007b3e <_svfiprintf_r+0x2e>
 8007b34:	230c      	movs	r3, #12
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	e0d0      	b.n	8007ce0 <_svfiprintf_r+0x1d0>
 8007b3e:	2340      	movs	r3, #64	; 0x40
 8007b40:	616b      	str	r3, [r5, #20]
 8007b42:	2300      	movs	r3, #0
 8007b44:	9309      	str	r3, [sp, #36]	; 0x24
 8007b46:	2320      	movs	r3, #32
 8007b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b50:	2330      	movs	r3, #48	; 0x30
 8007b52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cf8 <_svfiprintf_r+0x1e8>
 8007b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b5a:	f04f 0901 	mov.w	r9, #1
 8007b5e:	4623      	mov	r3, r4
 8007b60:	469a      	mov	sl, r3
 8007b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b66:	b10a      	cbz	r2, 8007b6c <_svfiprintf_r+0x5c>
 8007b68:	2a25      	cmp	r2, #37	; 0x25
 8007b6a:	d1f9      	bne.n	8007b60 <_svfiprintf_r+0x50>
 8007b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b70:	d00b      	beq.n	8007b8a <_svfiprintf_r+0x7a>
 8007b72:	465b      	mov	r3, fp
 8007b74:	4622      	mov	r2, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ff6f 	bl	8007a5c <__ssputs_r>
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f000 80a9 	beq.w	8007cd6 <_svfiprintf_r+0x1c6>
 8007b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b86:	445a      	add	r2, fp
 8007b88:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80a1 	beq.w	8007cd6 <_svfiprintf_r+0x1c6>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	9307      	str	r3, [sp, #28]
 8007ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007baa:	931a      	str	r3, [sp, #104]	; 0x68
 8007bac:	4654      	mov	r4, sl
 8007bae:	2205      	movs	r2, #5
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	4850      	ldr	r0, [pc, #320]	; (8007cf8 <_svfiprintf_r+0x1e8>)
 8007bb6:	f7f8 fb2b 	bl	8000210 <memchr>
 8007bba:	9a04      	ldr	r2, [sp, #16]
 8007bbc:	b9d8      	cbnz	r0, 8007bf6 <_svfiprintf_r+0xe6>
 8007bbe:	06d0      	lsls	r0, r2, #27
 8007bc0:	bf44      	itt	mi
 8007bc2:	2320      	movmi	r3, #32
 8007bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc8:	0711      	lsls	r1, r2, #28
 8007bca:	bf44      	itt	mi
 8007bcc:	232b      	movmi	r3, #43	; 0x2b
 8007bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd8:	d015      	beq.n	8007c06 <_svfiprintf_r+0xf6>
 8007bda:	9a07      	ldr	r2, [sp, #28]
 8007bdc:	4654      	mov	r4, sl
 8007bde:	2000      	movs	r0, #0
 8007be0:	f04f 0c0a 	mov.w	ip, #10
 8007be4:	4621      	mov	r1, r4
 8007be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bea:	3b30      	subs	r3, #48	; 0x30
 8007bec:	2b09      	cmp	r3, #9
 8007bee:	d94d      	bls.n	8007c8c <_svfiprintf_r+0x17c>
 8007bf0:	b1b0      	cbz	r0, 8007c20 <_svfiprintf_r+0x110>
 8007bf2:	9207      	str	r2, [sp, #28]
 8007bf4:	e014      	b.n	8007c20 <_svfiprintf_r+0x110>
 8007bf6:	eba0 0308 	sub.w	r3, r0, r8
 8007bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	46a2      	mov	sl, r4
 8007c04:	e7d2      	b.n	8007bac <_svfiprintf_r+0x9c>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	1d19      	adds	r1, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9103      	str	r1, [sp, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfbb      	ittet	lt
 8007c12:	425b      	neglt	r3, r3
 8007c14:	f042 0202 	orrlt.w	r2, r2, #2
 8007c18:	9307      	strge	r3, [sp, #28]
 8007c1a:	9307      	strlt	r3, [sp, #28]
 8007c1c:	bfb8      	it	lt
 8007c1e:	9204      	strlt	r2, [sp, #16]
 8007c20:	7823      	ldrb	r3, [r4, #0]
 8007c22:	2b2e      	cmp	r3, #46	; 0x2e
 8007c24:	d10c      	bne.n	8007c40 <_svfiprintf_r+0x130>
 8007c26:	7863      	ldrb	r3, [r4, #1]
 8007c28:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2a:	d134      	bne.n	8007c96 <_svfiprintf_r+0x186>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	9203      	str	r2, [sp, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bfb8      	it	lt
 8007c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c3c:	3402      	adds	r4, #2
 8007c3e:	9305      	str	r3, [sp, #20]
 8007c40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d08 <_svfiprintf_r+0x1f8>
 8007c44:	7821      	ldrb	r1, [r4, #0]
 8007c46:	2203      	movs	r2, #3
 8007c48:	4650      	mov	r0, sl
 8007c4a:	f7f8 fae1 	bl	8000210 <memchr>
 8007c4e:	b138      	cbz	r0, 8007c60 <_svfiprintf_r+0x150>
 8007c50:	9b04      	ldr	r3, [sp, #16]
 8007c52:	eba0 000a 	sub.w	r0, r0, sl
 8007c56:	2240      	movs	r2, #64	; 0x40
 8007c58:	4082      	lsls	r2, r0
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	3401      	adds	r4, #1
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c64:	4825      	ldr	r0, [pc, #148]	; (8007cfc <_svfiprintf_r+0x1ec>)
 8007c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	f7f8 fad0 	bl	8000210 <memchr>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d038      	beq.n	8007ce6 <_svfiprintf_r+0x1d6>
 8007c74:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <_svfiprintf_r+0x1f0>)
 8007c76:	bb1b      	cbnz	r3, 8007cc0 <_svfiprintf_r+0x1b0>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	3307      	adds	r3, #7
 8007c7c:	f023 0307 	bic.w	r3, r3, #7
 8007c80:	3308      	adds	r3, #8
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c86:	4433      	add	r3, r6
 8007c88:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8a:	e768      	b.n	8007b5e <_svfiprintf_r+0x4e>
 8007c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c90:	460c      	mov	r4, r1
 8007c92:	2001      	movs	r0, #1
 8007c94:	e7a6      	b.n	8007be4 <_svfiprintf_r+0xd4>
 8007c96:	2300      	movs	r3, #0
 8007c98:	3401      	adds	r4, #1
 8007c9a:	9305      	str	r3, [sp, #20]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	f04f 0c0a 	mov.w	ip, #10
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ca8:	3a30      	subs	r2, #48	; 0x30
 8007caa:	2a09      	cmp	r2, #9
 8007cac:	d903      	bls.n	8007cb6 <_svfiprintf_r+0x1a6>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0c6      	beq.n	8007c40 <_svfiprintf_r+0x130>
 8007cb2:	9105      	str	r1, [sp, #20]
 8007cb4:	e7c4      	b.n	8007c40 <_svfiprintf_r+0x130>
 8007cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cba:	4604      	mov	r4, r0
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e7f0      	b.n	8007ca2 <_svfiprintf_r+0x192>
 8007cc0:	ab03      	add	r3, sp, #12
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	; (8007d04 <_svfiprintf_r+0x1f4>)
 8007cc8:	a904      	add	r1, sp, #16
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f7fc fc52 	bl	8004574 <_printf_float>
 8007cd0:	1c42      	adds	r2, r0, #1
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	d1d6      	bne.n	8007c84 <_svfiprintf_r+0x174>
 8007cd6:	89ab      	ldrh	r3, [r5, #12]
 8007cd8:	065b      	lsls	r3, r3, #25
 8007cda:	f53f af2d 	bmi.w	8007b38 <_svfiprintf_r+0x28>
 8007cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce0:	b01d      	add	sp, #116	; 0x74
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	ab03      	add	r3, sp, #12
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	462a      	mov	r2, r5
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <_svfiprintf_r+0x1f4>)
 8007cee:	a904      	add	r1, sp, #16
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7fc fee3 	bl	8004abc <_printf_i>
 8007cf6:	e7eb      	b.n	8007cd0 <_svfiprintf_r+0x1c0>
 8007cf8:	08009009 	.word	0x08009009
 8007cfc:	08009013 	.word	0x08009013
 8007d00:	08004575 	.word	0x08004575
 8007d04:	08007a5d 	.word	0x08007a5d
 8007d08:	0800900f 	.word	0x0800900f

08007d0c <__sflush_r>:
 8007d0c:	898a      	ldrh	r2, [r1, #12]
 8007d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d12:	4605      	mov	r5, r0
 8007d14:	0710      	lsls	r0, r2, #28
 8007d16:	460c      	mov	r4, r1
 8007d18:	d458      	bmi.n	8007dcc <__sflush_r+0xc0>
 8007d1a:	684b      	ldr	r3, [r1, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dc05      	bgt.n	8007d2c <__sflush_r+0x20>
 8007d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dc02      	bgt.n	8007d2c <__sflush_r+0x20>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d2e:	2e00      	cmp	r6, #0
 8007d30:	d0f9      	beq.n	8007d26 <__sflush_r+0x1a>
 8007d32:	2300      	movs	r3, #0
 8007d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d38:	682f      	ldr	r7, [r5, #0]
 8007d3a:	6a21      	ldr	r1, [r4, #32]
 8007d3c:	602b      	str	r3, [r5, #0]
 8007d3e:	d032      	beq.n	8007da6 <__sflush_r+0x9a>
 8007d40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	075a      	lsls	r2, r3, #29
 8007d46:	d505      	bpl.n	8007d54 <__sflush_r+0x48>
 8007d48:	6863      	ldr	r3, [r4, #4]
 8007d4a:	1ac0      	subs	r0, r0, r3
 8007d4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d4e:	b10b      	cbz	r3, 8007d54 <__sflush_r+0x48>
 8007d50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d52:	1ac0      	subs	r0, r0, r3
 8007d54:	2300      	movs	r3, #0
 8007d56:	4602      	mov	r2, r0
 8007d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d5a:	6a21      	ldr	r1, [r4, #32]
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b0      	blx	r6
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	d106      	bne.n	8007d74 <__sflush_r+0x68>
 8007d66:	6829      	ldr	r1, [r5, #0]
 8007d68:	291d      	cmp	r1, #29
 8007d6a:	d82b      	bhi.n	8007dc4 <__sflush_r+0xb8>
 8007d6c:	4a29      	ldr	r2, [pc, #164]	; (8007e14 <__sflush_r+0x108>)
 8007d6e:	410a      	asrs	r2, r1
 8007d70:	07d6      	lsls	r6, r2, #31
 8007d72:	d427      	bmi.n	8007dc4 <__sflush_r+0xb8>
 8007d74:	2200      	movs	r2, #0
 8007d76:	6062      	str	r2, [r4, #4]
 8007d78:	04d9      	lsls	r1, r3, #19
 8007d7a:	6922      	ldr	r2, [r4, #16]
 8007d7c:	6022      	str	r2, [r4, #0]
 8007d7e:	d504      	bpl.n	8007d8a <__sflush_r+0x7e>
 8007d80:	1c42      	adds	r2, r0, #1
 8007d82:	d101      	bne.n	8007d88 <__sflush_r+0x7c>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b903      	cbnz	r3, 8007d8a <__sflush_r+0x7e>
 8007d88:	6560      	str	r0, [r4, #84]	; 0x54
 8007d8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d8c:	602f      	str	r7, [r5, #0]
 8007d8e:	2900      	cmp	r1, #0
 8007d90:	d0c9      	beq.n	8007d26 <__sflush_r+0x1a>
 8007d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d96:	4299      	cmp	r1, r3
 8007d98:	d002      	beq.n	8007da0 <__sflush_r+0x94>
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7fe fa1a 	bl	80061d4 <_free_r>
 8007da0:	2000      	movs	r0, #0
 8007da2:	6360      	str	r0, [r4, #52]	; 0x34
 8007da4:	e7c0      	b.n	8007d28 <__sflush_r+0x1c>
 8007da6:	2301      	movs	r3, #1
 8007da8:	4628      	mov	r0, r5
 8007daa:	47b0      	blx	r6
 8007dac:	1c41      	adds	r1, r0, #1
 8007dae:	d1c8      	bne.n	8007d42 <__sflush_r+0x36>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0c5      	beq.n	8007d42 <__sflush_r+0x36>
 8007db6:	2b1d      	cmp	r3, #29
 8007db8:	d001      	beq.n	8007dbe <__sflush_r+0xb2>
 8007dba:	2b16      	cmp	r3, #22
 8007dbc:	d101      	bne.n	8007dc2 <__sflush_r+0xb6>
 8007dbe:	602f      	str	r7, [r5, #0]
 8007dc0:	e7b1      	b.n	8007d26 <__sflush_r+0x1a>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	e7ad      	b.n	8007d28 <__sflush_r+0x1c>
 8007dcc:	690f      	ldr	r7, [r1, #16]
 8007dce:	2f00      	cmp	r7, #0
 8007dd0:	d0a9      	beq.n	8007d26 <__sflush_r+0x1a>
 8007dd2:	0793      	lsls	r3, r2, #30
 8007dd4:	680e      	ldr	r6, [r1, #0]
 8007dd6:	bf08      	it	eq
 8007dd8:	694b      	ldreq	r3, [r1, #20]
 8007dda:	600f      	str	r7, [r1, #0]
 8007ddc:	bf18      	it	ne
 8007dde:	2300      	movne	r3, #0
 8007de0:	eba6 0807 	sub.w	r8, r6, r7
 8007de4:	608b      	str	r3, [r1, #8]
 8007de6:	f1b8 0f00 	cmp.w	r8, #0
 8007dea:	dd9c      	ble.n	8007d26 <__sflush_r+0x1a>
 8007dec:	6a21      	ldr	r1, [r4, #32]
 8007dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007df0:	4643      	mov	r3, r8
 8007df2:	463a      	mov	r2, r7
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b0      	blx	r6
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	dc06      	bgt.n	8007e0a <__sflush_r+0xfe>
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e02:	81a3      	strh	r3, [r4, #12]
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	e78e      	b.n	8007d28 <__sflush_r+0x1c>
 8007e0a:	4407      	add	r7, r0
 8007e0c:	eba8 0800 	sub.w	r8, r8, r0
 8007e10:	e7e9      	b.n	8007de6 <__sflush_r+0xda>
 8007e12:	bf00      	nop
 8007e14:	dfbffffe 	.word	0xdfbffffe

08007e18 <_fflush_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	690b      	ldr	r3, [r1, #16]
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	b913      	cbnz	r3, 8007e28 <_fflush_r+0x10>
 8007e22:	2500      	movs	r5, #0
 8007e24:	4628      	mov	r0, r5
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	b118      	cbz	r0, 8007e32 <_fflush_r+0x1a>
 8007e2a:	6a03      	ldr	r3, [r0, #32]
 8007e2c:	b90b      	cbnz	r3, 8007e32 <_fflush_r+0x1a>
 8007e2e:	f7fd fa03 	bl	8005238 <__sinit>
 8007e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d0f3      	beq.n	8007e22 <_fflush_r+0xa>
 8007e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e3c:	07d0      	lsls	r0, r2, #31
 8007e3e:	d404      	bmi.n	8007e4a <_fflush_r+0x32>
 8007e40:	0599      	lsls	r1, r3, #22
 8007e42:	d402      	bmi.n	8007e4a <_fflush_r+0x32>
 8007e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e46:	f7fd fb42 	bl	80054ce <__retarget_lock_acquire_recursive>
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	f7ff ff5d 	bl	8007d0c <__sflush_r>
 8007e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e54:	07da      	lsls	r2, r3, #31
 8007e56:	4605      	mov	r5, r0
 8007e58:	d4e4      	bmi.n	8007e24 <_fflush_r+0xc>
 8007e5a:	89a3      	ldrh	r3, [r4, #12]
 8007e5c:	059b      	lsls	r3, r3, #22
 8007e5e:	d4e1      	bmi.n	8007e24 <_fflush_r+0xc>
 8007e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e62:	f7fd fb35 	bl	80054d0 <__retarget_lock_release_recursive>
 8007e66:	e7dd      	b.n	8007e24 <_fflush_r+0xc>

08007e68 <memmove>:
 8007e68:	4288      	cmp	r0, r1
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	eb01 0402 	add.w	r4, r1, r2
 8007e70:	d902      	bls.n	8007e78 <memmove+0x10>
 8007e72:	4284      	cmp	r4, r0
 8007e74:	4623      	mov	r3, r4
 8007e76:	d807      	bhi.n	8007e88 <memmove+0x20>
 8007e78:	1e43      	subs	r3, r0, #1
 8007e7a:	42a1      	cmp	r1, r4
 8007e7c:	d008      	beq.n	8007e90 <memmove+0x28>
 8007e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e86:	e7f8      	b.n	8007e7a <memmove+0x12>
 8007e88:	4402      	add	r2, r0
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	428a      	cmp	r2, r1
 8007e8e:	d100      	bne.n	8007e92 <memmove+0x2a>
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e9a:	e7f7      	b.n	8007e8c <memmove+0x24>

08007e9c <strncmp>:
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	b16a      	cbz	r2, 8007ebc <strncmp+0x20>
 8007ea0:	3901      	subs	r1, #1
 8007ea2:	1884      	adds	r4, r0, r2
 8007ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d103      	bne.n	8007eb8 <strncmp+0x1c>
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d001      	beq.n	8007eb8 <strncmp+0x1c>
 8007eb4:	2a00      	cmp	r2, #0
 8007eb6:	d1f5      	bne.n	8007ea4 <strncmp+0x8>
 8007eb8:	1ad0      	subs	r0, r2, r3
 8007eba:	bd10      	pop	{r4, pc}
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	e7fc      	b.n	8007eba <strncmp+0x1e>

08007ec0 <_sbrk_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4d06      	ldr	r5, [pc, #24]	; (8007edc <_sbrk_r+0x1c>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	602b      	str	r3, [r5, #0]
 8007ecc:	f7f9 fc28 	bl	8001720 <_sbrk>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_sbrk_r+0x1a>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_sbrk_r+0x1a>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	200003cc 	.word	0x200003cc

08007ee0 <memcpy>:
 8007ee0:	440a      	add	r2, r1
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ee8:	d100      	bne.n	8007eec <memcpy+0xc>
 8007eea:	4770      	bx	lr
 8007eec:	b510      	push	{r4, lr}
 8007eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	d1f9      	bne.n	8007eee <memcpy+0xe>
 8007efa:	bd10      	pop	{r4, pc}
 8007efc:	0000      	movs	r0, r0
	...

08007f00 <nan>:
 8007f00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007f08 <nan+0x8>
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	00000000 	.word	0x00000000
 8007f0c:	7ff80000 	.word	0x7ff80000

08007f10 <__assert_func>:
 8007f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f12:	4614      	mov	r4, r2
 8007f14:	461a      	mov	r2, r3
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <__assert_func+0x2c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	68d8      	ldr	r0, [r3, #12]
 8007f1e:	b14c      	cbz	r4, 8007f34 <__assert_func+0x24>
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <__assert_func+0x30>)
 8007f22:	9100      	str	r1, [sp, #0]
 8007f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f28:	4906      	ldr	r1, [pc, #24]	; (8007f44 <__assert_func+0x34>)
 8007f2a:	462b      	mov	r3, r5
 8007f2c:	f000 fbca 	bl	80086c4 <fiprintf>
 8007f30:	f000 fbda 	bl	80086e8 <abort>
 8007f34:	4b04      	ldr	r3, [pc, #16]	; (8007f48 <__assert_func+0x38>)
 8007f36:	461c      	mov	r4, r3
 8007f38:	e7f3      	b.n	8007f22 <__assert_func+0x12>
 8007f3a:	bf00      	nop
 8007f3c:	20000064 	.word	0x20000064
 8007f40:	08009022 	.word	0x08009022
 8007f44:	0800902f 	.word	0x0800902f
 8007f48:	0800905d 	.word	0x0800905d

08007f4c <_calloc_r>:
 8007f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f4e:	fba1 2402 	umull	r2, r4, r1, r2
 8007f52:	b94c      	cbnz	r4, 8007f68 <_calloc_r+0x1c>
 8007f54:	4611      	mov	r1, r2
 8007f56:	9201      	str	r2, [sp, #4]
 8007f58:	f7fe f9b0 	bl	80062bc <_malloc_r>
 8007f5c:	9a01      	ldr	r2, [sp, #4]
 8007f5e:	4605      	mov	r5, r0
 8007f60:	b930      	cbnz	r0, 8007f70 <_calloc_r+0x24>
 8007f62:	4628      	mov	r0, r5
 8007f64:	b003      	add	sp, #12
 8007f66:	bd30      	pop	{r4, r5, pc}
 8007f68:	220c      	movs	r2, #12
 8007f6a:	6002      	str	r2, [r0, #0]
 8007f6c:	2500      	movs	r5, #0
 8007f6e:	e7f8      	b.n	8007f62 <_calloc_r+0x16>
 8007f70:	4621      	mov	r1, r4
 8007f72:	f7fd fa2e 	bl	80053d2 <memset>
 8007f76:	e7f4      	b.n	8007f62 <_calloc_r+0x16>

08007f78 <rshift>:
 8007f78:	6903      	ldr	r3, [r0, #16]
 8007f7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f86:	f100 0414 	add.w	r4, r0, #20
 8007f8a:	dd45      	ble.n	8008018 <rshift+0xa0>
 8007f8c:	f011 011f 	ands.w	r1, r1, #31
 8007f90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f98:	d10c      	bne.n	8007fb4 <rshift+0x3c>
 8007f9a:	f100 0710 	add.w	r7, r0, #16
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	42b1      	cmp	r1, r6
 8007fa2:	d334      	bcc.n	800800e <rshift+0x96>
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	1eea      	subs	r2, r5, #3
 8007faa:	4296      	cmp	r6, r2
 8007fac:	bf38      	it	cc
 8007fae:	2300      	movcc	r3, #0
 8007fb0:	4423      	add	r3, r4
 8007fb2:	e015      	b.n	8007fe0 <rshift+0x68>
 8007fb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007fb8:	f1c1 0820 	rsb	r8, r1, #32
 8007fbc:	40cf      	lsrs	r7, r1
 8007fbe:	f105 0e04 	add.w	lr, r5, #4
 8007fc2:	46a1      	mov	r9, r4
 8007fc4:	4576      	cmp	r6, lr
 8007fc6:	46f4      	mov	ip, lr
 8007fc8:	d815      	bhi.n	8007ff6 <rshift+0x7e>
 8007fca:	1a9a      	subs	r2, r3, r2
 8007fcc:	0092      	lsls	r2, r2, #2
 8007fce:	3a04      	subs	r2, #4
 8007fd0:	3501      	adds	r5, #1
 8007fd2:	42ae      	cmp	r6, r5
 8007fd4:	bf38      	it	cc
 8007fd6:	2200      	movcc	r2, #0
 8007fd8:	18a3      	adds	r3, r4, r2
 8007fda:	50a7      	str	r7, [r4, r2]
 8007fdc:	b107      	cbz	r7, 8007fe0 <rshift+0x68>
 8007fde:	3304      	adds	r3, #4
 8007fe0:	1b1a      	subs	r2, r3, r4
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fe8:	bf08      	it	eq
 8007fea:	2300      	moveq	r3, #0
 8007fec:	6102      	str	r2, [r0, #16]
 8007fee:	bf08      	it	eq
 8007ff0:	6143      	streq	r3, [r0, #20]
 8007ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff6:	f8dc c000 	ldr.w	ip, [ip]
 8007ffa:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ffe:	ea4c 0707 	orr.w	r7, ip, r7
 8008002:	f849 7b04 	str.w	r7, [r9], #4
 8008006:	f85e 7b04 	ldr.w	r7, [lr], #4
 800800a:	40cf      	lsrs	r7, r1
 800800c:	e7da      	b.n	8007fc4 <rshift+0x4c>
 800800e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008012:	f847 cf04 	str.w	ip, [r7, #4]!
 8008016:	e7c3      	b.n	8007fa0 <rshift+0x28>
 8008018:	4623      	mov	r3, r4
 800801a:	e7e1      	b.n	8007fe0 <rshift+0x68>

0800801c <__hexdig_fun>:
 800801c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008020:	2b09      	cmp	r3, #9
 8008022:	d802      	bhi.n	800802a <__hexdig_fun+0xe>
 8008024:	3820      	subs	r0, #32
 8008026:	b2c0      	uxtb	r0, r0
 8008028:	4770      	bx	lr
 800802a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800802e:	2b05      	cmp	r3, #5
 8008030:	d801      	bhi.n	8008036 <__hexdig_fun+0x1a>
 8008032:	3847      	subs	r0, #71	; 0x47
 8008034:	e7f7      	b.n	8008026 <__hexdig_fun+0xa>
 8008036:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800803a:	2b05      	cmp	r3, #5
 800803c:	d801      	bhi.n	8008042 <__hexdig_fun+0x26>
 800803e:	3827      	subs	r0, #39	; 0x27
 8008040:	e7f1      	b.n	8008026 <__hexdig_fun+0xa>
 8008042:	2000      	movs	r0, #0
 8008044:	4770      	bx	lr
	...

08008048 <__gethex>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	4617      	mov	r7, r2
 800804e:	680a      	ldr	r2, [r1, #0]
 8008050:	b085      	sub	sp, #20
 8008052:	f102 0b02 	add.w	fp, r2, #2
 8008056:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800805a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800805e:	4681      	mov	r9, r0
 8008060:	468a      	mov	sl, r1
 8008062:	9302      	str	r3, [sp, #8]
 8008064:	32fe      	adds	r2, #254	; 0xfe
 8008066:	eb02 030b 	add.w	r3, r2, fp
 800806a:	46d8      	mov	r8, fp
 800806c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	2830      	cmp	r0, #48	; 0x30
 8008074:	d0f7      	beq.n	8008066 <__gethex+0x1e>
 8008076:	f7ff ffd1 	bl	800801c <__hexdig_fun>
 800807a:	4604      	mov	r4, r0
 800807c:	2800      	cmp	r0, #0
 800807e:	d138      	bne.n	80080f2 <__gethex+0xaa>
 8008080:	49a7      	ldr	r1, [pc, #668]	; (8008320 <__gethex+0x2d8>)
 8008082:	2201      	movs	r2, #1
 8008084:	4640      	mov	r0, r8
 8008086:	f7ff ff09 	bl	8007e9c <strncmp>
 800808a:	4606      	mov	r6, r0
 800808c:	2800      	cmp	r0, #0
 800808e:	d169      	bne.n	8008164 <__gethex+0x11c>
 8008090:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008094:	465d      	mov	r5, fp
 8008096:	f7ff ffc1 	bl	800801c <__hexdig_fun>
 800809a:	2800      	cmp	r0, #0
 800809c:	d064      	beq.n	8008168 <__gethex+0x120>
 800809e:	465a      	mov	r2, fp
 80080a0:	7810      	ldrb	r0, [r2, #0]
 80080a2:	2830      	cmp	r0, #48	; 0x30
 80080a4:	4690      	mov	r8, r2
 80080a6:	f102 0201 	add.w	r2, r2, #1
 80080aa:	d0f9      	beq.n	80080a0 <__gethex+0x58>
 80080ac:	f7ff ffb6 	bl	800801c <__hexdig_fun>
 80080b0:	2301      	movs	r3, #1
 80080b2:	fab0 f480 	clz	r4, r0
 80080b6:	0964      	lsrs	r4, r4, #5
 80080b8:	465e      	mov	r6, fp
 80080ba:	9301      	str	r3, [sp, #4]
 80080bc:	4642      	mov	r2, r8
 80080be:	4615      	mov	r5, r2
 80080c0:	3201      	adds	r2, #1
 80080c2:	7828      	ldrb	r0, [r5, #0]
 80080c4:	f7ff ffaa 	bl	800801c <__hexdig_fun>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d1f8      	bne.n	80080be <__gethex+0x76>
 80080cc:	4994      	ldr	r1, [pc, #592]	; (8008320 <__gethex+0x2d8>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	4628      	mov	r0, r5
 80080d2:	f7ff fee3 	bl	8007e9c <strncmp>
 80080d6:	b978      	cbnz	r0, 80080f8 <__gethex+0xb0>
 80080d8:	b946      	cbnz	r6, 80080ec <__gethex+0xa4>
 80080da:	1c6e      	adds	r6, r5, #1
 80080dc:	4632      	mov	r2, r6
 80080de:	4615      	mov	r5, r2
 80080e0:	3201      	adds	r2, #1
 80080e2:	7828      	ldrb	r0, [r5, #0]
 80080e4:	f7ff ff9a 	bl	800801c <__hexdig_fun>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1f8      	bne.n	80080de <__gethex+0x96>
 80080ec:	1b73      	subs	r3, r6, r5
 80080ee:	009e      	lsls	r6, r3, #2
 80080f0:	e004      	b.n	80080fc <__gethex+0xb4>
 80080f2:	2400      	movs	r4, #0
 80080f4:	4626      	mov	r6, r4
 80080f6:	e7e1      	b.n	80080bc <__gethex+0x74>
 80080f8:	2e00      	cmp	r6, #0
 80080fa:	d1f7      	bne.n	80080ec <__gethex+0xa4>
 80080fc:	782b      	ldrb	r3, [r5, #0]
 80080fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008102:	2b50      	cmp	r3, #80	; 0x50
 8008104:	d13d      	bne.n	8008182 <__gethex+0x13a>
 8008106:	786b      	ldrb	r3, [r5, #1]
 8008108:	2b2b      	cmp	r3, #43	; 0x2b
 800810a:	d02f      	beq.n	800816c <__gethex+0x124>
 800810c:	2b2d      	cmp	r3, #45	; 0x2d
 800810e:	d031      	beq.n	8008174 <__gethex+0x12c>
 8008110:	1c69      	adds	r1, r5, #1
 8008112:	f04f 0b00 	mov.w	fp, #0
 8008116:	7808      	ldrb	r0, [r1, #0]
 8008118:	f7ff ff80 	bl	800801c <__hexdig_fun>
 800811c:	1e42      	subs	r2, r0, #1
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	2a18      	cmp	r2, #24
 8008122:	d82e      	bhi.n	8008182 <__gethex+0x13a>
 8008124:	f1a0 0210 	sub.w	r2, r0, #16
 8008128:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800812c:	f7ff ff76 	bl	800801c <__hexdig_fun>
 8008130:	f100 3cff 	add.w	ip, r0, #4294967295
 8008134:	fa5f fc8c 	uxtb.w	ip, ip
 8008138:	f1bc 0f18 	cmp.w	ip, #24
 800813c:	d91d      	bls.n	800817a <__gethex+0x132>
 800813e:	f1bb 0f00 	cmp.w	fp, #0
 8008142:	d000      	beq.n	8008146 <__gethex+0xfe>
 8008144:	4252      	negs	r2, r2
 8008146:	4416      	add	r6, r2
 8008148:	f8ca 1000 	str.w	r1, [sl]
 800814c:	b1dc      	cbz	r4, 8008186 <__gethex+0x13e>
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	bf14      	ite	ne
 8008154:	f04f 0800 	movne.w	r8, #0
 8008158:	f04f 0806 	moveq.w	r8, #6
 800815c:	4640      	mov	r0, r8
 800815e:	b005      	add	sp, #20
 8008160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008164:	4645      	mov	r5, r8
 8008166:	4626      	mov	r6, r4
 8008168:	2401      	movs	r4, #1
 800816a:	e7c7      	b.n	80080fc <__gethex+0xb4>
 800816c:	f04f 0b00 	mov.w	fp, #0
 8008170:	1ca9      	adds	r1, r5, #2
 8008172:	e7d0      	b.n	8008116 <__gethex+0xce>
 8008174:	f04f 0b01 	mov.w	fp, #1
 8008178:	e7fa      	b.n	8008170 <__gethex+0x128>
 800817a:	230a      	movs	r3, #10
 800817c:	fb03 0002 	mla	r0, r3, r2, r0
 8008180:	e7d0      	b.n	8008124 <__gethex+0xdc>
 8008182:	4629      	mov	r1, r5
 8008184:	e7e0      	b.n	8008148 <__gethex+0x100>
 8008186:	eba5 0308 	sub.w	r3, r5, r8
 800818a:	3b01      	subs	r3, #1
 800818c:	4621      	mov	r1, r4
 800818e:	2b07      	cmp	r3, #7
 8008190:	dc0a      	bgt.n	80081a8 <__gethex+0x160>
 8008192:	4648      	mov	r0, r9
 8008194:	f7fe f91e 	bl	80063d4 <_Balloc>
 8008198:	4604      	mov	r4, r0
 800819a:	b940      	cbnz	r0, 80081ae <__gethex+0x166>
 800819c:	4b61      	ldr	r3, [pc, #388]	; (8008324 <__gethex+0x2dc>)
 800819e:	4602      	mov	r2, r0
 80081a0:	21e4      	movs	r1, #228	; 0xe4
 80081a2:	4861      	ldr	r0, [pc, #388]	; (8008328 <__gethex+0x2e0>)
 80081a4:	f7ff feb4 	bl	8007f10 <__assert_func>
 80081a8:	3101      	adds	r1, #1
 80081aa:	105b      	asrs	r3, r3, #1
 80081ac:	e7ef      	b.n	800818e <__gethex+0x146>
 80081ae:	f100 0a14 	add.w	sl, r0, #20
 80081b2:	2300      	movs	r3, #0
 80081b4:	495a      	ldr	r1, [pc, #360]	; (8008320 <__gethex+0x2d8>)
 80081b6:	f8cd a004 	str.w	sl, [sp, #4]
 80081ba:	469b      	mov	fp, r3
 80081bc:	45a8      	cmp	r8, r5
 80081be:	d342      	bcc.n	8008246 <__gethex+0x1fe>
 80081c0:	9801      	ldr	r0, [sp, #4]
 80081c2:	f840 bb04 	str.w	fp, [r0], #4
 80081c6:	eba0 000a 	sub.w	r0, r0, sl
 80081ca:	1080      	asrs	r0, r0, #2
 80081cc:	6120      	str	r0, [r4, #16]
 80081ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80081d2:	4658      	mov	r0, fp
 80081d4:	f7fe f9f0 	bl	80065b8 <__hi0bits>
 80081d8:	683d      	ldr	r5, [r7, #0]
 80081da:	eba8 0000 	sub.w	r0, r8, r0
 80081de:	42a8      	cmp	r0, r5
 80081e0:	dd59      	ble.n	8008296 <__gethex+0x24e>
 80081e2:	eba0 0805 	sub.w	r8, r0, r5
 80081e6:	4641      	mov	r1, r8
 80081e8:	4620      	mov	r0, r4
 80081ea:	f7fe fd7f 	bl	8006cec <__any_on>
 80081ee:	4683      	mov	fp, r0
 80081f0:	b1b8      	cbz	r0, 8008222 <__gethex+0x1da>
 80081f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80081f6:	1159      	asrs	r1, r3, #5
 80081f8:	f003 021f 	and.w	r2, r3, #31
 80081fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008200:	f04f 0b01 	mov.w	fp, #1
 8008204:	fa0b f202 	lsl.w	r2, fp, r2
 8008208:	420a      	tst	r2, r1
 800820a:	d00a      	beq.n	8008222 <__gethex+0x1da>
 800820c:	455b      	cmp	r3, fp
 800820e:	dd06      	ble.n	800821e <__gethex+0x1d6>
 8008210:	f1a8 0102 	sub.w	r1, r8, #2
 8008214:	4620      	mov	r0, r4
 8008216:	f7fe fd69 	bl	8006cec <__any_on>
 800821a:	2800      	cmp	r0, #0
 800821c:	d138      	bne.n	8008290 <__gethex+0x248>
 800821e:	f04f 0b02 	mov.w	fp, #2
 8008222:	4641      	mov	r1, r8
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff fea7 	bl	8007f78 <rshift>
 800822a:	4446      	add	r6, r8
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	42b3      	cmp	r3, r6
 8008230:	da41      	bge.n	80082b6 <__gethex+0x26e>
 8008232:	4621      	mov	r1, r4
 8008234:	4648      	mov	r0, r9
 8008236:	f7fe f90d 	bl	8006454 <_Bfree>
 800823a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800823c:	2300      	movs	r3, #0
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008244:	e78a      	b.n	800815c <__gethex+0x114>
 8008246:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800824a:	2a2e      	cmp	r2, #46	; 0x2e
 800824c:	d014      	beq.n	8008278 <__gethex+0x230>
 800824e:	2b20      	cmp	r3, #32
 8008250:	d106      	bne.n	8008260 <__gethex+0x218>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	f843 bb04 	str.w	fp, [r3], #4
 8008258:	f04f 0b00 	mov.w	fp, #0
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	465b      	mov	r3, fp
 8008260:	7828      	ldrb	r0, [r5, #0]
 8008262:	9303      	str	r3, [sp, #12]
 8008264:	f7ff feda 	bl	800801c <__hexdig_fun>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	f000 000f 	and.w	r0, r0, #15
 800826e:	4098      	lsls	r0, r3
 8008270:	ea4b 0b00 	orr.w	fp, fp, r0
 8008274:	3304      	adds	r3, #4
 8008276:	e7a1      	b.n	80081bc <__gethex+0x174>
 8008278:	45a8      	cmp	r8, r5
 800827a:	d8e8      	bhi.n	800824e <__gethex+0x206>
 800827c:	2201      	movs	r2, #1
 800827e:	4628      	mov	r0, r5
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	f7ff fe0b 	bl	8007e9c <strncmp>
 8008286:	4926      	ldr	r1, [pc, #152]	; (8008320 <__gethex+0x2d8>)
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	2800      	cmp	r0, #0
 800828c:	d1df      	bne.n	800824e <__gethex+0x206>
 800828e:	e795      	b.n	80081bc <__gethex+0x174>
 8008290:	f04f 0b03 	mov.w	fp, #3
 8008294:	e7c5      	b.n	8008222 <__gethex+0x1da>
 8008296:	da0b      	bge.n	80082b0 <__gethex+0x268>
 8008298:	eba5 0800 	sub.w	r8, r5, r0
 800829c:	4621      	mov	r1, r4
 800829e:	4642      	mov	r2, r8
 80082a0:	4648      	mov	r0, r9
 80082a2:	f7fe faf1 	bl	8006888 <__lshift>
 80082a6:	eba6 0608 	sub.w	r6, r6, r8
 80082aa:	4604      	mov	r4, r0
 80082ac:	f100 0a14 	add.w	sl, r0, #20
 80082b0:	f04f 0b00 	mov.w	fp, #0
 80082b4:	e7ba      	b.n	800822c <__gethex+0x1e4>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	42b3      	cmp	r3, r6
 80082ba:	dd73      	ble.n	80083a4 <__gethex+0x35c>
 80082bc:	1b9e      	subs	r6, r3, r6
 80082be:	42b5      	cmp	r5, r6
 80082c0:	dc34      	bgt.n	800832c <__gethex+0x2e4>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d023      	beq.n	8008310 <__gethex+0x2c8>
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d025      	beq.n	8008318 <__gethex+0x2d0>
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d115      	bne.n	80082fc <__gethex+0x2b4>
 80082d0:	42b5      	cmp	r5, r6
 80082d2:	d113      	bne.n	80082fc <__gethex+0x2b4>
 80082d4:	2d01      	cmp	r5, #1
 80082d6:	d10b      	bne.n	80082f0 <__gethex+0x2a8>
 80082d8:	9a02      	ldr	r2, [sp, #8]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	2301      	movs	r3, #1
 80082e0:	6123      	str	r3, [r4, #16]
 80082e2:	f8ca 3000 	str.w	r3, [sl]
 80082e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80082ec:	601c      	str	r4, [r3, #0]
 80082ee:	e735      	b.n	800815c <__gethex+0x114>
 80082f0:	1e69      	subs	r1, r5, #1
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7fe fcfa 	bl	8006cec <__any_on>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d1ed      	bne.n	80082d8 <__gethex+0x290>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4648      	mov	r0, r9
 8008300:	f7fe f8a8 	bl	8006454 <_Bfree>
 8008304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008306:	2300      	movs	r3, #0
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800830e:	e725      	b.n	800815c <__gethex+0x114>
 8008310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f2      	bne.n	80082fc <__gethex+0x2b4>
 8008316:	e7df      	b.n	80082d8 <__gethex+0x290>
 8008318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1dc      	bne.n	80082d8 <__gethex+0x290>
 800831e:	e7ed      	b.n	80082fc <__gethex+0x2b4>
 8008320:	08008eb4 	.word	0x08008eb4
 8008324:	08008d49 	.word	0x08008d49
 8008328:	0800905e 	.word	0x0800905e
 800832c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008330:	f1bb 0f00 	cmp.w	fp, #0
 8008334:	d133      	bne.n	800839e <__gethex+0x356>
 8008336:	f1b8 0f00 	cmp.w	r8, #0
 800833a:	d004      	beq.n	8008346 <__gethex+0x2fe>
 800833c:	4641      	mov	r1, r8
 800833e:	4620      	mov	r0, r4
 8008340:	f7fe fcd4 	bl	8006cec <__any_on>
 8008344:	4683      	mov	fp, r0
 8008346:	ea4f 1268 	mov.w	r2, r8, asr #5
 800834a:	2301      	movs	r3, #1
 800834c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008350:	f008 081f 	and.w	r8, r8, #31
 8008354:	fa03 f308 	lsl.w	r3, r3, r8
 8008358:	4213      	tst	r3, r2
 800835a:	4631      	mov	r1, r6
 800835c:	4620      	mov	r0, r4
 800835e:	bf18      	it	ne
 8008360:	f04b 0b02 	orrne.w	fp, fp, #2
 8008364:	1bad      	subs	r5, r5, r6
 8008366:	f7ff fe07 	bl	8007f78 <rshift>
 800836a:	687e      	ldr	r6, [r7, #4]
 800836c:	f04f 0802 	mov.w	r8, #2
 8008370:	f1bb 0f00 	cmp.w	fp, #0
 8008374:	d04a      	beq.n	800840c <__gethex+0x3c4>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b02      	cmp	r3, #2
 800837a:	d016      	beq.n	80083aa <__gethex+0x362>
 800837c:	2b03      	cmp	r3, #3
 800837e:	d018      	beq.n	80083b2 <__gethex+0x36a>
 8008380:	2b01      	cmp	r3, #1
 8008382:	d109      	bne.n	8008398 <__gethex+0x350>
 8008384:	f01b 0f02 	tst.w	fp, #2
 8008388:	d006      	beq.n	8008398 <__gethex+0x350>
 800838a:	f8da 3000 	ldr.w	r3, [sl]
 800838e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008392:	f01b 0f01 	tst.w	fp, #1
 8008396:	d10f      	bne.n	80083b8 <__gethex+0x370>
 8008398:	f048 0810 	orr.w	r8, r8, #16
 800839c:	e036      	b.n	800840c <__gethex+0x3c4>
 800839e:	f04f 0b01 	mov.w	fp, #1
 80083a2:	e7d0      	b.n	8008346 <__gethex+0x2fe>
 80083a4:	f04f 0801 	mov.w	r8, #1
 80083a8:	e7e2      	b.n	8008370 <__gethex+0x328>
 80083aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ac:	f1c3 0301 	rsb	r3, r3, #1
 80083b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80083b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0ef      	beq.n	8008398 <__gethex+0x350>
 80083b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80083bc:	f104 0214 	add.w	r2, r4, #20
 80083c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80083ca:	2300      	movs	r3, #0
 80083cc:	4694      	mov	ip, r2
 80083ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80083d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80083d6:	d01e      	beq.n	8008416 <__gethex+0x3ce>
 80083d8:	3101      	adds	r1, #1
 80083da:	f8cc 1000 	str.w	r1, [ip]
 80083de:	f1b8 0f02 	cmp.w	r8, #2
 80083e2:	f104 0214 	add.w	r2, r4, #20
 80083e6:	d13d      	bne.n	8008464 <__gethex+0x41c>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	42ab      	cmp	r3, r5
 80083ee:	d10b      	bne.n	8008408 <__gethex+0x3c0>
 80083f0:	1169      	asrs	r1, r5, #5
 80083f2:	2301      	movs	r3, #1
 80083f4:	f005 051f 	and.w	r5, r5, #31
 80083f8:	fa03 f505 	lsl.w	r5, r3, r5
 80083fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008400:	421d      	tst	r5, r3
 8008402:	bf18      	it	ne
 8008404:	f04f 0801 	movne.w	r8, #1
 8008408:	f048 0820 	orr.w	r8, r8, #32
 800840c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800840e:	601c      	str	r4, [r3, #0]
 8008410:	9b02      	ldr	r3, [sp, #8]
 8008412:	601e      	str	r6, [r3, #0]
 8008414:	e6a2      	b.n	800815c <__gethex+0x114>
 8008416:	4290      	cmp	r0, r2
 8008418:	f842 3c04 	str.w	r3, [r2, #-4]
 800841c:	d8d6      	bhi.n	80083cc <__gethex+0x384>
 800841e:	68a2      	ldr	r2, [r4, #8]
 8008420:	4593      	cmp	fp, r2
 8008422:	db17      	blt.n	8008454 <__gethex+0x40c>
 8008424:	6861      	ldr	r1, [r4, #4]
 8008426:	4648      	mov	r0, r9
 8008428:	3101      	adds	r1, #1
 800842a:	f7fd ffd3 	bl	80063d4 <_Balloc>
 800842e:	4682      	mov	sl, r0
 8008430:	b918      	cbnz	r0, 800843a <__gethex+0x3f2>
 8008432:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <__gethex+0x458>)
 8008434:	4602      	mov	r2, r0
 8008436:	2184      	movs	r1, #132	; 0x84
 8008438:	e6b3      	b.n	80081a2 <__gethex+0x15a>
 800843a:	6922      	ldr	r2, [r4, #16]
 800843c:	3202      	adds	r2, #2
 800843e:	f104 010c 	add.w	r1, r4, #12
 8008442:	0092      	lsls	r2, r2, #2
 8008444:	300c      	adds	r0, #12
 8008446:	f7ff fd4b 	bl	8007ee0 <memcpy>
 800844a:	4621      	mov	r1, r4
 800844c:	4648      	mov	r0, r9
 800844e:	f7fe f801 	bl	8006454 <_Bfree>
 8008452:	4654      	mov	r4, sl
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	1c51      	adds	r1, r2, #1
 8008458:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800845c:	6121      	str	r1, [r4, #16]
 800845e:	2101      	movs	r1, #1
 8008460:	6151      	str	r1, [r2, #20]
 8008462:	e7bc      	b.n	80083de <__gethex+0x396>
 8008464:	6921      	ldr	r1, [r4, #16]
 8008466:	4559      	cmp	r1, fp
 8008468:	dd0b      	ble.n	8008482 <__gethex+0x43a>
 800846a:	2101      	movs	r1, #1
 800846c:	4620      	mov	r0, r4
 800846e:	f7ff fd83 	bl	8007f78 <rshift>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	3601      	adds	r6, #1
 8008476:	42b3      	cmp	r3, r6
 8008478:	f6ff aedb 	blt.w	8008232 <__gethex+0x1ea>
 800847c:	f04f 0801 	mov.w	r8, #1
 8008480:	e7c2      	b.n	8008408 <__gethex+0x3c0>
 8008482:	f015 051f 	ands.w	r5, r5, #31
 8008486:	d0f9      	beq.n	800847c <__gethex+0x434>
 8008488:	9b01      	ldr	r3, [sp, #4]
 800848a:	441a      	add	r2, r3
 800848c:	f1c5 0520 	rsb	r5, r5, #32
 8008490:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008494:	f7fe f890 	bl	80065b8 <__hi0bits>
 8008498:	42a8      	cmp	r0, r5
 800849a:	dbe6      	blt.n	800846a <__gethex+0x422>
 800849c:	e7ee      	b.n	800847c <__gethex+0x434>
 800849e:	bf00      	nop
 80084a0:	08008d49 	.word	0x08008d49

080084a4 <L_shift>:
 80084a4:	f1c2 0208 	rsb	r2, r2, #8
 80084a8:	0092      	lsls	r2, r2, #2
 80084aa:	b570      	push	{r4, r5, r6, lr}
 80084ac:	f1c2 0620 	rsb	r6, r2, #32
 80084b0:	6843      	ldr	r3, [r0, #4]
 80084b2:	6804      	ldr	r4, [r0, #0]
 80084b4:	fa03 f506 	lsl.w	r5, r3, r6
 80084b8:	432c      	orrs	r4, r5
 80084ba:	40d3      	lsrs	r3, r2
 80084bc:	6004      	str	r4, [r0, #0]
 80084be:	f840 3f04 	str.w	r3, [r0, #4]!
 80084c2:	4288      	cmp	r0, r1
 80084c4:	d3f4      	bcc.n	80084b0 <L_shift+0xc>
 80084c6:	bd70      	pop	{r4, r5, r6, pc}

080084c8 <__match>:
 80084c8:	b530      	push	{r4, r5, lr}
 80084ca:	6803      	ldr	r3, [r0, #0]
 80084cc:	3301      	adds	r3, #1
 80084ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d2:	b914      	cbnz	r4, 80084da <__match+0x12>
 80084d4:	6003      	str	r3, [r0, #0]
 80084d6:	2001      	movs	r0, #1
 80084d8:	bd30      	pop	{r4, r5, pc}
 80084da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80084e2:	2d19      	cmp	r5, #25
 80084e4:	bf98      	it	ls
 80084e6:	3220      	addls	r2, #32
 80084e8:	42a2      	cmp	r2, r4
 80084ea:	d0f0      	beq.n	80084ce <__match+0x6>
 80084ec:	2000      	movs	r0, #0
 80084ee:	e7f3      	b.n	80084d8 <__match+0x10>

080084f0 <__hexnan>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	680b      	ldr	r3, [r1, #0]
 80084f6:	6801      	ldr	r1, [r0, #0]
 80084f8:	115e      	asrs	r6, r3, #5
 80084fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084fe:	f013 031f 	ands.w	r3, r3, #31
 8008502:	b087      	sub	sp, #28
 8008504:	bf18      	it	ne
 8008506:	3604      	addne	r6, #4
 8008508:	2500      	movs	r5, #0
 800850a:	1f37      	subs	r7, r6, #4
 800850c:	4682      	mov	sl, r0
 800850e:	4690      	mov	r8, r2
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	f846 5c04 	str.w	r5, [r6, #-4]
 8008516:	46b9      	mov	r9, r7
 8008518:	463c      	mov	r4, r7
 800851a:	9502      	str	r5, [sp, #8]
 800851c:	46ab      	mov	fp, r5
 800851e:	784a      	ldrb	r2, [r1, #1]
 8008520:	1c4b      	adds	r3, r1, #1
 8008522:	9303      	str	r3, [sp, #12]
 8008524:	b342      	cbz	r2, 8008578 <__hexnan+0x88>
 8008526:	4610      	mov	r0, r2
 8008528:	9105      	str	r1, [sp, #20]
 800852a:	9204      	str	r2, [sp, #16]
 800852c:	f7ff fd76 	bl	800801c <__hexdig_fun>
 8008530:	2800      	cmp	r0, #0
 8008532:	d14f      	bne.n	80085d4 <__hexnan+0xe4>
 8008534:	9a04      	ldr	r2, [sp, #16]
 8008536:	9905      	ldr	r1, [sp, #20]
 8008538:	2a20      	cmp	r2, #32
 800853a:	d818      	bhi.n	800856e <__hexnan+0x7e>
 800853c:	9b02      	ldr	r3, [sp, #8]
 800853e:	459b      	cmp	fp, r3
 8008540:	dd13      	ble.n	800856a <__hexnan+0x7a>
 8008542:	454c      	cmp	r4, r9
 8008544:	d206      	bcs.n	8008554 <__hexnan+0x64>
 8008546:	2d07      	cmp	r5, #7
 8008548:	dc04      	bgt.n	8008554 <__hexnan+0x64>
 800854a:	462a      	mov	r2, r5
 800854c:	4649      	mov	r1, r9
 800854e:	4620      	mov	r0, r4
 8008550:	f7ff ffa8 	bl	80084a4 <L_shift>
 8008554:	4544      	cmp	r4, r8
 8008556:	d950      	bls.n	80085fa <__hexnan+0x10a>
 8008558:	2300      	movs	r3, #0
 800855a:	f1a4 0904 	sub.w	r9, r4, #4
 800855e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008562:	f8cd b008 	str.w	fp, [sp, #8]
 8008566:	464c      	mov	r4, r9
 8008568:	461d      	mov	r5, r3
 800856a:	9903      	ldr	r1, [sp, #12]
 800856c:	e7d7      	b.n	800851e <__hexnan+0x2e>
 800856e:	2a29      	cmp	r2, #41	; 0x29
 8008570:	d155      	bne.n	800861e <__hexnan+0x12e>
 8008572:	3102      	adds	r1, #2
 8008574:	f8ca 1000 	str.w	r1, [sl]
 8008578:	f1bb 0f00 	cmp.w	fp, #0
 800857c:	d04f      	beq.n	800861e <__hexnan+0x12e>
 800857e:	454c      	cmp	r4, r9
 8008580:	d206      	bcs.n	8008590 <__hexnan+0xa0>
 8008582:	2d07      	cmp	r5, #7
 8008584:	dc04      	bgt.n	8008590 <__hexnan+0xa0>
 8008586:	462a      	mov	r2, r5
 8008588:	4649      	mov	r1, r9
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff ff8a 	bl	80084a4 <L_shift>
 8008590:	4544      	cmp	r4, r8
 8008592:	d934      	bls.n	80085fe <__hexnan+0x10e>
 8008594:	f1a8 0204 	sub.w	r2, r8, #4
 8008598:	4623      	mov	r3, r4
 800859a:	f853 1b04 	ldr.w	r1, [r3], #4
 800859e:	f842 1f04 	str.w	r1, [r2, #4]!
 80085a2:	429f      	cmp	r7, r3
 80085a4:	d2f9      	bcs.n	800859a <__hexnan+0xaa>
 80085a6:	1b3b      	subs	r3, r7, r4
 80085a8:	f023 0303 	bic.w	r3, r3, #3
 80085ac:	3304      	adds	r3, #4
 80085ae:	3e03      	subs	r6, #3
 80085b0:	3401      	adds	r4, #1
 80085b2:	42a6      	cmp	r6, r4
 80085b4:	bf38      	it	cc
 80085b6:	2304      	movcc	r3, #4
 80085b8:	4443      	add	r3, r8
 80085ba:	2200      	movs	r2, #0
 80085bc:	f843 2b04 	str.w	r2, [r3], #4
 80085c0:	429f      	cmp	r7, r3
 80085c2:	d2fb      	bcs.n	80085bc <__hexnan+0xcc>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	b91b      	cbnz	r3, 80085d0 <__hexnan+0xe0>
 80085c8:	4547      	cmp	r7, r8
 80085ca:	d126      	bne.n	800861a <__hexnan+0x12a>
 80085cc:	2301      	movs	r3, #1
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	2005      	movs	r0, #5
 80085d2:	e025      	b.n	8008620 <__hexnan+0x130>
 80085d4:	3501      	adds	r5, #1
 80085d6:	2d08      	cmp	r5, #8
 80085d8:	f10b 0b01 	add.w	fp, fp, #1
 80085dc:	dd06      	ble.n	80085ec <__hexnan+0xfc>
 80085de:	4544      	cmp	r4, r8
 80085e0:	d9c3      	bls.n	800856a <__hexnan+0x7a>
 80085e2:	2300      	movs	r3, #0
 80085e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80085e8:	2501      	movs	r5, #1
 80085ea:	3c04      	subs	r4, #4
 80085ec:	6822      	ldr	r2, [r4, #0]
 80085ee:	f000 000f 	and.w	r0, r0, #15
 80085f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80085f6:	6020      	str	r0, [r4, #0]
 80085f8:	e7b7      	b.n	800856a <__hexnan+0x7a>
 80085fa:	2508      	movs	r5, #8
 80085fc:	e7b5      	b.n	800856a <__hexnan+0x7a>
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0df      	beq.n	80085c4 <__hexnan+0xd4>
 8008604:	f1c3 0320 	rsb	r3, r3, #32
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	40da      	lsrs	r2, r3
 800860e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008612:	4013      	ands	r3, r2
 8008614:	f846 3c04 	str.w	r3, [r6, #-4]
 8008618:	e7d4      	b.n	80085c4 <__hexnan+0xd4>
 800861a:	3f04      	subs	r7, #4
 800861c:	e7d2      	b.n	80085c4 <__hexnan+0xd4>
 800861e:	2004      	movs	r0, #4
 8008620:	b007      	add	sp, #28
 8008622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008626 <__ascii_mbtowc>:
 8008626:	b082      	sub	sp, #8
 8008628:	b901      	cbnz	r1, 800862c <__ascii_mbtowc+0x6>
 800862a:	a901      	add	r1, sp, #4
 800862c:	b142      	cbz	r2, 8008640 <__ascii_mbtowc+0x1a>
 800862e:	b14b      	cbz	r3, 8008644 <__ascii_mbtowc+0x1e>
 8008630:	7813      	ldrb	r3, [r2, #0]
 8008632:	600b      	str	r3, [r1, #0]
 8008634:	7812      	ldrb	r2, [r2, #0]
 8008636:	1e10      	subs	r0, r2, #0
 8008638:	bf18      	it	ne
 800863a:	2001      	movne	r0, #1
 800863c:	b002      	add	sp, #8
 800863e:	4770      	bx	lr
 8008640:	4610      	mov	r0, r2
 8008642:	e7fb      	b.n	800863c <__ascii_mbtowc+0x16>
 8008644:	f06f 0001 	mvn.w	r0, #1
 8008648:	e7f8      	b.n	800863c <__ascii_mbtowc+0x16>

0800864a <_realloc_r>:
 800864a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864e:	4680      	mov	r8, r0
 8008650:	4614      	mov	r4, r2
 8008652:	460e      	mov	r6, r1
 8008654:	b921      	cbnz	r1, 8008660 <_realloc_r+0x16>
 8008656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800865a:	4611      	mov	r1, r2
 800865c:	f7fd be2e 	b.w	80062bc <_malloc_r>
 8008660:	b92a      	cbnz	r2, 800866e <_realloc_r+0x24>
 8008662:	f7fd fdb7 	bl	80061d4 <_free_r>
 8008666:	4625      	mov	r5, r4
 8008668:	4628      	mov	r0, r5
 800866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866e:	f000 f842 	bl	80086f6 <_malloc_usable_size_r>
 8008672:	4284      	cmp	r4, r0
 8008674:	4607      	mov	r7, r0
 8008676:	d802      	bhi.n	800867e <_realloc_r+0x34>
 8008678:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800867c:	d812      	bhi.n	80086a4 <_realloc_r+0x5a>
 800867e:	4621      	mov	r1, r4
 8008680:	4640      	mov	r0, r8
 8008682:	f7fd fe1b 	bl	80062bc <_malloc_r>
 8008686:	4605      	mov	r5, r0
 8008688:	2800      	cmp	r0, #0
 800868a:	d0ed      	beq.n	8008668 <_realloc_r+0x1e>
 800868c:	42bc      	cmp	r4, r7
 800868e:	4622      	mov	r2, r4
 8008690:	4631      	mov	r1, r6
 8008692:	bf28      	it	cs
 8008694:	463a      	movcs	r2, r7
 8008696:	f7ff fc23 	bl	8007ee0 <memcpy>
 800869a:	4631      	mov	r1, r6
 800869c:	4640      	mov	r0, r8
 800869e:	f7fd fd99 	bl	80061d4 <_free_r>
 80086a2:	e7e1      	b.n	8008668 <_realloc_r+0x1e>
 80086a4:	4635      	mov	r5, r6
 80086a6:	e7df      	b.n	8008668 <_realloc_r+0x1e>

080086a8 <__ascii_wctomb>:
 80086a8:	b149      	cbz	r1, 80086be <__ascii_wctomb+0x16>
 80086aa:	2aff      	cmp	r2, #255	; 0xff
 80086ac:	bf85      	ittet	hi
 80086ae:	238a      	movhi	r3, #138	; 0x8a
 80086b0:	6003      	strhi	r3, [r0, #0]
 80086b2:	700a      	strbls	r2, [r1, #0]
 80086b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80086b8:	bf98      	it	ls
 80086ba:	2001      	movls	r0, #1
 80086bc:	4770      	bx	lr
 80086be:	4608      	mov	r0, r1
 80086c0:	4770      	bx	lr
	...

080086c4 <fiprintf>:
 80086c4:	b40e      	push	{r1, r2, r3}
 80086c6:	b503      	push	{r0, r1, lr}
 80086c8:	4601      	mov	r1, r0
 80086ca:	ab03      	add	r3, sp, #12
 80086cc:	4805      	ldr	r0, [pc, #20]	; (80086e4 <fiprintf+0x20>)
 80086ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d2:	6800      	ldr	r0, [r0, #0]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	f000 f83f 	bl	8008758 <_vfiprintf_r>
 80086da:	b002      	add	sp, #8
 80086dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e0:	b003      	add	sp, #12
 80086e2:	4770      	bx	lr
 80086e4:	20000064 	.word	0x20000064

080086e8 <abort>:
 80086e8:	b508      	push	{r3, lr}
 80086ea:	2006      	movs	r0, #6
 80086ec:	f000 fa0c 	bl	8008b08 <raise>
 80086f0:	2001      	movs	r0, #1
 80086f2:	f7f8 ff9d 	bl	8001630 <_exit>

080086f6 <_malloc_usable_size_r>:
 80086f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086fa:	1f18      	subs	r0, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bfbc      	itt	lt
 8008700:	580b      	ldrlt	r3, [r1, r0]
 8008702:	18c0      	addlt	r0, r0, r3
 8008704:	4770      	bx	lr

08008706 <__sfputc_r>:
 8008706:	6893      	ldr	r3, [r2, #8]
 8008708:	3b01      	subs	r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	b410      	push	{r4}
 800870e:	6093      	str	r3, [r2, #8]
 8008710:	da08      	bge.n	8008724 <__sfputc_r+0x1e>
 8008712:	6994      	ldr	r4, [r2, #24]
 8008714:	42a3      	cmp	r3, r4
 8008716:	db01      	blt.n	800871c <__sfputc_r+0x16>
 8008718:	290a      	cmp	r1, #10
 800871a:	d103      	bne.n	8008724 <__sfputc_r+0x1e>
 800871c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008720:	f000 b934 	b.w	800898c <__swbuf_r>
 8008724:	6813      	ldr	r3, [r2, #0]
 8008726:	1c58      	adds	r0, r3, #1
 8008728:	6010      	str	r0, [r2, #0]
 800872a:	7019      	strb	r1, [r3, #0]
 800872c:	4608      	mov	r0, r1
 800872e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008732:	4770      	bx	lr

08008734 <__sfputs_r>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	4606      	mov	r6, r0
 8008738:	460f      	mov	r7, r1
 800873a:	4614      	mov	r4, r2
 800873c:	18d5      	adds	r5, r2, r3
 800873e:	42ac      	cmp	r4, r5
 8008740:	d101      	bne.n	8008746 <__sfputs_r+0x12>
 8008742:	2000      	movs	r0, #0
 8008744:	e007      	b.n	8008756 <__sfputs_r+0x22>
 8008746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874a:	463a      	mov	r2, r7
 800874c:	4630      	mov	r0, r6
 800874e:	f7ff ffda 	bl	8008706 <__sfputc_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d1f3      	bne.n	800873e <__sfputs_r+0xa>
 8008756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008758 <_vfiprintf_r>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	460d      	mov	r5, r1
 800875e:	b09d      	sub	sp, #116	; 0x74
 8008760:	4614      	mov	r4, r2
 8008762:	4698      	mov	r8, r3
 8008764:	4606      	mov	r6, r0
 8008766:	b118      	cbz	r0, 8008770 <_vfiprintf_r+0x18>
 8008768:	6a03      	ldr	r3, [r0, #32]
 800876a:	b90b      	cbnz	r3, 8008770 <_vfiprintf_r+0x18>
 800876c:	f7fc fd64 	bl	8005238 <__sinit>
 8008770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008772:	07d9      	lsls	r1, r3, #31
 8008774:	d405      	bmi.n	8008782 <_vfiprintf_r+0x2a>
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	059a      	lsls	r2, r3, #22
 800877a:	d402      	bmi.n	8008782 <_vfiprintf_r+0x2a>
 800877c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800877e:	f7fc fea6 	bl	80054ce <__retarget_lock_acquire_recursive>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	071b      	lsls	r3, r3, #28
 8008786:	d501      	bpl.n	800878c <_vfiprintf_r+0x34>
 8008788:	692b      	ldr	r3, [r5, #16]
 800878a:	b99b      	cbnz	r3, 80087b4 <_vfiprintf_r+0x5c>
 800878c:	4629      	mov	r1, r5
 800878e:	4630      	mov	r0, r6
 8008790:	f000 f93a 	bl	8008a08 <__swsetup_r>
 8008794:	b170      	cbz	r0, 80087b4 <_vfiprintf_r+0x5c>
 8008796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008798:	07dc      	lsls	r4, r3, #31
 800879a:	d504      	bpl.n	80087a6 <_vfiprintf_r+0x4e>
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	b01d      	add	sp, #116	; 0x74
 80087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	0598      	lsls	r0, r3, #22
 80087aa:	d4f7      	bmi.n	800879c <_vfiprintf_r+0x44>
 80087ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ae:	f7fc fe8f 	bl	80054d0 <__retarget_lock_release_recursive>
 80087b2:	e7f3      	b.n	800879c <_vfiprintf_r+0x44>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9309      	str	r3, [sp, #36]	; 0x24
 80087b8:	2320      	movs	r3, #32
 80087ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087be:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c2:	2330      	movs	r3, #48	; 0x30
 80087c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008978 <_vfiprintf_r+0x220>
 80087c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087cc:	f04f 0901 	mov.w	r9, #1
 80087d0:	4623      	mov	r3, r4
 80087d2:	469a      	mov	sl, r3
 80087d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d8:	b10a      	cbz	r2, 80087de <_vfiprintf_r+0x86>
 80087da:	2a25      	cmp	r2, #37	; 0x25
 80087dc:	d1f9      	bne.n	80087d2 <_vfiprintf_r+0x7a>
 80087de:	ebba 0b04 	subs.w	fp, sl, r4
 80087e2:	d00b      	beq.n	80087fc <_vfiprintf_r+0xa4>
 80087e4:	465b      	mov	r3, fp
 80087e6:	4622      	mov	r2, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff ffa2 	bl	8008734 <__sfputs_r>
 80087f0:	3001      	adds	r0, #1
 80087f2:	f000 80a9 	beq.w	8008948 <_vfiprintf_r+0x1f0>
 80087f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f8:	445a      	add	r2, fp
 80087fa:	9209      	str	r2, [sp, #36]	; 0x24
 80087fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 80a1 	beq.w	8008948 <_vfiprintf_r+0x1f0>
 8008806:	2300      	movs	r3, #0
 8008808:	f04f 32ff 	mov.w	r2, #4294967295
 800880c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008810:	f10a 0a01 	add.w	sl, sl, #1
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	9307      	str	r3, [sp, #28]
 8008818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800881c:	931a      	str	r3, [sp, #104]	; 0x68
 800881e:	4654      	mov	r4, sl
 8008820:	2205      	movs	r2, #5
 8008822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008826:	4854      	ldr	r0, [pc, #336]	; (8008978 <_vfiprintf_r+0x220>)
 8008828:	f7f7 fcf2 	bl	8000210 <memchr>
 800882c:	9a04      	ldr	r2, [sp, #16]
 800882e:	b9d8      	cbnz	r0, 8008868 <_vfiprintf_r+0x110>
 8008830:	06d1      	lsls	r1, r2, #27
 8008832:	bf44      	itt	mi
 8008834:	2320      	movmi	r3, #32
 8008836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800883a:	0713      	lsls	r3, r2, #28
 800883c:	bf44      	itt	mi
 800883e:	232b      	movmi	r3, #43	; 0x2b
 8008840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008844:	f89a 3000 	ldrb.w	r3, [sl]
 8008848:	2b2a      	cmp	r3, #42	; 0x2a
 800884a:	d015      	beq.n	8008878 <_vfiprintf_r+0x120>
 800884c:	9a07      	ldr	r2, [sp, #28]
 800884e:	4654      	mov	r4, sl
 8008850:	2000      	movs	r0, #0
 8008852:	f04f 0c0a 	mov.w	ip, #10
 8008856:	4621      	mov	r1, r4
 8008858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800885c:	3b30      	subs	r3, #48	; 0x30
 800885e:	2b09      	cmp	r3, #9
 8008860:	d94d      	bls.n	80088fe <_vfiprintf_r+0x1a6>
 8008862:	b1b0      	cbz	r0, 8008892 <_vfiprintf_r+0x13a>
 8008864:	9207      	str	r2, [sp, #28]
 8008866:	e014      	b.n	8008892 <_vfiprintf_r+0x13a>
 8008868:	eba0 0308 	sub.w	r3, r0, r8
 800886c:	fa09 f303 	lsl.w	r3, r9, r3
 8008870:	4313      	orrs	r3, r2
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	46a2      	mov	sl, r4
 8008876:	e7d2      	b.n	800881e <_vfiprintf_r+0xc6>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	1d19      	adds	r1, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9103      	str	r1, [sp, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfbb      	ittet	lt
 8008884:	425b      	neglt	r3, r3
 8008886:	f042 0202 	orrlt.w	r2, r2, #2
 800888a:	9307      	strge	r3, [sp, #28]
 800888c:	9307      	strlt	r3, [sp, #28]
 800888e:	bfb8      	it	lt
 8008890:	9204      	strlt	r2, [sp, #16]
 8008892:	7823      	ldrb	r3, [r4, #0]
 8008894:	2b2e      	cmp	r3, #46	; 0x2e
 8008896:	d10c      	bne.n	80088b2 <_vfiprintf_r+0x15a>
 8008898:	7863      	ldrb	r3, [r4, #1]
 800889a:	2b2a      	cmp	r3, #42	; 0x2a
 800889c:	d134      	bne.n	8008908 <_vfiprintf_r+0x1b0>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	1d1a      	adds	r2, r3, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9203      	str	r2, [sp, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfb8      	it	lt
 80088aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ae:	3402      	adds	r4, #2
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008988 <_vfiprintf_r+0x230>
 80088b6:	7821      	ldrb	r1, [r4, #0]
 80088b8:	2203      	movs	r2, #3
 80088ba:	4650      	mov	r0, sl
 80088bc:	f7f7 fca8 	bl	8000210 <memchr>
 80088c0:	b138      	cbz	r0, 80088d2 <_vfiprintf_r+0x17a>
 80088c2:	9b04      	ldr	r3, [sp, #16]
 80088c4:	eba0 000a 	sub.w	r0, r0, sl
 80088c8:	2240      	movs	r2, #64	; 0x40
 80088ca:	4082      	lsls	r2, r0
 80088cc:	4313      	orrs	r3, r2
 80088ce:	3401      	adds	r4, #1
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d6:	4829      	ldr	r0, [pc, #164]	; (800897c <_vfiprintf_r+0x224>)
 80088d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088dc:	2206      	movs	r2, #6
 80088de:	f7f7 fc97 	bl	8000210 <memchr>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d03f      	beq.n	8008966 <_vfiprintf_r+0x20e>
 80088e6:	4b26      	ldr	r3, [pc, #152]	; (8008980 <_vfiprintf_r+0x228>)
 80088e8:	bb1b      	cbnz	r3, 8008932 <_vfiprintf_r+0x1da>
 80088ea:	9b03      	ldr	r3, [sp, #12]
 80088ec:	3307      	adds	r3, #7
 80088ee:	f023 0307 	bic.w	r3, r3, #7
 80088f2:	3308      	adds	r3, #8
 80088f4:	9303      	str	r3, [sp, #12]
 80088f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f8:	443b      	add	r3, r7
 80088fa:	9309      	str	r3, [sp, #36]	; 0x24
 80088fc:	e768      	b.n	80087d0 <_vfiprintf_r+0x78>
 80088fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008902:	460c      	mov	r4, r1
 8008904:	2001      	movs	r0, #1
 8008906:	e7a6      	b.n	8008856 <_vfiprintf_r+0xfe>
 8008908:	2300      	movs	r3, #0
 800890a:	3401      	adds	r4, #1
 800890c:	9305      	str	r3, [sp, #20]
 800890e:	4619      	mov	r1, r3
 8008910:	f04f 0c0a 	mov.w	ip, #10
 8008914:	4620      	mov	r0, r4
 8008916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891a:	3a30      	subs	r2, #48	; 0x30
 800891c:	2a09      	cmp	r2, #9
 800891e:	d903      	bls.n	8008928 <_vfiprintf_r+0x1d0>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0c6      	beq.n	80088b2 <_vfiprintf_r+0x15a>
 8008924:	9105      	str	r1, [sp, #20]
 8008926:	e7c4      	b.n	80088b2 <_vfiprintf_r+0x15a>
 8008928:	fb0c 2101 	mla	r1, ip, r1, r2
 800892c:	4604      	mov	r4, r0
 800892e:	2301      	movs	r3, #1
 8008930:	e7f0      	b.n	8008914 <_vfiprintf_r+0x1bc>
 8008932:	ab03      	add	r3, sp, #12
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	462a      	mov	r2, r5
 8008938:	4b12      	ldr	r3, [pc, #72]	; (8008984 <_vfiprintf_r+0x22c>)
 800893a:	a904      	add	r1, sp, #16
 800893c:	4630      	mov	r0, r6
 800893e:	f7fb fe19 	bl	8004574 <_printf_float>
 8008942:	4607      	mov	r7, r0
 8008944:	1c78      	adds	r0, r7, #1
 8008946:	d1d6      	bne.n	80088f6 <_vfiprintf_r+0x19e>
 8008948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800894a:	07d9      	lsls	r1, r3, #31
 800894c:	d405      	bmi.n	800895a <_vfiprintf_r+0x202>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	059a      	lsls	r2, r3, #22
 8008952:	d402      	bmi.n	800895a <_vfiprintf_r+0x202>
 8008954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008956:	f7fc fdbb 	bl	80054d0 <__retarget_lock_release_recursive>
 800895a:	89ab      	ldrh	r3, [r5, #12]
 800895c:	065b      	lsls	r3, r3, #25
 800895e:	f53f af1d 	bmi.w	800879c <_vfiprintf_r+0x44>
 8008962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008964:	e71c      	b.n	80087a0 <_vfiprintf_r+0x48>
 8008966:	ab03      	add	r3, sp, #12
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	462a      	mov	r2, r5
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <_vfiprintf_r+0x22c>)
 800896e:	a904      	add	r1, sp, #16
 8008970:	4630      	mov	r0, r6
 8008972:	f7fc f8a3 	bl	8004abc <_printf_i>
 8008976:	e7e4      	b.n	8008942 <_vfiprintf_r+0x1ea>
 8008978:	08009009 	.word	0x08009009
 800897c:	08009013 	.word	0x08009013
 8008980:	08004575 	.word	0x08004575
 8008984:	08008735 	.word	0x08008735
 8008988:	0800900f 	.word	0x0800900f

0800898c <__swbuf_r>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	460e      	mov	r6, r1
 8008990:	4614      	mov	r4, r2
 8008992:	4605      	mov	r5, r0
 8008994:	b118      	cbz	r0, 800899e <__swbuf_r+0x12>
 8008996:	6a03      	ldr	r3, [r0, #32]
 8008998:	b90b      	cbnz	r3, 800899e <__swbuf_r+0x12>
 800899a:	f7fc fc4d 	bl	8005238 <__sinit>
 800899e:	69a3      	ldr	r3, [r4, #24]
 80089a0:	60a3      	str	r3, [r4, #8]
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	071a      	lsls	r2, r3, #28
 80089a6:	d525      	bpl.n	80089f4 <__swbuf_r+0x68>
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	b31b      	cbz	r3, 80089f4 <__swbuf_r+0x68>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	6922      	ldr	r2, [r4, #16]
 80089b0:	1a98      	subs	r0, r3, r2
 80089b2:	6963      	ldr	r3, [r4, #20]
 80089b4:	b2f6      	uxtb	r6, r6
 80089b6:	4283      	cmp	r3, r0
 80089b8:	4637      	mov	r7, r6
 80089ba:	dc04      	bgt.n	80089c6 <__swbuf_r+0x3a>
 80089bc:	4621      	mov	r1, r4
 80089be:	4628      	mov	r0, r5
 80089c0:	f7ff fa2a 	bl	8007e18 <_fflush_r>
 80089c4:	b9e0      	cbnz	r0, 8008a00 <__swbuf_r+0x74>
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	60a3      	str	r3, [r4, #8]
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	6022      	str	r2, [r4, #0]
 80089d2:	701e      	strb	r6, [r3, #0]
 80089d4:	6962      	ldr	r2, [r4, #20]
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	429a      	cmp	r2, r3
 80089da:	d004      	beq.n	80089e6 <__swbuf_r+0x5a>
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	07db      	lsls	r3, r3, #31
 80089e0:	d506      	bpl.n	80089f0 <__swbuf_r+0x64>
 80089e2:	2e0a      	cmp	r6, #10
 80089e4:	d104      	bne.n	80089f0 <__swbuf_r+0x64>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	f7ff fa15 	bl	8007e18 <_fflush_r>
 80089ee:	b938      	cbnz	r0, 8008a00 <__swbuf_r+0x74>
 80089f0:	4638      	mov	r0, r7
 80089f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f4:	4621      	mov	r1, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 f806 	bl	8008a08 <__swsetup_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d0d5      	beq.n	80089ac <__swbuf_r+0x20>
 8008a00:	f04f 37ff 	mov.w	r7, #4294967295
 8008a04:	e7f4      	b.n	80089f0 <__swbuf_r+0x64>
	...

08008a08 <__swsetup_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4b2a      	ldr	r3, [pc, #168]	; (8008ab4 <__swsetup_r+0xac>)
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	460c      	mov	r4, r1
 8008a12:	b118      	cbz	r0, 8008a1c <__swsetup_r+0x14>
 8008a14:	6a03      	ldr	r3, [r0, #32]
 8008a16:	b90b      	cbnz	r3, 8008a1c <__swsetup_r+0x14>
 8008a18:	f7fc fc0e 	bl	8005238 <__sinit>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a22:	0718      	lsls	r0, r3, #28
 8008a24:	d422      	bmi.n	8008a6c <__swsetup_r+0x64>
 8008a26:	06d9      	lsls	r1, r3, #27
 8008a28:	d407      	bmi.n	8008a3a <__swsetup_r+0x32>
 8008a2a:	2309      	movs	r3, #9
 8008a2c:	602b      	str	r3, [r5, #0]
 8008a2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	e034      	b.n	8008aa4 <__swsetup_r+0x9c>
 8008a3a:	0758      	lsls	r0, r3, #29
 8008a3c:	d512      	bpl.n	8008a64 <__swsetup_r+0x5c>
 8008a3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a40:	b141      	cbz	r1, 8008a54 <__swsetup_r+0x4c>
 8008a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a46:	4299      	cmp	r1, r3
 8008a48:	d002      	beq.n	8008a50 <__swsetup_r+0x48>
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7fd fbc2 	bl	80061d4 <_free_r>
 8008a50:	2300      	movs	r3, #0
 8008a52:	6363      	str	r3, [r4, #52]	; 0x34
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	6923      	ldr	r3, [r4, #16]
 8008a62:	6023      	str	r3, [r4, #0]
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f043 0308 	orr.w	r3, r3, #8
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	b94b      	cbnz	r3, 8008a84 <__swsetup_r+0x7c>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a7a:	d003      	beq.n	8008a84 <__swsetup_r+0x7c>
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 f884 	bl	8008b8c <__smakebuf_r>
 8008a84:	89a0      	ldrh	r0, [r4, #12]
 8008a86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a8a:	f010 0301 	ands.w	r3, r0, #1
 8008a8e:	d00a      	beq.n	8008aa6 <__swsetup_r+0x9e>
 8008a90:	2300      	movs	r3, #0
 8008a92:	60a3      	str	r3, [r4, #8]
 8008a94:	6963      	ldr	r3, [r4, #20]
 8008a96:	425b      	negs	r3, r3
 8008a98:	61a3      	str	r3, [r4, #24]
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	b943      	cbnz	r3, 8008ab0 <__swsetup_r+0xa8>
 8008a9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008aa2:	d1c4      	bne.n	8008a2e <__swsetup_r+0x26>
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	0781      	lsls	r1, r0, #30
 8008aa8:	bf58      	it	pl
 8008aaa:	6963      	ldrpl	r3, [r4, #20]
 8008aac:	60a3      	str	r3, [r4, #8]
 8008aae:	e7f4      	b.n	8008a9a <__swsetup_r+0x92>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e7f7      	b.n	8008aa4 <__swsetup_r+0x9c>
 8008ab4:	20000064 	.word	0x20000064

08008ab8 <_raise_r>:
 8008ab8:	291f      	cmp	r1, #31
 8008aba:	b538      	push	{r3, r4, r5, lr}
 8008abc:	4604      	mov	r4, r0
 8008abe:	460d      	mov	r5, r1
 8008ac0:	d904      	bls.n	8008acc <_raise_r+0x14>
 8008ac2:	2316      	movs	r3, #22
 8008ac4:	6003      	str	r3, [r0, #0]
 8008ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ace:	b112      	cbz	r2, 8008ad6 <_raise_r+0x1e>
 8008ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ad4:	b94b      	cbnz	r3, 8008aea <_raise_r+0x32>
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 f830 	bl	8008b3c <_getpid_r>
 8008adc:	462a      	mov	r2, r5
 8008ade:	4601      	mov	r1, r0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae6:	f000 b817 	b.w	8008b18 <_kill_r>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d00a      	beq.n	8008b04 <_raise_r+0x4c>
 8008aee:	1c59      	adds	r1, r3, #1
 8008af0:	d103      	bne.n	8008afa <_raise_r+0x42>
 8008af2:	2316      	movs	r3, #22
 8008af4:	6003      	str	r3, [r0, #0]
 8008af6:	2001      	movs	r0, #1
 8008af8:	e7e7      	b.n	8008aca <_raise_r+0x12>
 8008afa:	2400      	movs	r4, #0
 8008afc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b00:	4628      	mov	r0, r5
 8008b02:	4798      	blx	r3
 8008b04:	2000      	movs	r0, #0
 8008b06:	e7e0      	b.n	8008aca <_raise_r+0x12>

08008b08 <raise>:
 8008b08:	4b02      	ldr	r3, [pc, #8]	; (8008b14 <raise+0xc>)
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	f7ff bfd3 	b.w	8008ab8 <_raise_r>
 8008b12:	bf00      	nop
 8008b14:	20000064 	.word	0x20000064

08008b18 <_kill_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	; (8008b38 <_kill_r+0x20>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	f7f8 fd73 	bl	8001610 <_kill>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d102      	bne.n	8008b34 <_kill_r+0x1c>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b103      	cbz	r3, 8008b34 <_kill_r+0x1c>
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
 8008b36:	bf00      	nop
 8008b38:	200003cc 	.word	0x200003cc

08008b3c <_getpid_r>:
 8008b3c:	f7f8 bd60 	b.w	8001600 <_getpid>

08008b40 <__swhatbuf_r>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	460c      	mov	r4, r1
 8008b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	b096      	sub	sp, #88	; 0x58
 8008b4c:	4615      	mov	r5, r2
 8008b4e:	461e      	mov	r6, r3
 8008b50:	da0d      	bge.n	8008b6e <__swhatbuf_r+0x2e>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b58:	f04f 0100 	mov.w	r1, #0
 8008b5c:	bf0c      	ite	eq
 8008b5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b62:	2340      	movne	r3, #64	; 0x40
 8008b64:	2000      	movs	r0, #0
 8008b66:	6031      	str	r1, [r6, #0]
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	b016      	add	sp, #88	; 0x58
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	466a      	mov	r2, sp
 8008b70:	f000 f848 	bl	8008c04 <_fstat_r>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	dbec      	blt.n	8008b52 <__swhatbuf_r+0x12>
 8008b78:	9901      	ldr	r1, [sp, #4]
 8008b7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008b7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008b82:	4259      	negs	r1, r3
 8008b84:	4159      	adcs	r1, r3
 8008b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8a:	e7eb      	b.n	8008b64 <__swhatbuf_r+0x24>

08008b8c <__smakebuf_r>:
 8008b8c:	898b      	ldrh	r3, [r1, #12]
 8008b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b90:	079d      	lsls	r5, r3, #30
 8008b92:	4606      	mov	r6, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	d507      	bpl.n	8008ba8 <__smakebuf_r+0x1c>
 8008b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	6163      	str	r3, [r4, #20]
 8008ba4:	b002      	add	sp, #8
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	ab01      	add	r3, sp, #4
 8008baa:	466a      	mov	r2, sp
 8008bac:	f7ff ffc8 	bl	8008b40 <__swhatbuf_r>
 8008bb0:	9900      	ldr	r1, [sp, #0]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f7fd fb81 	bl	80062bc <_malloc_r>
 8008bba:	b948      	cbnz	r0, 8008bd0 <__smakebuf_r+0x44>
 8008bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc0:	059a      	lsls	r2, r3, #22
 8008bc2:	d4ef      	bmi.n	8008ba4 <__smakebuf_r+0x18>
 8008bc4:	f023 0303 	bic.w	r3, r3, #3
 8008bc8:	f043 0302 	orr.w	r3, r3, #2
 8008bcc:	81a3      	strh	r3, [r4, #12]
 8008bce:	e7e3      	b.n	8008b98 <__smakebuf_r+0xc>
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	6020      	str	r0, [r4, #0]
 8008bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd8:	81a3      	strh	r3, [r4, #12]
 8008bda:	9b00      	ldr	r3, [sp, #0]
 8008bdc:	6163      	str	r3, [r4, #20]
 8008bde:	9b01      	ldr	r3, [sp, #4]
 8008be0:	6120      	str	r0, [r4, #16]
 8008be2:	b15b      	cbz	r3, 8008bfc <__smakebuf_r+0x70>
 8008be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be8:	4630      	mov	r0, r6
 8008bea:	f000 f81d 	bl	8008c28 <_isatty_r>
 8008bee:	b128      	cbz	r0, 8008bfc <__smakebuf_r+0x70>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	431d      	orrs	r5, r3
 8008c00:	81a5      	strh	r5, [r4, #12]
 8008c02:	e7cf      	b.n	8008ba4 <__smakebuf_r+0x18>

08008c04 <_fstat_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d07      	ldr	r5, [pc, #28]	; (8008c24 <_fstat_r+0x20>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f7f8 fd5c 	bl	80016ce <_fstat>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d102      	bne.n	8008c20 <_fstat_r+0x1c>
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	b103      	cbz	r3, 8008c20 <_fstat_r+0x1c>
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	200003cc 	.word	0x200003cc

08008c28 <_isatty_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	; (8008c44 <_isatty_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f8 fd5b 	bl	80016ee <_isatty>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_isatty_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_isatty_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	200003cc 	.word	0x200003cc

08008c48 <_init>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr

08008c54 <_fini>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr
